version,location,text
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(4489,506,<166,0>,<188,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputBinary.java|(5933,197,<192,0>,<199,69>)","        if (s == null) {
            return null;
        }

        return new ClobDataMemory(s.toCharArray(), false);
    }

    protected BlobData readBlob() throws IOException, HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/navigator/DataRowSetNavigator.java|(12912,228,<505,0>,<516,1>)","                return false;
            }
        }

        return true;
    }

    private boolean equals(Object o1, Object o2) {
        return (o1 == null) ? o2 == null
                            : o1.equals(o2);
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongDeque.java|(3149,205,<100,0>,<107,9>)","        firstindex++;
        elementCount--;

        if (elementCount == 0) {
            firstindex = endindex = 0;
        } else if (firstindex == list.length) {
            firstindex = 0;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestJDBCSavepoints.java|(16791,158,<503,0>,<509,1>)","        failures = result.failures();

        while (failures.hasMoreElements()) {
            System.out.println(failures.nextElement());
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/scriptio/ScriptWriterBinary.java|(1629,176,<33,0>,<39,24>)","import java.io.IOException;

import org.hsqldb.Database;
import org.hsqldb.HsqlException;
import org.hsqldb.NumberSequence;
import org.hsqldb.Session;
import org.hsqldb.Table;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(2060,211,<50,0>,<57,36>)","    }

    public int displaySize() {
        return precision > Integer.MAX_VALUE ? Integer.MAX_VALUE
                                             : (int) precision;
    }

    public int getJDBCTypeNumber() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(2345,201,<64,0>,<72,24>)","import java.sql.NClob;
import java.sql.RowId;
import java.sql.SQLXML;

//#endif JDBC4
import org.hsqldb.HsqlDateTime;
import org.hsqldb.HsqlException;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestAllTypes.java|(12088,306,<332,0>,<338,68>)","                    slow = true;
                }

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println(""Select "" + (i + 1) + "" : ""
                                       + sw.elapsedTime() + "" rps: ""
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcBlob.java|(25824,1794,<644,0>,<685,62>)","                } catch (SQLException se) {
                    throw new java.io.IOException(se.toString());
                } finally {
                    super.close();
                }
            }
        };
    }

    /**
     * Truncates the <code>BLOB</code> value that this <code>Blob</code>
     * object represents to be <code>len</code> bytes in length.
     * <p>
     * <b>Note:</b> If the value specified for <code>pos</code>
     * is greater then the length+1 of the <code>BLOB</code> value then the
     * behavior is undefined. Some JDBC drivers may throw a
     * <code>SQLException</code> while other drivers may support this
     * operation.
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * This operation affects only the client-side value; it has no effect upon
     * a value stored in the database. To reflect an updated value in a
     * database, it is required to use an updating setXXX method of an
     * updating Prepared or Callable Statement, or to use an updateXXX method
     * of and updateable ResultSet. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param len the length, in bytes, to which the <code>BLOB</code> value
     *        that this <code>Blob</code> object represents should be truncated
     * @exception SQLException if there is an error accessing the
     *            <code>BLOB</code> value or if len is less than 0
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @since JDK 1.4, HSQLDB 1.7.2
     * @revised JDK 1.6, HSQLDB 1.8.x
     */
    public void truncate(final long len) throws SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestJDBCSavepoints.java|(16266,319,<482,0>,<494,34>)","    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {

        TestResult            result;
        TestCase              test;
        java.util.Enumeration failures;
        int                   count;

        result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(3539,352,<121,0>,<143,36>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputTextLog.java|(10228,197,<405,0>,<412,69>)","        if (s == null) {
            return null;
        }

        return new ClobDataMemory(s.toCharArray(), false);
    }

    protected BlobData readBlob() throws IOException, HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(10779,209,<352,0>,<361,9>)","        }
        
        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public Object convertToDefaultType(Object a) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(3094,352,<99,0>,<121,36>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(14925,615,<472,0>,<490,23>)","            return convertToType(null, a, Type.SQL_VARCHAR);
        } else if (a instanceof java.sql.Date) {
            return convertToType(null, a, Type.SQL_DATE);
        } else if (a instanceof java.sql.Time) {
            return convertToType(null, a, Type.SQL_TIME);
        } else if (a instanceof java.sql.Timestamp) {
            return convertToType(null, a, Type.SQL_TIMESTAMP);
        } else {
            throw Trace.error(Trace.INVALID_CONVERSION);
        }
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusConnectionDialog.java|(6002,105,<197,0>,<203,5>)","        } else {
            setLocation(0, 0);
            setSize(d);
        }

        show();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(3214,332,<98,0>,<110,28>)","    }

    public Type getAggregateType(Type other) throws HsqlException {

        if (type == other.type) {
            return precision >= other.precision ? this
                                                : other;
        }

        switch (other.type) {

            case Types.SQL_ALL_TYPES :
                return this;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/OrderedHashSet.java|(3841,150,<141,0>,<149,1>)","    }

    private void checkRange(int i) {

        if (i < 0 || i >= size()) {
            throw new IndexOutOfBoundsException();
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcBlobTest.java|(2050,234,<49,0>,<60,32>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(2915,139,<89,0>,<96,5>)","        if (lookup != -1) {
            value[0] = intValueTable[lookup];

            return true;
        }

        return false;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/OracleTransferHelper.java|(4506,440,<122,0>,<141,24>)","                NewColumnType += columnType.substring(iStartPos
                                                      + HSQLDB_func.length());
                columnType = NewColumnType;
            }
        }

        return (columnType);
    }

    void beginDataTransfer() {

        try {
            db.setAutoCommit(false);
        } catch (Exception e) {}
    }

    void endDataTransfer() {

        try {
            db.commit();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/OtherType.java|(2404,248,<68,0>,<82,29>)","    }

    public int getSQLGenericTypeNumber() {

        // return Types.SQL_UDT;
        return type;
    }

    public int getSQLSpecificTypeNumber() {

        // return Types.SQL_UDT;
        return type;
    }

    public String getName() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputText.java|(1905,295,<43,0>,<50,29>)","import org.hsqldb.types.BinaryData;
import org.hsqldb.types.BlobData;
import org.hsqldb.types.ClobData;
import org.hsqldb.types.IntervalMonthData;
import org.hsqldb.types.IntervalSecondData;
import org.hsqldb.types.JavaObjectData;
import org.hsqldb.types.TimeData;
import org.hsqldb.types.Type;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/SqlToolHarness.java|(7247,101,<212,0>,<219,5>)","                }

                return false;
            }
        }

        return true;
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcRowIdTest.java|(1999,198,<47,0>,<56,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputText.java|(10026,222,<396,0>,<403,39>)","            return null;
        }

        return (IntervalMonthData) ((IntervalType) type).newInterval(s);
    }

    protected IntervalSecondData readDaySecondInterval(Type type)
    throws IOException, HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/preprocessor/Token.java|(3153,133,<86,0>,<92,5>)","                return true;
            }
            default : {
                return false;
            }
        }
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Parser.java|(106759,139,<3712,0>,<3719,9>)","            if (tokenType == Token.COMMA) {
                read();

                continue;
            }

            break;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(16379,444,<516,0>,<544,24>)","        }
    }

    /**
     * Method declaration
     *
     *
     * @param k
     */
    public void keyPressed(KeyEvent k) {}

    /**
     * Method declaration
     *
     *
     * @param k
     */
    public void keyReleased(KeyEvent k) {}

    /**
     * Method declaration
     *
     *
     * @param k
     */
    public void keyTyped(KeyEvent k) {

        if (k.getKeyChar() == '\n' && k.isControlDown()) {
            k.consume();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestDatabaseMetaData.java|(1599,185,<31,0>,<37,34>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(5552,158,<174,0>,<180,1>)","        failures = result.failures();

        while (failures.hasMoreElements()) {
            System.out.println(failures.nextElement());
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(2710,233,<79,0>,<89,35>)","    }

    public boolean containsKey(Object key) {
        return super.containsKey(key);
    }

    public boolean containsValue(Object value) {
        return super.containsValue(value);
    }

    public void putAll(HashMap t) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(1654,165,<34,0>,<39,24>)","import org.hsqldb.Expression;
import org.hsqldb.HsqlException;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(3816,283,<131,0>,<143,33>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {

            int oldSize = size();
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcClobTest.java|(2110,165,<51,0>,<58,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(20307,171,<617,0>,<627,5>)","        }
    }

    public String convertToSQLString(Object a) {

        if (a == null) {
            return ""NULL"";
        }

        return convertToString(a);
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/ScaledRAFileInJar.java|(3518,196,<103,0>,<109,9>)","        if (readLength <= 0) {
            throw new IOException(""read beyond end of file"");
        }

        if (readLength > buffer.length) {
            readLength = buffer.length;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBase.java|(3320,190,<99,0>,<105,31>)","        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(this + "".setUp() error: "" + e.getMessage());
        }
    }

    protected void tearDown() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(2275,180,<65,0>,<75,29>)","    }

    public int getSQLGenericTypeNumber() {
        return type;
    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }

    public String getName() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/SchemaManager.java|(19783,396,<634,0>,<649,9>)","            Table      t = c.getMain();

            if (t != table) {
                tableSet.add(t);
            }

            t = c.getRef();

            if (t != table) {
                tableSet.add(t);
            }

            constraintNameSet.add(c.getMainName());
            constraintNameSet.add(c.getRefName());
            indexNameSet.add(c.getRefIndex().getName());
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcNClobTest.java|(6401,303,<203,0>,<215,5>)","            result.flush();

            assertEquals(1L, clob.length());

            result.close();

            assertEquals(4L, clob.length());

            assertEquals(""Task"", clob.getSubString(1, 4));
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(18153,258,<593,0>,<599,44>)","        } else if (s.equals(""Refresh Tree"")) {
            refreshTree();
        } else if (s.startsWith(""#"")) {
            int i = Integer.parseInt(s.substring(1));

            txtCommand.setText(sRecent[i]);
        } else if (s.equals(""Connect..."")) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(11765,147,<403,0>,<410,9>)","        }
    }

    public Object convertToDefaultType(Object a) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(16940,212,<529,0>,<534,29>)","        } else if (s.equals(""Commit"")) {
            try {
                cConn.commit();
            } catch (SQLException e) {}
        } else if (s.equals(""Insert test data"")) {
            insertTestData();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(4572,248,<170,0>,<180,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobInputStream.java|(3646,229,<117,0>,<125,31>)","            throw Trace.error(Trace.BLOB_STREAM_IS_CLOSED);
        }
    }

    private void readIntoBuffer() throws HsqlException {

        long readLength = availableLength - currentPosition;

        if (readLength <= 0) {}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ClosableCharArrayWriter.java|(13409,500,<381,0>,<398,5>)","    }

    /**
     * Converts this writer's accumulated data into a string.
     *
     * @return String constructed from this writer's accumulated data
     * @throws RuntimeException may be thrown if this writer has been
     *      {@link #free() freed}.
     */
    public synchronized String toString() {
        try {
            checkFreed();
        } catch (IOException ex) {
            throw new RuntimeException(ex.toString());
        }

        return new String(buf, 0, count);
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/preprocessor/Document.java|(1735,181,<35,0>,<40,33>)","import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/store/BaseHashMap.java|(33837,104,<1159,0>,<1165,5>)","                    return true;
                }
            }
        }

        return false;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(18947,150,<573,0>,<580,9>)","        }
    }

    public Object convertToDefaultType(Object a) throws HsqlException {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobDataMemory.java|(5184,159,<174,0>,<184,37>)","    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public int getStreamBlockSize() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/SQLFunction.java|(51132,198,<1405,0>,<1411,5>)","                break;

            default :
                throw Trace.runtimeError(Trace.UNSUPPORTED_INTERNAL_OPERATION,
                                         ""SQLFunction"");
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(8551,185,<307,0>,<314,36>)","        }

        switch (otherType.type) {

            case Types.SQL_CLOB :
                a = a.toString();
            case Types.SQL_CHAR :
            case Types.SQL_VARCHAR :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(15386,196,<483,0>,<491,31>)","            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCascade.java|(2353,190,<68,0>,<74,31>)","        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(this + "".setUp() error: "" + e.getMessage());
        }
    }

    protected void tearDown() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(15986,196,<500,0>,<508,31>)","            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongDeque.java|(6133,336,<249,0>,<260,41>)","        for (int i = 0; i < list.length; i++) {
            newList[i] = list[i];
        }

        list    = newList;
        newList = null;

        if (endindex <= firstindex) {
            int tail = firstindex + elementCount - endindex;

            for (int i = 0; i < endindex; i++) {
                list[tail + i] = list[i];
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(63882,101,<1569,0>,<1576,5>)","                }
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Grid.java|(3459,229,<72,0>,<80,28>)","import java.awt.Dimension;
import java.awt.Event;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Panel;
import java.awt.Scrollbar;
import java.awt.SystemColor;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Expression.java|(16301,185,<475,0>,<481,5>)","                break;

            default :
                Trace.runtimeError(Trace.UNSUPPORTED_INTERNAL_OPERATION,
                                   ""Expression"");
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/TransferDb.java|(6620,270,<223,0>,<232,13>)","                if (iMaxRows != 0 && i == iMaxRows) {
                    break;
                }

                i++;

                if (iMaxRows != 0 || i % 100 == 0) {
                    tracer.trace(""Transfered "" + i + "" rows"");
                }
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(142492,4645,<3412,0>,<3516,5>)","    }

    //----------------------------- JDBC 4.0 -----------------------------------
// --------------------------- Added: Mustang Build 81 -------------------------
    boolean poolable = false;

    /**
     * Requests that a <code>Statement</code> be pooled or not pooled.  The value
     * specified is a hint to the statement pool implementation indicating
     * whether the applicaiton wants the statement to be pooled.  It is up to
     * the statement pool manager as to whether the hint is used.
     * <p>
     * The poolable value of a statement is applicable to both internal
     * statement caches implemented by the driver and external statement caches
     * implemented by application servers and other applications.
     * <p>
     * By default, a <code>Statement</code> is not poolable when created, and
     * a <code>PreparedStatement</code> and <code>CallableStatement</code>
     * are poolable when created.
     * <p>
     * @param poolable          requests that the statement be pooled if true and
     *                                          that the statement not be pooled if false
     * <p>
     * @throws SQLException if this method is called on a closed
     * <code>Statement</code>
     * <p>
     * @since JDK 1.6 Build 81, HSQLDB 1.8.x
     */
    public void setPoolable(boolean poolable) throws SQLException {

        checkClosed();

        this.poolable = poolable;
    }

    /**
     * Returns a  value indicating whether the <code>Statement</code>
     * is poolable or not.
     * <p>
     * @return          <code>true</code> if the <code>Statement</code>
     * is poolable; <code>false</code> otherwise
     * @throws SQLException if this method is called on a closed
     * <code>Statement</code>
     * <p>
     * @since JDK 1.6 Build 81, HSQLDB 1.8.x
     * <p>
     * @see #setPoolable(boolean) setPoolable(boolean)
     */
    public boolean isPoolable() throws SQLException {

        checkClosed();

        return this.poolable;
    }

    // ------------------- java.sql.Wrapper implementation ---------------------

    /**
     * Returns an object that implements the given interface to allow access to
     * non-standard methods, or standard methods not exposed by the proxy.
     *
     * If the receiver implements the interface then the result is the receiver
     * or a proxy for the receiver. If the receiver is a wrapper
     * and the wrapped object implements the interface then the result is the
     * wrapped object or a proxy for the wrapped object. Otherwise return the
     * the result of calling <code>unwrap</code> recursively on the wrapped object
     * or a proxy for that result. If the receiver is not a
     * wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
     *
     * @param iface A Class defining an interface that the result must implement.
     * @return an object that implements the interface. May be a proxy for the actual implementing object.
     * @throws java.sql.SQLException If no object found that implements the interface
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4

    public <T> T unwrap(Class<T> iface) throws java.sql.SQLException {
        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ClosableByteArrayOutputStream.java|(10805,893,<301,0>,<332,5>)","        checkFreed();

        return copyOf(buf, count);
    }

    /**
     * Returns the current size of this stream's accumated data.
     *
     * @return the value of the <tt>count</tt> field, which is the number
     *      of valid bytes in this output stream.
     * @see #count
     * @throws java.io.IOException never
     */
    public synchronized int size() throws IOException {
        return count;
    }

    /**
     * Sets the size of this stream's accumulated data. <p>
     *
     * @param   newSize the new size
     * @throws  ArrayIndexOutOfBoundsException if new size is negative
     */
    public synchronized void setSize(int newSize) {
        if (newSize < 0) {
            throw new ArrayIndexOutOfBoundsException(newSize);
        } else if (newSize > buf.length) {
	    buf = copyOf(buf, Math.max(buf.length << 1, newSize));
	}

        count = newSize;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(5667,217,<175,0>,<187,9>)","    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HsqlArrayHeap.java|(7983,150,<291,0>,<299,5>)","                sb.append(',');
                sb.append(' ');
            }
        }

        sb.append(']');

        return sb.toString();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputTextLog.java|(9740,209,<382,0>,<390,73>)","            return null;
        }

        data = StringConverter.hexToByteArray(s);

        return new JavaObjectData(data);
    }

    protected BinaryData readBinary() throws IOException, HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Library.java|(6367,186,<139,0>,<145,12>)","        }, {
            ""COS"", ""java.lang.Math.cos""
        }, {
            ""COT"", ""org.hsqldb.Library.cot""
        }, {
            ""DEGREES"", ""java.lang.Math.toDegrees""
        }, {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(3213,233,<109,0>,<116,70>)","    }

    public Object convertToTypeLimits(Object a) throws HsqlException {
        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBug785429.java|(4994,158,<156,0>,<162,1>)","        failures = result.failures();

        while (failures.hasMoreElements()) {
            System.out.println(failures.nextElement());
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(11798,463,<274,0>,<281,30>)","        + ""Copyright (c) 1995-2000, The Hypersonic SQL Group.\n""
        + ""Copyright (c) 2001-2007, The HSQL Development Group.\n""
        + ""http://hsqldb.org  (User Guide available at this site).\n\n\n""
        + ""You may use and redistribute according to the HSQLDB\n""
        + ""license documented in the source code and at the web\n""
        + ""site above.""
        + (TT_AVAILABLE ? ""\n\nTransferTool options are available.""
                        : """");
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(3960,248,<141,0>,<151,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(2861,239,<86,0>,<99,5>)","    }

    public int getOrderedMatchCount(int[] array) {

        int i = 0;

        for (; i < array.length; i++) {
            if (!super.containsKey(array[i])) {
                break;
            }
        }

        return i;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ConnectionDialog.java|(8355,105,<274,0>,<280,5>)","        } else {
            setLocation(0, 0);
            setSize(d);
        }

        show();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(1599,162,<31,0>,<37,24>)","package org.hsqldb.types;

import org.hsqldb.HsqlException;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(48074,388,<1285,0>,<1292,55>)","        } else if (s.equals(""SELECT"")) {
            showHelp(DatabaseManagerCommon.selectHelp);
        } else if (s.equals(""INSERT"")) {
            showHelp(DatabaseManagerCommon.insertHelp);
        } else if (s.equals(""UPDATE"")) {
            showHelp(DatabaseManagerCommon.updateHelp);
        } else if (s.equals(""DELETE"")) {
            showHelp(DatabaseManagerCommon.deleteHelp);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(3991,134,<114,0>,<122,23>)","    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }

    public String getName() {

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSubselect.java|(2898,439,<73,0>,<84,45>)","        super(s);
    }

    //------------------------------------------------------------
    // Class methods
    //------------------------------------------------------------
    protected static Connection getJDBCConnection() throws SQLException {
        return DriverManager.getConnection(databaseURL, databaseUser,
                                           databasePassword);
    }

    protected void setUp() throws Exception {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcSQLXMLTest.java|(1656,212,<32,0>,<38,28>)","import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.StringReader;"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(6454,224,<228,0>,<242,9>)","    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcColumnMetaData.java|(4666,150,<148,0>,<156,5>)","                sb.append(',');
                sb.append(' ');
            }
        }

        sb.append(']');

        return sb.toString();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestDatabaseMetaData.java|(2033,208,<48,0>,<57,13>)","        super(name);
    }

    public void test() throws Exception {

        Connection        conn = newConnection();
        PreparedStatement pstmt;
        int               updateCount;

        try {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcClobTest.java|(2084,234,<50,0>,<61,32>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(10779,245,<352,0>,<363,34>)","        }
        
        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public Object convertToDefaultType(Object a) throws HsqlException {

        if (a == null) {
            return a;
        }

        if (a instanceof byte[]) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDriverTest.java|(1956,198,<45,0>,<54,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongDeque.java|(5335,670,<211,0>,<244,9>)","            endindex--;

            if (endindex == 0) {
                endindex = list.length;
            }
        }

        if (elementCount == 0) {
            firstindex = endindex = 0;
        }

        return value;
    }

    private int getInternalIndex(int i) throws IndexOutOfBoundsException {

        if (i < 0 || i >= elementCount) {
            throw new IndexOutOfBoundsException();
        }

        int index = firstindex + i;

        if (index >= list.length) {
            index -= list.length;
        }

        return index;
    }

    private void resetCapacity() {

        if (elementCount < list.length) {
            return;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(14491,286,<467,0>,<474,36>)","            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
            case Types.SQL_REAL :
            case Types.SQL_FLOAT :
            case Types.SQL_DOUBLE :
            case Types.SQL_NUMERIC :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(28665,398,<991,0>,<1003,48>)","        try {
            ResultSetMetaData m   = r.getMetaData();
            int               col = m.getColumnCount();
            String[]          h   = new String[col];

            for (int i = 1; i <= col; i++) {
                h[i - 1] = m.getColumnLabel(i);
            }

            gResult.setHead(h);

            while (r.next()) {
                for (int i = 1; i <= col; i++) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(14768,196,<464,0>,<472,31>)","            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/JdbcSuite.java|(1960,250,<46,0>,<58,5>)","        super(testName);
    }

    // inherit javadocs
    protected void setUp() throws Exception {
        super.setUp();
    }


    // inherit javadocs
    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(2968,224,<99,0>,<113,9>)","    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputText.java|(9357,174,<360,0>,<367,39>)","            return null;
        }

        return HsqlDateTime.dateValue(s);
    }

    protected Timestamp readTimestamp(Type type)
    throws IOException, HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/DataFileCache.java|(12213,183,<359,0>,<364,5>)","            throw Trace.error(Trace.FILE_IO_ERROR, Trace.DataFileCache_close,
                              new Object[] {
                e, fileName
            });
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(3527,195,<125,0>,<132,9>)","    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(3102,139,<98,0>,<107,5>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ConnectionDialog.java|(5609,337,<173,0>,<179,17>)","                if (setting != null) {
                    mName.setText(setting.getName());
                    mDriver.setText(setting.getDriver());
                    mURL.setText(setting.getUrl());
                    mUser.setText(setting.getUser());
                    mPassword.setText(setting.getPassword());
                }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java|(36040,2741,<887,0>,<938,5>)","    }

    //----------------------------- JDBC 4.0 -----------------------------------
    // ------------------- java.sql.Wrapper implementation ---------------------

    /**
     * Returns an object that implements the given interface to allow access to
     * non-standard methods, or standard methods not exposed by the proxy.
     *
     * If the receiver implements the interface then the result is the receiver
     * or a proxy for the receiver. If the receiver is a wrapper
     * and the wrapped object implements the interface then the result is the
     * wrapped object or a proxy for the wrapped object. Otherwise return the
     * the result of calling <code>unwrap</code> recursively on the wrapped object
     * or a proxy for that result. If the receiver is not a
     * wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
     *
     * @param iface A Class defining an interface that the result must implement.
     * @return an object that implements the interface. May be a proxy for the actual implementing object.
     * @throws java.sql.SQLException If no object found that implements the interface
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public <T> T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {
        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NullType.java|(2115,180,<57,0>,<67,29>)","    }

    public int getSQLGenericTypeNumber() {
        return type;
    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }

    public String getName() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputText.java|(1599,199,<31,0>,<39,32>)","package org.hsqldb.rowio;

import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;

import org.hsqldb.HsqlDateTime;
import org.hsqldb.HsqlException;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(45052,114,<1188,0>,<1196,5>)","            }

            t.insertSys(row);
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(3406,471,<116,0>,<143,36>)","        int oldSize = size();

        super.addOrRemove(key, 0, null, null, true);

        return oldSize != size();
    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(17198,1746,<536,0>,<573,53>)","        } else if (s.equals(""Rollback"")) {
            try {
                cConn.rollback();
            } catch (SQLException e) {}
        } else if (s.equals(""Disable MaxRows"")) {
            try {
                sStatement.setMaxRows(0);
            } catch (SQLException e) {}
        } else if (s.equals(""Set MaxRows to 100"")) {
            try {
                sStatement.setMaxRows(100);
            } catch (SQLException e) {}
        } else if (s.equals(""SELECT"")) {
            showHelp(DatabaseManagerCommon.selectHelp);
        } else if (s.equals(""INSERT"")) {
            showHelp(DatabaseManagerCommon.insertHelp);
        } else if (s.equals(""UPDATE"")) {
            showHelp(DatabaseManagerCommon.updateHelp);
        } else if (s.equals(""DELETE"")) {
            showHelp(DatabaseManagerCommon.deleteHelp);
        } else if (s.equals(""CREATE TABLE"")) {
            showHelp(DatabaseManagerCommon.createTableHelp);
        } else if (s.equals(""DROP TABLE"")) {
            showHelp(DatabaseManagerCommon.dropTableHelp);
        } else if (s.equals(""CREATE INDEX"")) {
            showHelp(DatabaseManagerCommon.createIndexHelp);
        } else if (s.equals(""DROP INDEX"")) {
            showHelp(DatabaseManagerCommon.dropIndexHelp);
        } else if (s.equals(""CHECKPOINT"")) {
            showHelp(DatabaseManagerCommon.checkpointHelp);
        } else if (s.equals(""SCRIPT"")) {
            showHelp(DatabaseManagerCommon.scriptHelp);
        } else if (s.equals(""SHUTDOWN"")) {
            showHelp(DatabaseManagerCommon.shutdownHelp);
        } else if (s.equals(""SET"")) {
            showHelp(DatabaseManagerCommon.setHelp);
        } else if (s.equals(""Test Script"")) {
            showHelp(DatabaseManagerCommon.testHelp);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(20966,490,<645,0>,<654,44>)","            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(18555,389,<566,0>,<573,53>)","        } else if (s.equals(""SCRIPT"")) {
            showHelp(DatabaseManagerCommon.scriptHelp);
        } else if (s.equals(""SHUTDOWN"")) {
            showHelp(DatabaseManagerCommon.shutdownHelp);
        } else if (s.equals(""SET"")) {
            showHelp(DatabaseManagerCommon.setHelp);
        } else if (s.equals(""Test Script"")) {
            showHelp(DatabaseManagerCommon.testHelp);
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcSavepointTest.java|(2009,198,<47,0>,<56,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(1626,174,<33,0>,<38,38>)","import org.hsqldb.HsqlException;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
import org.hsqldb.lib.StringConverter;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcDatabaseMetaData.java|(256131,1435,<5979,0>,<6006,5>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.9
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcClobTest.java|(7051,253,<228,0>,<237,35>)","        } catch (Exception e) {
            fail(e.getMessage());
        }
    }

    /**
     * Test of free method, of class org.hsqldb.jdbc.jdbcClob.
     */
    public void testFree() throws Exception {
        System.out.println(""free"");"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(4140,186,<116,0>,<127,23>)","        }
    }

    public int getJDBCTypeNumber() {

        // no JDBC number is available
        return type;
    }

    public String getJDBCClassName() {

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/SQLFunction.java|(19158,198,<482,0>,<488,5>)","                break;

            default :
                throw Trace.runtimeError(Trace.UNSUPPORTED_INTERNAL_OPERATION,
                                         ""SQLFunction"");
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(3091,416,<106,0>,<120,9>)","        return (aId > bId) ? 1
                           : (bId > aId ? -1
                                        : 0);
    }

    public Object convertToTypeLimits(Object a) throws HsqlException {
        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcStatementTest.java|(3788,181,<110,0>,<117,5>)","        } catch (SQLException ex) {
            //ex.printStackTrace();
        }   
        
        if (sb.length() > 0) {
            fail(sb.toString());
        }
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(28063,190,<815,0>,<820,5>)","            }
            default :
                throw Trace.runtimeError(Trace.UNSUPPORTED_INTERNAL_OPERATION,
                                         ""CharacterType"");
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(1715,235,<37,0>,<44,33>)","import org.hsqldb.HsqlException;
import org.hsqldb.Library;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
import org.hsqldb.lib.StringConverter;
import org.hsqldb.lib.StringUtil;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(14522,442,<459,0>,<472,31>)","        } else if (s.equals(""Open Script..."")) {
            FileDialog f = new FileDialog(fMain, ""Open Script"",
                                          FileDialog.LOAD);

            // (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(29333,170,<907,0>,<916,5>)","        }
    }

    public String convertToSQLString(Object a) {
        if (a == null) {
            return ""NULL"";
        }

        return convertToString(a);
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDatabaseMetaDataTest.java|(4516,198,<119,0>,<128,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCacheSize.java|(17725,306,<536,0>,<542,68>)","                    slow = true;
                }

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println(""Select "" + (i + 1) + "" : ""
                                       + sw.elapsedTime() + "" rps: ""
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(7385,163,<241,0>,<252,27>)","        }

        if (c == null) {
            return;
        }

        m.connect(c);
    }

    private static void showUsage() {

        System.out.println(
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(2826,116,<91,0>,<97,9>)","        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(26985,327,<908,0>,<920,13>)","            int r = sStatement.getUpdateCount();

            if (r == -1) {
                formatResultSet(sStatement.getResultSet());
            } else {
                g[0] = ""update count"";

                gResult.setHead(g);

                g[0] = String.valueOf(r);

                gResult.addRow(g);
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(20997,329,<676,0>,<687,31>)","                                          FileDialog.SAVE);

            // (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(3085,139,<99,0>,<108,5>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(145700,1356,<3489,0>,<3514,88>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/OracleTransferHelper.java|(5506,275,<156,0>,<166,54>)","        }

        String CompareString = ""nextval(\'\"""" + SeqName + ""\""\'"";

        if (columnType.indexOf(CompareString) >= 0) {

            // We just found a increment
            columnType = ""SERIAL"";
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(2210,214,<55,0>,<61,34>)","import java.awt.Panel;
import java.awt.TextArea;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/ScaledRAFile.java|(7946,185,<217,0>,<224,54>)","        seekPosition = position;
    }

    public long getFilePointer() throws IOException {
        return seekPosition;
    }

    private void readIntoBuffer() throws IOException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(4967,314,<153,0>,<163,34>)","    }

    /* Runs TestINPredicate test from the command line*/
    public static void main(String[] args) throws Exception {

        TestResult            result;
        TestCase              test;
        java.util.Enumeration failures;
        int                   count;

        result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/DoubleIntIndex.java|(15998,84,<678,0>,<684,1>)","                return true;
            }
        }

        return false;
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(3291,216,<112,0>,<120,9>)","        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(2373,149,<63,0>,<71,5>)","    }

    public int getSQLGenericTypeNumber() {
        return type;
    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(57717,234,<1628,0>,<1635,35>)","            int r = sStatement.getUpdateCount();

            if (r == -1) {
                formatResultSet(sStatement.getResultSet());
            } else {
                g[0] = ""update count"";

                gResult.setHead(g);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(3121,139,<95,0>,<104,5>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/TableWorks.java|(32805,395,<930,0>,<938,44>)","                    case Types.TINYINT :
                    case Types.SQL_SMALLINT :
                    case Types.SQL_INTEGER :
                    case Types.SQL_BIGINT :
                    case Types.SQL_REAL :
                    case Types.SQL_FLOAT :
                    case Types.SQL_DOUBLE :
                    case Types.SQL_NUMERIC :
                    case Types.SQL_DECIMAL :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataMemory.java|(3991,120,<136,0>,<144,5>)","    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(56580,101,<1467,0>,<1474,5>)","                }
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/scriptio/ScriptReaderBase.java|(1599,206,<31,0>,<39,24>)","package org.hsqldb.scriptio;

import java.io.IOException;

import org.hsqldb.Database;
import org.hsqldb.HsqlException;
import org.hsqldb.NumberSequence;
import org.hsqldb.Session;
import org.hsqldb.Table;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputText.java|(8954,260,<333,0>,<343,53>)","    }

    protected void writeBinary(BinaryData o) {
        writeByteArray(o.getBytes());
    }

    protected void writeClob(ClobData o, Type type) {
        writeString(type.convertToString(o));
    }

    protected void writeBlob(BlobData o, Type type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(4544,290,<169,0>,<180,41>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/OrderedHashSet.java|(3381,164,<119,0>,<126,5>)","        checkRange(index);

        return objectKeyTable[index];
    }

    public int getIndex(Object key) {
        return getLookup(key, key.hashCode());
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDriverTest.java|(1956,234,<45,0>,<56,32>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSql.java|(1625,216,<33,0>,<39,26>)","import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(4649,150,<158,0>,<165,9>)","        }
    }

    public Object convertToDefaultType(Object a) throws HsqlException {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(93088,101,<2347,0>,<2354,5>)","                }
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntValueHashMap.java|(4740,283,<175,0>,<187,33>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {

            int oldSize = size();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(3789,248,<135,0>,<145,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(4544,451,<169,0>,<188,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(68420,4616,<1669,0>,<1774,5>)","    }

// --------------------------- Added: Mustang Build 81 -------------------------
    boolean poolable = false;

    /**
     * Requests that a <code>Statement</code> be pooled or not pooled.  The value
     * specified is a hint to the statement pool implementation indicating
     * whether the applicaiton wants the statement to be pooled.  It is up to
     * the statement pool manager as to whether the hint is used.
     * <p>
     * The poolable value of a statement is applicable to both internal
     * statement caches implemented by the driver and external statement caches
     * implemented by application servers and other applications.
     * <p>
     * By default, a <code>Statement</code> is not poolable when created, and
     * a <code>PreparedStatement</code> and <code>CallableStatement</code>
     * are poolable when created.
     * <p>
     * @param poolable          requests that the statement be pooled if true and
     *                                          that the statement not be pooled if false
     * <p>
     * @throws SQLException if this method is called on a closed
     * <code>Statement</code>
     * <p>
     * @since JDK 1.6 Build 81, HSQLDB 1.8.x
     */

//#ifdef JDBC4
    public void setPoolable(boolean poolable) throws SQLException {
        checkClosed();
        this.poolable = poolable;
    }

//#endif

    /**
     * Returns a  value indicating whether the <code>Statement</code>
     * is poolable or not.
     * <p>
     * @return          <code>true</code> if the <code>Statement</code>
     * is poolable; <code>false</code> otherwise
     * @throws SQLException if this method is called on a closed
     * <code>Statement</code>
     * <p>
     * @since JDK 1.6 Build 81, HSQLDB 1.8.x
     * <p>
     * @see #setPoolable(boolean) setPoolable(boolean)
     */
//#ifdef JDBC4
    public boolean isPoolable() throws SQLException {
        checkClosed();
        return this.poolable;
    }

//#endif JDBC4
    // ------------------- java.sql.Wrapper implementation ---------------------

    /**
     * Returns an object that implements the given interface to allow access to
     * non-standard methods, or standard methods not exposed by the proxy.
     *
     * If the receiver implements the interface then the result is the receiver
     * or a proxy for the receiver. If the receiver is a wrapper
     * and the wrapped object implements the interface then the result is the
     * wrapped object or a proxy for the wrapped object. Otherwise return the
     * the result of calling <code>unwrap</code> recursively on the wrapped object
     * or a proxy for that result. If the receiver is not a
     * wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
     *
     * @param iface A Class defining an interface that the result must implement.
     * @return an object that implements the interface. May be a proxy for the actual implementing object.
     * @throws java.sql.SQLException If no object found that implements the interface
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4

    public <T> T unwrap(Class<T> iface) throws java.sql.SQLException {
        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(3030,416,<102,0>,<116,9>)","        return (aId > bId) ? 1
                           : (bId > aId ? -1
                                        : 0);
    }

    public Object convertToTypeLimits(Object a) throws HsqlException {
        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMerge.java|(1599,307,<31,0>,<42,34>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Enumeration;

import junit.framework.TestCase;
import junit.framework.TestResult;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DITypeInfo.java|(5370,248,<158,0>,<164,37>)","            case Types.SQL_CHAR :
            case Types.SQL_NCHAR :
            case Types.SQL_CLOB :
            case Types.NCLOB :
            case Types.SQL_VARBINARY :
            case Types.SQL_VARCHAR :
            case Types.SQL_NVARCHAR :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/DataFileCache.java|(16795,213,<521,0>,<528,9>)","    }

    public synchronized CachedObject get(int i, PersistentStore store,
                                         boolean keep) throws HsqlException {

        if (i < 0) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputText.java|(11600,172,<473,0>,<481,9>)","    }

    protected ClobData readClob() throws IOException, HsqlException {

        String s = readString();

        if (s == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(49298,389,<1312,0>,<1319,53>)","        } else if (s.equals(""SCRIPT"")) {
            showHelp(DatabaseManagerCommon.scriptHelp);
        } else if (s.equals(""SHUTDOWN"")) {
            showHelp(DatabaseManagerCommon.shutdownHelp);
        } else if (s.equals(""SET"")) {
            showHelp(DatabaseManagerCommon.setHelp);
        } else if (s.equals(""Test Script"")) {
            showHelp(DatabaseManagerCommon.testHelp);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(4252,248,<157,0>,<167,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/RangeVariable.java|(8887,185,<301,0>,<307,5>)","                break;

            default :
                Trace.runtimeError(Trace.UNSUPPORTED_INTERNAL_OPERATION,
                                   ""Expression"");
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(48537,424,<1295,0>,<1302,58>)","        } else if (s.equals(""CREATE TABLE"")) {
            showHelp(DatabaseManagerCommon.createTableHelp);
        } else if (s.equals(""DROP TABLE"")) {
            showHelp(DatabaseManagerCommon.dropTableHelp);
        } else if (s.equals(""CREATE INDEX"")) {
            showHelp(DatabaseManagerCommon.createIndexHelp);
        } else if (s.equals(""DROP INDEX"")) {
            showHelp(DatabaseManagerCommon.dropIndexHelp);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/TableWorks.java|(32805,350,<930,0>,<937,44>)","                    case Types.TINYINT :
                    case Types.SQL_SMALLINT :
                    case Types.SQL_INTEGER :
                    case Types.SQL_BIGINT :
                    case Types.SQL_REAL :
                    case Types.SQL_FLOAT :
                    case Types.SQL_DOUBLE :
                    case Types.SQL_NUMERIC :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(126493,114,<3058,0>,<3066,5>)","            }

            t.insertSys(row);
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(145735,1402,<3490,0>,<3516,5>)","            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(15317,198,<479,0>,<488,9>)","        } else {
            throw Trace.error(Trace.INVALID_CONVERSION);
        }
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(22592,191,<740,0>,<747,9>)","    }

    public Object concat(Session session, Object a,
                         Object b) throws HsqlException {

        if (a == null || b == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetTest.java|(49815,311,<1849,0>,<1861,41>)","        {
            return;
        }          

        // TODO.
        fail(""TODO: The test case is empty."");
    }

    /**
     * Test of getNString method, of interface java.sql.ResultSet.
     */
    public void testGetNString() throws Exception {
        System.out.println(""getNString"");"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/Type.java|(18207,490,<543,0>,<552,44>)","            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(3709,238,<127,0>,<136,34>)","    }

    public Object convertToDefaultType(Object a) throws HsqlException {

        if (a == null) {
            return a;
        }

        // conversion to Clob via PreparedStatement.setObject();
        if (a instanceof String) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(2083,287,<51,0>,<60,29>)","        super(name);
    }

    /* Implements the TestINPredicate test */
    public void test() throws Exception {

        Connection        conn = newConnection();
        Statement         stmt = conn.createStatement();
        PreparedStatement pstmt;
        ResultSet         rs;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(42449,1198,<1250,0>,<1286,28>)","        }

        for (; currentPart <= lastPart; i++) {
            boolean endOfPart = false;

            if (i > s.length()) {
                break;
            } else if (i == s.length()) {
                if (currentPart == lastPart) {
                    endOfPart = true;
                } else if (currentPart == FRACTION_PART_INDEX - 1) {
                    endOfPart = true;
                } else {

                    // parts missing
                    throw Trace.error(Trace.UNEXPECTED_TOKEN);
                }
            } else {
                int character = s.charAt(i);

                if (character >= '0' && character <= '9') {
                    int digit = character - '0';

                    currentValue *= 10;
                    currentValue += digit;

                    currentDigits++;
                } else if (character == separators[currentPart]) {
                    endOfPart = true;
                } else if (character == ' ' && currentPart == lastPart) {
                    endOfPart = true;
                } else {
                    throw Trace.error(Trace.UNEXPECTED_TOKEN);
                }
            }

            if (endOfPart) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(9302,344,<292,0>,<302,70>)","        imgEmpty = createImage(new MemoryImageSource(2, 2, new int[4 * 4], 2,
                2));

        fMain.setIconImage(imgEmpty);
        fMain.addWindowListener(this);

        MenuBar bar = new MenuBar();

        // no shortcuts used
        String[] fitems = {
            ""-Connect..."", ""--"", ""-Open Script..."", ""-Save Script..."",
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(21130,196,<679,0>,<687,31>)","            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ClosableCharArrayWriter.java|(11600,959,<327,0>,<358,5>)","        checkFreed();

        return copyOf(buf, count);
    }

    /**
     * Returns the current size of this writer's accumulated character data.
     *
     * @return the value of the <tt>count</tt> field, which is the number
     *      of valid characters accumulated in this writer.
     * @see #count
     * @throws java.io.IOException never
     */
    public synchronized int size() throws IOException {
        return count;
    }

    /**
     * Sets the size of this writer's accumulated character data. <p>
     *
     * @param   newSize the new size of this writer's accumulated data
     * @throws  ArrayIndexOutOfBoundsException if new size is negative
     */
    public synchronized void setSize(int newSize) {
        if (newSize < 0) {
            throw new ArrayIndexOutOfBoundsException(newSize);
        } else if (newSize > buf.length) {
	    buf = copyOf(buf, Math.max(buf.length << 1, newSize));
	}

        count = newSize;
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcNClobTest.java|(7034,254,<228,0>,<237,35>)","        } catch (Exception e) {
            fail(e.getMessage());
        }
    }

    /**
     * Test of free method, of class org.hsqldb.jdbc.jdbcNClob.
     */
    public void testFree() throws Exception {
        System.out.println(""free"");"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(9491,241,<286,0>,<292,30>)","        try {
            if (autoConnect && urlidConnect) {
                throw new IllegalArgumentException(
                    ""You may not specify both (urlid) AND (url/user/password)."");
            }

            if (autoConnect) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetMetaDataTest.java|(11386,369,<307,0>,<317,31>)","               ""c_bigint"",
               ""c_binary"",
               ""c_boolean"",
               ""c_char"",                       // 5
               ""c_date"",
               ""c_decimal"",
               ""c_double"",
               ""c_float"",
               ""c_integer"",                    // 10
               ""c_longvarbinary"",
               ""c_longvarchar"","
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(42518,160,<1391,0>,<1398,13>)","                default :
                    end = true;
                    break;
            }

            if (end) {
                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(25194,571,<799,0>,<835,32>)","    }

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowActivated(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowDeactivated(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowClosed(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param ev
     */
    public void windowClosing(WindowEvent ev) {

        try {
            cConn.close();
        } catch (Exception e) {}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(10845,746,<328,0>,<339,5>)","            + ""where options include:\n""
            + ""    --driver <classname>  jdbc driver class\n""
            + ""    --url <name>          jdbc url\n""
            + ""    --user <name>         username used for connection\n""
            + ""    --password <password> password for this user\n""
            + ""    --urlid <urlid>       use url/user/password/driver in rc file\n""
            + ""    --rcfile <file>       (defaults to 'dbmanager.rc' in home dir)\n""
            + ""    --dir <path>          default directory\n""
            + ""    --script <file>       reads from script file\n""
            + ""    --noexit              do not call system.exit()\n""
            + ""(Single-hypen switches like '-driver' are also supported)"");
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(29233,166,<1009,0>,<1016,22>)","                        }
                    } catch (SQLException e) {}
                }

                gResult.addRow(h);
            }

            r.close();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/LegacyFunction.java|(4552,198,<135,0>,<141,5>)","                break;

            default :
                throw Trace.runtimeError(Trace.UNSUPPORTED_INTERNAL_OPERATION,
                                         ""SQLFunction"");
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(32961,229,<1165,0>,<1174,29>)","                if (l > size[j]) {
                    size[j] = l;
                }
            }
        }

        StringBuffer b = new StringBuffer();

        for (int i = 0; i < width; i++) {
            b.append(col[i]);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(34100,176,<1219,0>,<1225,39>)","        for (int i = 0; i < iMaxRecent; i++) {
            if (s.equals(sRecent[i])) {
                return;
            }
        }

        if (sRecent[iRecent] != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(6562,116,<236,0>,<242,9>)","        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(5183,332,<168,0>,<180,28>)","    }

    public Type getAggregateType(Type other) throws HsqlException {

        if (type == other.type) {
            return precision >= other.precision ? this
                                                : other;
        }

        switch (other.type) {

            case Types.SQL_ALL_TYPES :
                return this;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntValueHashMap.java|(3990,139,<141,0>,<150,5>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDataSourceFactoryTest.java|(3761,209,<98,0>,<108,1>)","        } catch (Exception ex) {
            fail(ex.getMessage());
        }
    }

    public static void main(java.lang.String[] argList) {

        junit.textui.TestRunner.run(suite());
    }

}"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Parser.java|(106759,145,<3712,0>,<3720,5>)","            if (tokenType == Token.COMMA) {
                read();

                continue;
            }

            break;
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDataSourceTest.java|(2059,198,<49,0>,<58,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestTimestamp.java|(1599,204,<31,0>,<38,26>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(3765,201,<129,0>,<138,9>)","        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public Object convertToDefaultType(Object a) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/TempDataFileCache.java|(4151,183,<126,0>,<131,5>)","            throw Trace.error(Trace.FILE_IO_ERROR, Trace.DataFileCache_close,
                              new Object[] {
                e, fileName
            });
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(2674,154,<76,0>,<83,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            return intValueTable[lookup];
        }

        return defaultValue;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(12320,355,<372,0>,<382,70>)","        imgEmpty = createImage(new MemoryImageSource(2, 2, new int[4 * 4], 2,
                2));

        fMain.setIconImage(imgEmpty);
        fMain.addWindowListener(this);

        MenuBar bar = new MenuBar();

        // used shortcuts: CERGTSIUDOLM
        String[] fitems = {
            ""-Connect..."", ""--"", ""-Open Script..."", ""-Save Script..."",
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/server/WebServer.java|(6520,469,<154,0>,<166,72>)","                return;
            }

            props.addProperties(stringProps);
        }

        ServerConfiguration.translateDefaultDatabaseProperty(props);

        // Standard behaviour when started from the command line
        // is to halt the VM when the server shuts down.  This may, of
        // course, be overridden by whatever, if any, security policy
        // is in place.
        ServerConfiguration.translateDefaultNoSystemExitProperty(props);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/PostgresTransferHelper.java|(3113,275,<87,0>,<97,54>)","        }

        String CompareString = ""nextval(\'\"""" + SeqName + ""\""\'"";

        if (columnType.indexOf(CompareString) >= 0) {

            // We just found a increment
            columnType = ""SERIAL"";
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(58307,362,<1650,0>,<1662,30>)","        } catch (SQLException e) {
            lTime = System.currentTimeMillis() - lTime;
            g[0]  = ""SQL Error"";

            gResult.setHead(g);

            String s = e.getMessage();

            s    += "" / Error Code: "" + e.getErrorCode();
            s    += "" / State: "" + e.getSQLState();
            g[0] = s;

            gResult.addRow(g);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(27360,362,<923,0>,<935,30>)","        } catch (SQLException e) {
            lTime = System.currentTimeMillis() - lTime;
            g[0]  = ""SQL Error"";

            gResult.setHead(g);

            String s = e.getMessage();

            s    += "" / Error Code: "" + e.getErrorCode();
            s    += "" / State: "" + e.getSQLState();
            g[0] = s;

            gResult.addRow(g);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobInputStream.java|(2438,650,<64,0>,<89,5>)","        this.availableLength = offset + length;
        this.currentPosition = offset;
    }

    public int read() throws IOException {

        if (currentPosition >= availableLength) {
            return -1;
        }

        if (buffer == null
                || currentPosition >= bufferOffset + buffer.length) {
            try {
                checkClosed();
                readIntoBuffer();
            } catch (HsqlException e) {
                throw new IOException(e.getMessage());
            }
        }

        int val = buffer[(int) (currentPosition - bufferOffset)] & 0xff;

        currentPosition++;

        return val;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobInputStream.java|(3928,229,<130,0>,<138,31>)","            throw Trace.error(Trace.BLOB_STREAM_IS_CLOSED);
        }
    }

    private void readIntoBuffer() throws HsqlException {

        long readLength = availableLength - currentPosition;

        if (readLength <= 0) {}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputTextLog.java|(9432,250,<369,0>,<378,20>)","            return null;
        }

        return s.equalsIgnoreCase(""TRUE"") ? Boolean.TRUE
                                          : Boolean.FALSE;
    }

    protected Object readOther() throws IOException, HsqlException {

        byte[] data;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongDeque.java|(3626,179,<124,0>,<130,9>)","        elementCount--;

        if (elementCount == 0) {
            firstindex = endindex = 0;
        } else if (endindex == 0) {
            endindex = list.length;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(144879,117,<3762,0>,<3769,5>)","                t.insertSys(row);
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(2657,285,<79,0>,<97,9>)","    }

    public boolean isLobType() {
        return true;
    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcCallableStatementTest.java|(2269,234,<56,0>,<67,32>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(4062,599,<149,0>,<175,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public Object get(Object key) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(5076,248,<192,0>,<202,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/OtherType.java|(1656,174,<35,0>,<40,38>)","import org.hsqldb.HsqlException;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
import org.hsqldb.lib.StringConverter;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Types.java|(30299,629,<867,0>,<879,44>)","            case Types.SQL_INTERVAL_YEAR :
            case Types.SQL_INTERVAL_YEAR_TO_MONTH :
            case Types.SQL_INTERVAL_MONTH :
            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcNClobTest.java|(5615,305,<172,0>,<185,5>)","            result.flush();

            assertEquals(1L, clob.length());

            result.close();

            assertEquals(4L, clob.length());

            assertEquals(""Task"", clob.getSubString(1, 4));
        } catch (Exception e) {
            fail(e.getMessage());
        }

    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(34483,255,<1237,0>,<1248,28>)","        item.setActionCommand(""#"" + iRecent);
        item.addActionListener(this);
        mRecent.insert(item, iRecent);

        iRecent = (iRecent + 1) % iMaxRecent;
    }

    /**
     * Method declaration
     *
     */
    private void initGUI() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(16235,191,<552,0>,<559,9>)","    }

    public Object concat(Session session, Object a,
                         Object b) throws HsqlException {

        if (a == null || b == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DITableInfo.java|(6348,206,<185,0>,<194,13>)","            case Types.SQL_TIME : {
                size = 8;

                break;
            }
            case Types.SQL_TIMESTAMP : {
                size = 12;

                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(50055,134,<1637,0>,<1643,13>)","                    end = true;
                    break;
            }

            if (end) {
                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCacheSize.java|(24706,323,<744,0>,<750,68>)","                ps.setInt(1, random);
                ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println(""Update "" + (i + 1) + "" : ""
                                       + sw.elapsedTime() + "" rps: ""
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusChoice.java|(3491,170,<113,0>,<118,5>)","        if (b) {
            super.setBackground(Color.white);
        } else {
            super.setBackground(Color.lightGray);
        }    // end of if (b)else
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(65935,430,<1931,0>,<1950,9>)","        txtResult.setText(b.toString());
    }

    private void addToRecent(String s) {

        for (int i = 0; i < iMaxRecent; i++) {
            if (s.equals(sRecent[i])) {
                return;
            }
        }

        if (sRecent[iRecent] != null) {
            mRecent.remove(iRecent);
        }

        sRecent[iRecent] = s;

        if (s.length() > 43) {
            s = s.substring(0, 40) + ""..."";
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSql.java|(25095,339,<686,0>,<700,45>)","    }

    protected void tearDown() {

        try {
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(""TestSql.tearDown() error: "" + e.getMessage());
        }
    }

    public static void main(String[] argv) {

        TestResult result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(4242,228,<150,0>,<161,5>)","    }

    public String convertToSQLString(Object a) {

        if (a == null) {
            return ""NULL"";
        }

        String s = convertToString(a);

        return StringConverter.toQuotedString(s, '\'', true);
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcDataSource.java|(10755,1402,<281,0>,<307,5>)","            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Tree.java|(4819,185,<133,0>,<142,5>)","        setLayout(null);

        sbHoriz = new Scrollbar(Scrollbar.HORIZONTAL);

        add(sbHoriz);

        sbVert = new Scrollbar(Scrollbar.VERTICAL);

        add(sbVert);
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(6454,249,<228,0>,<244,23>)","    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(16518,6084,<407,0>,<564,22>)","    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the number of seconds the driver will
     * wait for a <code>Statement</code> object to execute.
     * If the limit is exceeded, a
     * <code>SQLException</code> is thrown.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * To present, HSQLDB always returns zero, meaning there
     * is no limit.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return the current query timeout limit in seconds; zero means there is
     *         no limit
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #setQueryTimeout
     */
    public int getQueryTimeout() throws SQLException {

        checkClosed();

        return 0;
    }

    /**
     * <!-- start generic documentation -->
     * Sets the number of seconds the driver will wait for a
     * <code>Statement</code> object to execute to the given number of seconds.
     * If the limit is exceeded, an <code>SQLException</code> is thrown. A JDBC
     * (JDBC4 clarification:)
     * driver must apply this limit to the <code>execute</code>,
     * <code>executeQuery</code> and <code>executeUpdate</code> methods. JDBC driver
     * implementations may also apply this limit to <code>ResultSet</code> methods
     * (consult your driver vendor documentation for details).
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, calls to this method are ignored; HSQLDB waits an
     * unlimited amount of time for statement execution
     * requests to return.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param seconds the new query timeout limit in seconds; zero means
     *        there is no limit
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     *            or the condition seconds >= 0 is not satisfied
     * @see #getQueryTimeout
     */
    public void setQueryTimeout(int seconds) throws SQLException {

        checkClosed();

        if (seconds < 0) {
            throw Util.outOfRangeArgument();
        }
    }

    /**
     * <!-- start generic documentation -->
     * Cancels this <code>Statement</code> object if both the DBMS and
     * driver support aborting an SQL statement.
     * This method can be used by one thread to cancel a statement that
     * is being executed by another thread.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, HSQLDB does <i>not</i> support aborting an SQL
     * statement; calls to this method are ignored.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     */
    public void cancel() throws SQLException {
        checkClosed();
    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the first warning reported by calls on this <code>Statement</code> object.
     * Subsequent <code>Statement</code> object warnings will be chained to this
     * <code>SQLWarning</code> object.
     *
     * <p>The warning chain is automatically cleared each time
     * a statement is (re)executed. This method may not be called on a closed
     * <code>Statement</code> object; doing so will cause an <code>SQLException</code>
     * to be thrown.
     *
     * <P><B>Note:</B> If you are processing a <code>ResultSet</code> object, any
     * warnings associated with reads on that <code>ResultSet</code> object
     * will be chained on it rather than on the <code>Statement</code>
     * object that produced it.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, HSQLDB never produces Statement warnings;
     * this method always returns null.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return the first <code>SQLWarning</code> object or <code>null</code>
     *         if there are no warnings
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     */
    public SQLWarning getWarnings() throws SQLException {

        checkClosed();

        return null;
    }

    /**
     * <!-- start generic documentation -->
     * Clears all the warnings reported on this <code>Statement</code>
     * object. After a call to this method,
     * the method <code>getWarnings</code> will return
     * <code>null</code> until a new warning is reported for this
     * <code>Statement</code> object.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including HSQLDB 1.8.0.x, <code>SQLWarning</code> objects are
     * never produced for Statement Objects; calls to this method are
     * ignored.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     */
    public void clearWarnings() throws SQLException {
        checkClosed();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(38712,1095,<977,0>,<1010,5>)","    }

    /**
     * <!-- start generic documentation -->
     * Empties this <code>Statement</code> object's current list of
     * SQL commands.
     * <P>
     * (JDBC4 clarification:) <p>
     * <B>NOTE:</B>  Support of an ability to batch updates is optional.
     * <!-- start generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Starting with HSQLDB 1.7.2, this feature is supported.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @exception SQLException if a database access error occurs,
     *  this method is called on a closed <code>Statement</code> or the
     * driver does not support batch updates
     * @see #addBatch
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *   for jdbcStatement)
     */
    public void clearBatch() throws SQLException {

        checkClosed();

        if (batchResultOut != null) {
            batchResultOut.getNavigator().clear();
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(48000,117,<1178,0>,<1185,5>)","                t.insertSys(row);
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/pool/ManagedPoolDataSource.java|(19313,1518,<467,0>,<495,5>)","    public <T> T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {
        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(16321,205,<525,0>,<533,9>)","        }
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ClosableByteArrayOutputStream.java|(13844,1417,<394,0>,<445,21>)","    }

    /**
     * Closes this object for further writing. <p>
     *
     * Other operations may continue to succeed until after the first invocation
     * of {@link #free() free()}. <p>
     *
     * @throws java.io.IOException if an I/O error occurs (default: never)
     */
    public synchronized void close() throws IOException {
        closed = true;
    }

    /**
     * Retrieves whether this stream is closed. <p>
     * @return <tt>true</tt> if this stream is closed, else <tt>false</tt>
     */
    public synchronized boolean isClosed() {
        return closed;
    }

    /**
     * Closes this object and releases the underlying buffer for
     * garbage collection. <p>
     *
     * @throws java.io.IOException if an I/O error occurs while closing
     *      this stream (default: never).
     */
    public synchronized void free() throws IOException {
        closed = true;
        freed  = true;
        buf    = null;
        count  = 0;
    }

    /**
     * Retrieves whether this stream is freed. <p>
     *
     * @return <tt>true</tt> if this stream is freed; else <tt>false</tt>.
     */
    public synchronized boolean isFreed() {
        return freed;
    }

    /**
     * Tests whether this stream is closed. <p>
     *
     * @throws java.io.IOException if this stream is closed.
     */
    protected synchronized void checkClosed() throws IOException {
        if (closed) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(4321,238,<100,0>,<106,37>)","import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(4194,451,<156,0>,<175,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(22806,212,<733,0>,<738,29>)","        } else if (s.equals(""Commit"")) {
            try {
                cConn.commit();
            } catch (SQLException e) {}
        } else if (s.equals(""Insert test data"")) {
            insertTestData();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/SqlFile.java|(85054,304,<2288,0>,<2293,6>)","    private static final String[] oracleSysSchemas = {
        ""SYS"", ""SYSTEM"", ""OUTLN"", ""DBSNMP"", ""OUTLN"", ""MDSYS"", ""ORDSYS"",
        ""ORDPLUGINS"", ""CTXSYS"", ""DSSYS"", ""PERFSTAT"", ""WKPROXY"", ""WKSYS"",
        ""WMSYS"", ""XDB"", ""ANONYMOUS"", ""ODM"", ""ODM_MTR"", ""OLAPSYS"", ""TRACESVR"",
        ""REPADMIN""
    };
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobDataRemoteClient.java|(5663,168,<183,0>,<191,5>)","    }

    //---
    void checkClosed() throws HsqlException {

        if (isClosed()) {
            throw Trace.error(Trace.BLOB_IS_NO_LONGER_VALID);
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/CommandParser.java|(25350,306,<885,0>,<895,22>)","            case Token.INSERT :
                cs = compileInsertStatement();
                break;

            case Token.UPDATE :
                cs = compileUpdateStatement();
                break;

            case Token.MERGE :
                cs = compileMergeStatement();
                break;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntValueHashMap.java|(5330,164,<205,0>,<212,5>)","        Iterator it = t.keySet().iterator();

        while (it.hasNext()) {
            Object key = it.next();

            put(key, t.get(key));
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(3248,198,<109,0>,<116,9>)","    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(8356,240,<299,0>,<309,33>)","        }
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return a;
        }

        switch (otherType.type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(21971,230,<723,0>,<730,25>)","                          long offset, long length,
                          boolean hasLength) throws HsqlException {

        if (data == null || overlay == null) {
            return null;
        }

        if (!hasLength) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(4046,599,<149,0>,<175,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public Object get(Object key) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(3696,341,<131,0>,<145,41>)","        }

        public Object get(Object key) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/Logger.java|(13406,153,<439,0>,<444,9>)","            }
        } catch (Exception e) {
            if (Trace.TRACE) {
                Trace.printSystemOut(e.toString());
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(16307,129,<516,0>,<523,9>)","        }
    }

    public String convertToSQLString(Object a) {

        if (a == null) {
            return ""NULL"";
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcParameterMetaData.java|(10608,1419,<280,0>,<307,5>)","                return (T) this;
            }

            throw Util.invalidArgument(""iface: "" + iface);
        }


//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Types.java|(29825,248,<854,0>,<860,37>)","            case Types.SQL_CHAR :
            case Types.SQL_NCHAR :
            case Types.SQL_CLOB :
            case Types.NCLOB :
            case Types.SQL_VARBINARY :
            case Types.SQL_VARCHAR :
            case Types.SQL_NVARCHAR :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/RangeVariableResolver.java|(9919,96,<306,0>,<311,5>)","                        }
                    }
                }
            }
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(3076,116,<107,0>,<113,9>)","        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(4659,451,<170,0>,<189,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(5293,149,<156,0>,<164,5>)","    }

    public int getSQLGenericTypeNumber() {
        return type;
    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Types.java|(29730,198,<850,0>,<856,33>)","        switch (type) {

            case Types.SQL_BINARY :
            case Types.SQL_BLOB :
            case Types.SQL_CHAR :
            case Types.SQL_NCHAR :
            case Types.SQL_CLOB :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/pool/ManagedPoolDataSource.java|(19394,1437,<468,0>,<495,5>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(64825,319,<1892,0>,<1908,42>)","                b.append(' ');
            }
        }

        b.append(NL);

        for (int i = 0; i < width; i++) {
            for (int l = 0; l < size[i]; l++) {
                b.append('-');
            }

            b.append(' ');
        }

        b.append(NL);

        for (int i = 0; i < height; i++) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputTextLog.java|(5995,259,<210,0>,<222,61>)","    }

    public int readType() throws IOException {
        return 0;
    }

    protected boolean checkNull() {

        // Return null on each column read instead.
        return false;
    }

    protected String readChar(Type type) throws IOException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/TempDataFileCache.java|(3380,209,<96,0>,<103,5>)","            close(false);

            throw Trace.error(Trace.FILE_IO_ERROR, Trace.DataFileCache_open,
                              new Object[] {
                e, fileName
            });
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(14477,300,<466,0>,<474,36>)","            }
            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
            case Types.SQL_REAL :
            case Types.SQL_FLOAT :
            case Types.SQL_DOUBLE :
            case Types.SQL_NUMERIC :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputTextLog.java|(1599,199,<31,0>,<39,32>)","package org.hsqldb.rowio;

import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;

import org.hsqldb.HsqlDateTime;
import org.hsqldb.HsqlException;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/OtherType.java|(2939,283,<97,0>,<108,44>)","            return this;
        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public Type getCombinedType(Type other,
                                int operation) throws HsqlException {
        return this;
    }

    public int compare(Object a, Object b) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Expression.java|(143887,104,<4788,0>,<4794,5>)","                    return true;
                }
            }
        }

        return false;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(3121,352,<95,0>,<117,36>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestAllTypes.java|(8329,580,<224,0>,<239,72>)","                                       + sw.elapsedTime());
                }

                // delete and add 4000 rows to introduce fragmentation
                if (deleteWhileInsert && i != 0
                        && i % deleteWhileInsertInterval == 0) {
                    sStatement.execute(""CALL IDENTITY();"");

                    ResultSet rs = sStatement.getResultSet();

                    rs.next();

                    int lastId = rs.getInt(1);

                    sStatement.execute(
                        ""SELECT * INTO TEMP tempt FROM test WHERE id > ""
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/scriptio/ScriptWriterBinary.java|(1599,206,<31,0>,<39,24>)","package org.hsqldb.scriptio;

import java.io.IOException;

import org.hsqldb.Database;
import org.hsqldb.HsqlException;
import org.hsqldb.NumberSequence;
import org.hsqldb.Session;
import org.hsqldb.Table;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(4763,451,<180,0>,<199,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/pool/JDBCConnectionPoolDataSource.java|(4722,678,<137,0>,<151,78>)","        try {
            Class.forName(driver).newInstance();
        } catch (ClassNotFoundException e) {
            throw new SQLException(""Error opening connection: ""
                                   + e.getMessage());
        } catch (IllegalAccessException e) {
            throw new SQLException(""Error opening connection: ""
                                   + e.getMessage());
        } catch (InstantiationException e) {
            throw new SQLException(""Error opening connection: ""
                                   + e.getMessage());
        }

        jdbcConnection connection =
            (jdbcConnection) DriverManager.getConnection(url, connProperties);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcDatabaseMetaData.java|(256166,1400,<5980,0>,<6006,5>)","            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.9
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestAllTypes.java|(15017,323,<408,0>,<414,68>)","                ps.setInt(1, random);
                ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println(""Update "" + (i + 1) + "" : ""
                                       + sw.elapsedTime() + "" rps: ""
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/SqlFile.java|(1990,216,<45,0>,<51,26>)","import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/CommandParser.java|(20176,282,<663,0>,<670,17>)","                HsqlName schemaName;

                if (tokenType == Token.DEFAULT) {
                    schemaName = null;
                } else {
                    schemaName =
                        database.schemaManager.getSchemaHsqlName(tokenString);
                }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/Sort.java|(5417,285,<158,0>,<171,13>)","        public int compare(Object a, Object b) {

            // handle nulls
            if (a == b) {
                return 0;
            }

            if (a == null) {
                return -1;
            }

            if (b == null) {
                return 1;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(3778,248,<135,0>,<145,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestTimestamp.java|(1625,178,<33,0>,<38,26>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(4874,290,<184,0>,<195,41>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcClobTest.java|(2084,198,<50,0>,<59,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetTest.java|(4063,240,<101,0>,<111,24>)","        ""c_bigint"",
        ""c_binary"",
        ""c_boolean"",
        ""c_char"",
        ""c_date"",
        ""c_decimal"",
        ""c_double"",
        ""c_float"",
        ""c_integer"",
        ""c_longvarbinary"",
        ""c_longvarchar"","
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HsqlDeque.java|(5900,670,<230,0>,<263,9>)","            endindex--;

            if (endindex == 0) {
                endindex = list.length;
            }
        }

        if (elementCount == 0) {
            firstindex = endindex = 0;
        }

        return value;
    }

    private int getInternalIndex(int i) throws IndexOutOfBoundsException {

        if (i < 0 || i >= elementCount) {
            throw new IndexOutOfBoundsException();
        }

        int index = firstindex + i;

        if (index >= list.length) {
            index -= list.length;
        }

        return index;
    }

    private void resetCapacity() {

        if (elementCount < list.length) {
            return;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDatabaseMetaDataTest.java|(4542,165,<120,0>,<127,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(6595,134,<171,0>,<177,30>)","        if (c == null) {
            return;
        }

        if (cConn != null) {
            try {
                cConn.close();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputBase.java|(7022,530,<223,0>,<232,48>)","                case Types.SQL_INTERVAL_DAY :
                case Types.SQL_INTERVAL_DAY_TO_HOUR :
                case Types.SQL_INTERVAL_DAY_TO_MINUTE :
                case Types.SQL_INTERVAL_DAY_TO_SECOND :
                case Types.SQL_INTERVAL_HOUR :
                case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
                case Types.SQL_INTERVAL_HOUR_TO_SECOND :
                case Types.SQL_INTERVAL_MINUTE :
                case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
                case Types.SQL_INTERVAL_SECOND :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcSQLXML.java|(1793,182,<36,0>,<41,22>)","import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(3368,356,<105,0>,<121,49>)","    public void connect(Connection c) {

        if (c == null) {
            return;
        }

        if (cConn != null) {
            try {
                cConn.close();
            } catch (SQLException e) {}
        }

        cConn = c;

        try {
            dMeta      = cConn.getMetaData();
            sStatement = cConn.createStatement();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(3420,471,<116,0>,<143,36>)","        int oldSize = size();

        super.addOrRemove(key, 0, null, null, true);

        return oldSize != size();
    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(32773,186,<1029,0>,<1038,23>)","        }
    }

    public Object subtract(Object a, Object b) throws HsqlException {

        if (a == null || b == null) {
            return null;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(2373,180,<63,0>,<73,29>)","    }

    public int getSQLGenericTypeNumber() {
        return type;
    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }

    public String getName() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcParameterMetaData.java|(10487,1540,<278,0>,<307,5>)","     public <T> T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {
            if (isWrapperFor(iface)) {
                return (T) this;
            }

            throw Util.invalidArgument(""iface: "" + iface);
        }


//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(70342,304,<2072,0>,<2077,6>)","    private static final String[] oracleSysSchemas = {
        ""SYS"", ""SYSTEM"", ""OUTLN"", ""DBSNMP"", ""OUTLN"", ""MDSYS"", ""ORDSYS"",
        ""ORDPLUGINS"", ""CTXSYS"", ""DSSYS"", ""PERFSTAT"", ""WKPROXY"", ""WKSYS"",
        ""WMSYS"", ""XDB"", ""ANONYMOUS"", ""ODM"", ""ODM_MTR"", ""OLAPSYS"", ""TRACESVR"",
        ""REPADMIN""
    };
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(13992,216,<448,0>,<456,9>)","        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMappedList.java|(5115,164,<185,0>,<192,5>)","        checkRange(index);

        return objectKeyTable[index];
    }

    public int getIndex(Object key) {
        return getLookup(key, key.hashCode());
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(4056,451,<149,0>,<168,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(3525,139,<121,0>,<130,5>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputBinary.java|(1895,219,<43,0>,<48,39>)","import org.hsqldb.store.ValuePool;
import org.hsqldb.types.BinaryData;
import org.hsqldb.types.BlobData;
import org.hsqldb.types.BlobDataMemory;
import org.hsqldb.types.ClobData;
import org.hsqldb.types.ClobDataMemory;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(3213,259,<109,0>,<118,24>)","    }

    public Object convertToTypeLimits(Object a) throws HsqlException {
        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ConnectionDialogSwing.java|(12590,309,<360,0>,<366,13>)","            if (setting != null) {
                mName.setText(setting.getName());
                mDriver.setText(setting.getDriver());
                mURL.setText(setting.getUrl());
                mUser.setText(setting.getUser());
                mPassword.setText(setting.getPassword());
            }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcCallableStatementTest.java|(43966,298,<1494,0>,<1505,41>)","        {
            return;
        }
        
        fail(""TODO: The test case is empty."");
    }

    /**
     * Test of getNString method, of inteface java.sql.CallableStatement.
     */
    public void testGetNString() throws Exception {
        System.out.println(""getNString"");"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(11948,615,<413,0>,<431,23>)","            return convertToType(null, a, Type.SQL_VARCHAR);
        } else if (a instanceof java.sql.Date) {
            return convertToType(null, a, Type.SQL_DATE);
        } else if (a instanceof java.sql.Time) {
            return convertToType(null, a, Type.SQL_TIME);
        } else if (a instanceof java.sql.Timestamp) {
            return convertToType(null, a, Type.SQL_TIMESTAMP);
        } else {
            throw Trace.error(Trace.INVALID_CONVERSION);
        }
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(1797,176,<40,0>,<45,34>)","import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
import org.hsqldb.lib.java.JavaSystem;
import org.hsqldb.store.ValuePool;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(9805,338,<294,0>,<301,35>)","                                                      defUser, defPassword);
            } else if (urlidConnect) {
                if (urlid == null) {
                    throw new IllegalArgumentException(
                        ""You must specify an 'urlid' to use an RC file"");
                }

                autoConnect = true;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(2718,285,<83,0>,<101,9>)","    }

    public boolean isLobType() {
        return true;
    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(60554,237,<1724,0>,<1738,13>)","        if (r == null) {
            String[] g = new String[1];

            g[0] = ""Result"";

            gResult.setHead(g);

            g[0] = ""(empty)"";

            gResult.addRow(g);

            return;
        }

        try {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(3908,599,<142,0>,<168,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public Object get(Object key) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMerge.java|(2172,1078,<55,0>,<91,5>)","        super(name);
    }

    protected void setUp() {

        super.setUp();

        try {
            connection = super.newConnection();
            stmnt      = connection.createStatement();
        } catch (Exception e) {}
    }

    /**
     * Prints a table displaying specified columns, and checks the expected
     * number of rows.
     */
    private void printTable(String table, String cols, int expected) throws SQLException {
        int rows = 0;
        ResultSet rs = stmnt.executeQuery(""SELECT "" + cols + "" FROM "" + table);

        ResultSetMetaData rsmd = rs.getMetaData();
        String result = ""Table "" + table + "", expecting ""
            + expected + "" rows total:\n"";

        while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + "":""
                           + rs.getString(i + 1) + "":"";
            }
            result += ""\n"";
            rows++;
        }
        rs.close();
        System.out.println(result);
        assertEquals(expected, rows);
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestStoredProcedure.java|(3499,257,<106,0>,<115,34>)","    }

    public static void main(String[] args) throws Exception {

        TestResult            result;
        TestCase              test;
        java.util.Enumeration failures;
        int                   count;

        result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(98924,101,<2504,0>,<2511,5>)","                }
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(15317,223,<479,0>,<490,23>)","        } else {
            throw Trace.error(Trace.INVALID_CONVERSION);
        }
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(8688,224,<264,0>,<278,9>)","    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ConnectionDialog.java|(1973,246,<47,0>,<54,35>)","import java.awt.Panel;
import java.awt.SystemColor;
import java.awt.TextField;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcClobTest.java|(5425,732,<165,0>,<191,49>)","        try {
            clob.setString(1L, ""T"");

            assertEquals(1L, clob.length());

            OutputStream result = clob.setAsciiStream(2);

            result.write(""ask"".getBytes(""US-ASCII""));
            result.flush();

            assertEquals(1L, clob.length());

            result.close();

            assertEquals(4L, clob.length());

            assertEquals(""Task"", clob.getSubString(1, 4));
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }

    /**
     * Test of setCharacterStream method, of class org.hsqldb.jdbc.jdbcClob.
     */
    public void testSetCharacterStream() throws Exception {
        System.out.println(""setCharacterStream"");"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(12001,217,<383,0>,<395,9>)","    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(9883,198,<326,0>,<333,9>)","    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(15136,186,<496,0>,<505,23>)","        }
    }

    public Object subtract(Object a, Object b) throws HsqlException {

        if (a == null || b == null) {
            return null;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/QueryTool.java|(8779,363,<266,0>,<278,17>)","                int r = sStatement.getUpdateCount();

                if (r == -1) {
                    formatResultSet(sStatement.getResultSet());
                } else {
                    g[0] = ""update count"";

                    gResult.setHead(g);

                    g[0] = String.valueOf(r);

                    gResult.addRow(g);
                }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestQuotes.java|(1625,178,<33,0>,<38,26>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(23018,1746,<739,0>,<776,53>)","        } else if (s.equals(""Rollback"")) {
            try {
                cConn.rollback();
            } catch (SQLException e) {}
        } else if (s.equals(""Disable MaxRows"")) {
            try {
                sStatement.setMaxRows(0);
            } catch (SQLException e) {}
        } else if (s.equals(""Set MaxRows to 100"")) {
            try {
                sStatement.setMaxRows(100);
            } catch (SQLException e) {}
        } else if (s.equals(""SELECT"")) {
            showHelp(DatabaseManagerCommon.selectHelp);
        } else if (s.equals(""INSERT"")) {
            showHelp(DatabaseManagerCommon.insertHelp);
        } else if (s.equals(""UPDATE"")) {
            showHelp(DatabaseManagerCommon.updateHelp);
        } else if (s.equals(""DELETE"")) {
            showHelp(DatabaseManagerCommon.deleteHelp);
        } else if (s.equals(""CREATE TABLE"")) {
            showHelp(DatabaseManagerCommon.createTableHelp);
        } else if (s.equals(""DROP TABLE"")) {
            showHelp(DatabaseManagerCommon.dropTableHelp);
        } else if (s.equals(""CREATE INDEX"")) {
            showHelp(DatabaseManagerCommon.createIndexHelp);
        } else if (s.equals(""DROP INDEX"")) {
            showHelp(DatabaseManagerCommon.dropIndexHelp);
        } else if (s.equals(""CHECKPOINT"")) {
            showHelp(DatabaseManagerCommon.checkpointHelp);
        } else if (s.equals(""SCRIPT"")) {
            showHelp(DatabaseManagerCommon.scriptHelp);
        } else if (s.equals(""SHUTDOWN"")) {
            showHelp(DatabaseManagerCommon.shutdownHelp);
        } else if (s.equals(""SET"")) {
            showHelp(DatabaseManagerCommon.setHelp);
        } else if (s.equals(""Test Script"")) {
            showHelp(DatabaseManagerCommon.testHelp);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(11994,224,<381,0>,<395,9>)","    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(19607,490,<602,0>,<611,44>)","            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(25766,463,<837,0>,<866,46>)","        fMain.dispose();

        if (bMustExit) {
            System.exit(0);
        }
    }

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowDeiconified(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowIconified(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowOpened(WindowEvent e) {}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCacheSize.java|(26153,323,<786,0>,<792,68>)","                ps.setInt(1, random);
                ps.execute();

                if (reportProgress && (i + 1) % 10000 == 0
                        || (slow && (i + 1) % 100 == 0)) {
                    System.out.println(""Update "" + (i + 1) + "" : ""
                                       + sw.elapsedTime() + "" rps: ""
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMultiInsert.java|(2198,144,<55,0>,<63,47>)","        super(name);
    }

    protected void setUp() {

        super.setUp();

        try {
            connection = super.newConnection();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(21299,193,<695,0>,<703,9>)","        }

        int startindex = 0;

        if (leading) {
            while (startindex < endindex && s.charAt(startindex) == trim) {
                startindex++;
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobDataRemoteClient.java|(1712,217,<37,0>,<42,43>)","import org.hsqldb.HsqlException;
import org.hsqldb.SessionInterface;
import org.hsqldb.Trace;
import org.hsqldb.result.ResultLob;
import org.hsqldb.rowio.RowInputInterface;
import org.hsqldb.rowio.RowOutputInterface;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(11930,313,<378,0>,<397,23>)","        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ConnectionDialog.java|(8218,219,<271,0>,<277,9>)","        if (d.width >= 640) {
            setLocation((d.width - size.width) / 2,
                        (d.height - size.height) / 2);
        } else {
            setLocation(0, 0);
            setSize(d);
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DITypeInfo.java|(13851,198,<409,0>,<415,33>)","        switch (type) {

            case Types.SQL_BINARY :
            case Types.SQL_BLOB :
            case Types.SQL_CHAR :
            case Types.SQL_NCHAR :
            case Types.SQL_CLOB :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/View.java|(6609,104,<212,0>,<218,5>)","                    return true;
                }
            }
        }

        return false;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Types.java|(30438,588,<870,0>,<885,5>)","            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
                return true;

            default :
                return false;
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcClob.java|(37083,193,<900,0>,<910,5>)","        }

        this.data = data;
    }

    protected void checkValid(final Object data) {

        if (data == null) {
            throw new RuntimeException(""null data"");
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(6461,217,<230,0>,<242,9>)","    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(85310,3829,<2097,0>,<2185,5>)","    }

//#endif JDBC3

    /**
     * <!-- start generic documentation -->
     * Moves to this <code>Statement</code> object's next result, deals with
     * any current <code>ResultSet</code> object(s) according  to the instructions
     * specified by the given flag, and returns
     * <code>true</code> if the next result is a <code>ResultSet</code> object.
     *
     * <P>There are no more results when the following is true:
     * <PRE>
     *     // stmt is a Statement object
     *     ((stmt.getMoreResults(current) == false) && (stmt.getUpdateCount() == -1))
     * </PRE>
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, HSQLDB does not yet support this feature. <p>
     *
     * Calling this method always throws an <code>SQLException</code>,
     * stating that the function is not supported.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param current one of the following <code>Statement</code>
     *        constants indicating what should happen to current
     *        <code>ResultSet</code> objects obtained using the method
     *        <code>getResultSet</code>:
     *        <code>Statement.CLOSE_CURRENT_RESULT</code>,
     *        <code>Statement.KEEP_CURRENT_RESULT</code>, or
     *        <code>Statement.CLOSE_ALL_RESULTS</code>
     * @return <code>true</code> if the next result is a <code>ResultSet</code>
     *         object; <code>false</code> if it is an update count or there are no
     *         more results
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code> or the argument
     *             supplied is not one of the following:
     *        <code>Statement.CLOSE_CURRENT_RESULT</code>,
     *        <code>Statement.KEEP_CURRENT_RESULT</code>, or
     *        <code>Statement.CLOSE_ALL_RESULTS</code>
     * @since JDK 1.4, HSQLDB 1.7
     * @see #execute
     */
//#ifdef JDBC3
    public boolean getMoreResults(int current) throws SQLException {
        throw Util.notSupported();
    }

//#endif JDBC3

    /**
     * <!-- start generic documentation -->
     * Retrieves any auto-generated keys created as a result of executing this
     * <code>Statement</code> object. If this <code>Statement</code> object did
     * not generate any keys, an empty <code>ResultSet</code>
     * object is returned.
     * <p>(JDBC4 clarification:)
     * <p><B>Note:</B>If the columns which represent the auto-generated keys were not specified,
     * the JDBC driver implementation will determine the columns which best represent the auto-generated keys.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Supported in 1.9.0.x <p>
     *
     * If column names or indexes provided by the user in the executeUpdate()
     * method calls are not correct, an empty result is returned.
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return a <code>ResultSet</code> object containing the auto-generated key(s)
     *         generated by the execution of this <code>Statement</code> object
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
     * @since JDK 1.4, HSQLDB 1.7
     */
//#ifdef JDBC3
    public ResultSet getGeneratedKeys() throws SQLException {
        return getGeneratedResultSet();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobDataRemoteClient.java|(4774,159,<143,0>,<153,37>)","    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public int getStreamBlockSize() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMultiInsert.java|(5047,339,<136,0>,<150,45>)","    }

    protected void tearDown() {

        try {
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(""TestSql.tearDown() error: "" + e.getMessage());
        }
    }

    public static void main(String[] argv) {

        TestResult result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputText.java|(8566,324,<318,0>,<328,49>)","    }

    protected void writeYearMonthInterval(IntervalMonthData o, Type type) {
        this.writeBytes(type.convertToString(o));
    }

    protected void writeDaySecondInterval(IntervalSecondData o, Type type) {
        this.writeBytes(type.convertToString(o));
    }

    protected void writeOther(JavaObjectData o) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcNClobTest.java|(9270,235,<299,0>,<308,1>)","            assertTrue(""truncate operation allowed after free"", false);
        } catch (Exception e){ }
    }

    public static void main(java.lang.String[] argList) {

        junit.textui.TestRunner.run(suite());
    }

}"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobDataID.java|(2453,120,<70,0>,<78,5>)","    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSet.java|(286880,1402,<6645,0>,<6671,5>)","            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(2737,283,<90,0>,<101,44>)","            return this;
        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public Type getCombinedType(Type other,
                                int operation) throws HsqlException {
        return this;
    }

    public int compare(Object a, Object b) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(63844,139,<1568,0>,<1576,5>)","                    t.insertSys(row);
                }
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Grid.java|(13560,576,<542,0>,<582,5>)","    }

    /**
     * Method declaration
     *
     *
     * @return
     */
    public Dimension preferredSize() {
        return dMinimum;
    }

    /**
     * Method declaration
     *
     *
     * @return
     */
    public Dimension getPreferredSize() {
        return dMinimum;
    }

    /**
     * Method declaration
     *
     *
     * @return
     */
    public Dimension getMinimumSize() {
        return dMinimum;
    }

    /**
     * Method declaration
     *
     *
     * @return
     */
    public Dimension minimumSize() {
        return dMinimum;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/TransferDb.java|(1625,239,<33,0>,<40,22>)","import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Parser.java|(30419,163,<946,0>,<953,13>)","                if (tokenType == Token.COMMA) {
                    read();

                    continue;
                }

                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputTextLog.java|(1773,295,<39,0>,<46,29>)","import org.hsqldb.types.BinaryData;
import org.hsqldb.types.BlobData;
import org.hsqldb.types.ClobData;
import org.hsqldb.types.IntervalMonthData;
import org.hsqldb.types.IntervalSecondData;
import org.hsqldb.types.JavaObjectData;
import org.hsqldb.types.TimeData;
import org.hsqldb.types.Type;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataRemoteClient.java|(3013,141,<88,0>,<97,5>)","        return null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcClob.java|(30953,1930,<743,0>,<789,62>)","                } catch (SQLException se) {
                    throw new java.io.IOException(se.toString());
                } finally {
                    super.close();
                }
            }
        };
    }

    /**
     * Truncates the <code>CLOB</code> value that this <code>Clob</code>
     * designates to have a length of <code>len</code>
     * characters.
     * <p>
     * <b>Note:</b> If the value specified for <code>len</code>
     * is greater than the length of the <code>CLOB</code> value, then the
     * behavior is undefined. Some JDBC drivers may throw a
     * <code>SQLException</code> while other drivers may support this
     * operation.
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB throws an SQLException if the specified <tt>len</tt> is greater
     * than the value returned by {@link #length() length}. <p>
     *
     * <b>Note:</b> This operation affects only the client-side value; it has no
     * effect upon a value stored in the database. To reflect an updated value
     * in a database, it is required to use an updating setXXX method of an
     * updating Prepared or Callable Statement, or to use an updateXXX method
     * of and updateable ResultSet. <p>
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param len the length, in characters, to which the <code>CLOB</code> value
     *        should be truncated
     * @exception SQLException if there is an error accessing the
     *            <code>CLOB</code> value or if len is less than 0
     *
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     * @since JDK 1.4, HSQLDB 1.7.2
     * @revised JDK 1.6, HSQLDB 1.8.x
     */
    public void truncate(final long len) throws SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(4968,137,<159,0>,<166,40>)","        return true;
    }

    public boolean acceptsPrecision() {
        return true;
    }

    public boolean requiresPrecision() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/TriggerDef.java|(7285,212,<177,0>,<189,5>)","    }

    public HsqlName getName() {
        return name;
    }

    public HsqlName getSchemaName() {
        return name.schema;
    }

    public Grantee getOwner() {
        return name.schema.owner;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Tree.java|(11138,576,<418,0>,<458,5>)","    }

    /**
     * Method declaration
     *
     *
     * @return
     */
    public Dimension preferredSize() {
        return dMinimum;
    }

    /**
     * Method declaration
     *
     *
     * @return
     */
    public Dimension getPreferredSize() {
        return dMinimum;
    }

    /**
     * Method declaration
     *
     *
     * @return
     */
    public Dimension getMinimumSize() {
        return dMinimum;
    }

    /**
     * Method declaration
     *
     *
     * @return
     */
    public Dimension minimumSize() {
        return dMinimum;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/OtherType.java|(3730,199,<133,0>,<142,9>)","            return a;
        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public String convertToString(Object a) {
        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(44461,1011,<1113,0>,<1142,5>)","        if (resultIn.isError()) {
            throw Util.sqlException(resultIn);
        }

        RowSetNavigator navigator    = resultIn.getNavigator();
        int[]           updateCounts = new int[navigator.getSize()];

        for (int i = 0; i < updateCounts.length; i++) {
            Object[] data = (Object[]) navigator.getNext();

            updateCounts[i] = ((Integer) data[0]).intValue();
        }

//#ifdef JAVA2
        if (updateCounts.length != batchCount) {
            if (errorResult == null) {
                throw new BatchUpdateException(updateCounts);
            } else {
                errorResult.getMainString();

                throw new BatchUpdateException(errorResult.getMainString(),
                                               errorResult.getSubString(),
                                               errorResult.getErrorCode(),
                                               updateCounts);
            }
        }

//#endif JAVA2
        return updateCounts;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntValueHashMap.java|(5069,157,<191,0>,<198,29>)","            return size() != oldSize;
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ClosableByteArrayOutputStream.java|(7282,265,<196,0>,<205,9>)","            throw new IndexOutOfBoundsException();
        } else if (len == 0) {
            return;
        }

        int newcount = count + len;

        if (newcount > buf.length) {
            buf = copyOf(buf, Math.max(buf.length << 1, newcount));
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(5015,290,<191,0>,<202,41>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(50821,248,<1367,0>,<1375,46>)","        txtCommand.requestFocus();
        txtCommand.setCaretPosition(help[0].length());
    }

    public void windowActivated(WindowEvent e) {}

    public void windowDeactivated(WindowEvent e) {}

    public void windowClosed(WindowEvent e) {}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSql.java|(25181,253,<692,0>,<700,45>)","        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(""TestSql.tearDown() error: "" + e.getMessage());
        }
    }

    public static void main(String[] argv) {

        TestResult result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDriverTest.java|(1982,165,<46,0>,<53,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/QueryTool.java|(3499,178,<72,0>,<77,26>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputBase.java|(1893,295,<43,0>,<50,29>)","import org.hsqldb.types.BinaryData;
import org.hsqldb.types.BlobData;
import org.hsqldb.types.ClobData;
import org.hsqldb.types.IntervalMonthData;
import org.hsqldb.types.IntervalSecondData;
import org.hsqldb.types.JavaObjectData;
import org.hsqldb.types.TimeData;
import org.hsqldb.types.Type;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(3102,352,<98,0>,<120,36>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetMetaDataTest.java|(11784,250,<319,0>,<325,52>)","               ""c_real"",
               ""c_smallint"",                   // 15
               ""c_time"",
               ""c_timestamp"",
               ""c_tinyint"",
               ""c_varbinary"",
               ""c_varchar"",                    // 20"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(28195,133,<961,0>,<967,5>)","        } else {
            showResultInText();
        }

        txtCommand.selectAll();
        txtCommand.requestFocus();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputTextLog.java|(2257,229,<53,0>,<58,29>)","import org.hsqldb.types.IntervalMonthData;
import org.hsqldb.types.IntervalSecondData;
import org.hsqldb.types.IntervalType;
import org.hsqldb.types.JavaObjectData;
import org.hsqldb.types.TimeData;
import org.hsqldb.types.Type;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(5015,451,<191,0>,<210,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(4530,451,<169,0>,<188,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(4530,290,<169,0>,<180,41>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestGroupByHaving.java|(1599,197,<31,0>,<38,26>)","package org.hsqldb.test;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(3685,341,<131,0>,<145,41>)","        }

        public Object get(Object key) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DITypeInfo.java|(12655,198,<367,0>,<373,33>)","        switch (type) {

            case Types.SQL_BINARY :
            case Types.SQL_BLOB :
            case Types.SQL_CHAR :
            case Types.SQL_NCHAR :
            case Types.SQL_CLOB :
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcClobTest.java|(6424,303,<203,0>,<215,5>)","            result.flush();

            assertEquals(1L, clob.length());

            result.close();

            assertEquals(4L, clob.length());

            assertEquals(""Task"", clob.getSubString(1, 4));
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetTest.java|(51593,170,<1915,0>,<1923,1>)","        assertEquals(expResult, result);
    }

    public static void main(java.lang.String[] argList) {

        junit.textui.TestRunner.run(suite());
    }

}"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusTextField.java|(2614,170,<90,0>,<95,5>)","        if (b) {
            super.setBackground(Color.white);
        } else {
            super.setBackground(Color.lightGray);
        }    // end of if (b)else
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(4098,248,<150,0>,<160,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(14794,234,<510,0>,<517,25>)","                            long offset, long length,
                            boolean hasLength) throws HsqlException {

        if (data == null || overlay == null) {
            return null;
        }

        if (!hasLength) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(4566,562,<131,0>,<153,28>)","                                                    other.type, precision);

            default :
                throw Trace.error(Trace.INVALID_CONVERSION);
        }
    }

    /**
     * Returns type for concat
     */
    public Type getCombinedType(Type other,
                                int operation) throws HsqlException {

        if (operation != Expression.CONCAT) {
            return getAggregateType(other);
        }

        Type newType;

        switch (other.type) {

            case Types.SQL_ALL_TYPES :
                return this;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/OtherType.java|(2404,217,<68,0>,<80,5>)","    }

    public int getSQLGenericTypeNumber() {

        // return Types.SQL_UDT;
        return type;
    }

    public int getSQLSpecificTypeNumber() {

        // return Types.SQL_UDT;
        return type;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Transfer.java|(33679,192,<1129,0>,<1135,5>)","        p.add(""South"", createLabel(""""));
        p.add(""East"", createLabel(""""));
        p.add(""West"", createLabel(""""));
        p.setBackground(SystemColor.control);

        return p;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(18026,424,<556,0>,<563,58>)","        } else if (s.equals(""CREATE TABLE"")) {
            showHelp(DatabaseManagerCommon.createTableHelp);
        } else if (s.equals(""DROP TABLE"")) {
            showHelp(DatabaseManagerCommon.dropTableHelp);
        } else if (s.equals(""CREATE INDEX"")) {
            showHelp(DatabaseManagerCommon.createIndexHelp);
        } else if (s.equals(""DROP INDEX"")) {
            showHelp(DatabaseManagerCommon.dropIndexHelp);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(8757,588,<284,0>,<299,5>)","            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
                return true;

            default :
                return false;
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(2822,624,<85,0>,<121,36>)","        return super.containsKey(key);
    }

    public int getOrderedMatchCount(int[] array) {

        int i = 0;

        for (; i < array.length; i++) {
            if (!super.containsKey(array[i])) {
                break;
            }
        }

        return i;
    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(18057,592,<574,0>,<600,30>)","        if (hasLength) {
            end = offset + length;
        } else {
            end = dataLength > offset ? dataLength
                                      : offset;
        }

        if (end < offset) {
            throw Trace.error(Trace.SQL_DATA_SUBSTRING_ERROR);
        }

        if (offset > end || end < 0) {

            // return zero length data
            offset = 0;
            end    = 0;
        }

        if (offset < 0) {
            offset = 0;
        }

        if (end > dataLength) {
            end = dataLength;
        }

        length = end - offset;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/pool/ManagedPoolDataSource.java|(15617,5214,<384,0>,<495,5>)","    }

    //------------------------- JDBC 4.0 -----------------------------------

    /**
     *  Creates a concrete implementation of a Query interface using the JDBC drivers <code>QueryObjectGenerator</code>
     *  implementation.
     *  If the JDBC driver does not provide its own <code>QueryObjectGenerator</code>, the <code>QueryObjectGenerator</code>
     *  provided with J2SE will be used.
     * <p>
     *  @param ifc The Query interface that will be created
     *  @return A concrete implementation of a Query interface
     *  @exception SQLException if a database access error occurs.
     *  @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4BETA
/*
   public <T extends BaseQuery> T createQueryObject(Class<T> ifc) throws SQLException {
        return QueryObjectFactory.createDefaultQueryObject(ifc, this);
   }
*/
//#endif JDBC4

     /**
     * Creates a concrete implementation of a Query interface using the JDBC drivers <code>QueryObjectGenerator</code>
     * implementation.
     * <p>*
     * If the JDBC driver does not provide its own <code>QueryObjectGenerator</code>, the <code>QueryObjectGenerator</code>
     * provided with Java SE will be used.
     *<p>
     * This method is primarly for developers of Wrappers to JDBC implementations.
     * Application developers should use <code>createQueryObject(Class&LT;T&GT; ifc).
      *<p>
     * @param ifc The Query interface that will be created
     * @param ds The <code>DataSource</code> that will be used when invoking methods that access
     * the data source. The QueryObjectGenerator implementation will use
     * this <code>DataSource</code> without any unwrapping or modications
     * to create connections to the data source.
     *
     * @return An concrete implementation of a Query interface
     * @exception SQLException if a database access error occurs.
     * @since 1.6
     */
//#ifdef JDBC4BETA
/*
    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, javax.sql.DataSource ds) throws SQLException {
        return QueryObjectFactory.createQueryObject(ifc, ds);
    }
*/
//#endif JDBC4

    /**
     * Retrieves the QueryObjectGenerator for the given JDBC driver.  If the
     * JDBC driver does not provide its own QueryObjectGenerator, NULL is
     * returned.
     * @return The QueryObjectGenerator for this JDBC Driver or NULL if the driver does not provide its own
     * implementation
     * @exception SQLException if a database access error occurs
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4BETA
/*
    public QueryObjectGenerator getQueryObjectGenerator() throws SQLException {
        return null;
    }
*/
//#endif JDBC4

    /**
     * Returns an object that implements the given interface to allow access to non-standard methods,
     * or standard methods not exposed by the proxy.
     * The result may be either the object found to implement the interface or a proxy for that object.
     * If the receiver implements the interface then that is the object. If the receiver is a wrapper
     * and the wrapped object implements the interface then that is the object. Otherwise the object is
     *  the result of calling <code>unwrap</code> recursively on the wrapped object. If the receiver is not a
     * wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
     *
     * @param iface A Class defining an interface that the result must implement.
     * @return an object that implements the interface. May be a proxy for the actual implementing object.
     * @throws java.sql.SQLException If no object found that implements the interface
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public <T> T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {
        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSubselect.java|(1599,197,<31,0>,<38,26>)","package org.hsqldb.test;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSubQueriesInPreparedStatements.java|(1688,171,<36,0>,<42,26>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataMemory.java|(1680,173,<35,0>,<41,35>)","import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;

import org.hsqldb.HsqlException;
import org.hsqldb.SessionInterface;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(28442,237,<977,0>,<991,13>)","        if (r == null) {
            String[] g = new String[1];

            g[0] = ""Result"";

            gResult.setHead(g);

            g[0] = ""(empty)"";

            gResult.addRow(g);

            return;
        }

        try {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusTableForm.java|(1599,242,<31,0>,<39,26>)","package org.hsqldb.util;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/sample/Testdb.java|(1627,178,<33,0>,<38,26>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcClobTest.java|(6228,679,<195,0>,<221,39>)","        try {
            clob.setString(1L, ""T"");

            assertEquals(1L, clob.length());

            Writer result = clob.setCharacterStream(2);

            result.write(""ask"");
            result.flush();

            assertEquals(1L, clob.length());

            result.close();

            assertEquals(4L, clob.length());

            assertEquals(""Task"", clob.getSubString(1, 4));
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }

    /**
     * Test of truncate method, of class org.hsqldb.jdbc.jdbcClob.
     */
    public void testTruncate() throws Exception {
        System.out.println(""truncate"");"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Transfer.java|(3855,246,<87,0>,<94,35>)","import java.awt.Panel;
import java.awt.SystemColor;
import java.awt.TextField;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSet.java|(286845,1437,<6644,0>,<6671,5>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestLibSpeed.java|(2017,222,<49,0>,<56,12>)","            ""ACOS"", ""java.lang.Math.acos""
        }, {
            ""ASIN"", ""java.lang.Math.asin""
        }, {
            ""ATAN"", ""java.lang.Math.atan""
        }, {
            ""ATAN2"", ""java.lang.Math.atan2""
        }, {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ClosableCharArrayWriter.java|(8166,265,<222,0>,<231,9>)","            throw new IndexOutOfBoundsException();
        } else if (len == 0) {
            return;
        }

        int newcount = count + len;

        if (newcount > buf.length) {
            buf = copyOf(buf, Math.max(buf.length << 1, newcount));
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(3033,137,<89,0>,<96,40>)","        return true;
    }

    public boolean acceptsPrecision() {
        return true;
    }

    public boolean requiresPrecision() {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDataSourceFactoryTest.java|(2078,234,<48,0>,<59,32>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetTest.java|(4304,152,<112,0>,<118,20>)","        ""c_real"",
        ""c_smallint"",
        ""c_time"",
        ""c_timestamp"",
        ""c_tinyint"",
        ""c_varbinary"",
        ""c_varchar"","
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobDataID.java|(2453,159,<70,0>,<80,37>)","    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public int getStreamBlockSize() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusConnectionDialog.java|(1857,246,<43,0>,<50,35>)","import java.awt.Panel;
import java.awt.SystemColor;
import java.awt.TextField;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/index/MemoryNode.java|(4072,177,<102,0>,<111,5>)","    }

    Object[] getData() throws HsqlException {

        if (Trace.DOASSERT) {
            Trace.doAssert(iBalance != -2);
        }

        return rData.getData();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(23846,424,<759,0>,<766,58>)","        } else if (s.equals(""CREATE TABLE"")) {
            showHelp(DatabaseManagerCommon.createTableHelp);
        } else if (s.equals(""DROP TABLE"")) {
            showHelp(DatabaseManagerCommon.dropTableHelp);
        } else if (s.equals(""CREATE INDEX"")) {
            showHelp(DatabaseManagerCommon.createIndexHelp);
        } else if (s.equals(""DROP INDEX"")) {
            showHelp(DatabaseManagerCommon.dropIndexHelp);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(129405,4970,<3060,0>,<3185,22>)","    }

    //----------------------- Multiple Results --------------------------

    /**
     * <!-- start generic documentation -->
     *  Retrieves the current result as a <code>ResultSet</code> object.
     *  This method should be called only once per result.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Without an interceding call to executeXXX, each invocation of this
     * method will produce a new, initialized ResultSet instance referring to
     * the current result, if any.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return the current result as a <code>ResultSet</code> object or
     * <code>null</code> if the result is an update count or there are no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     */
    public ResultSet getResultSet() throws SQLException {

        checkClosed();

        return currentResultSet;
    }

    /**
     * <!-- start generic documentation -->
     *  Retrieves the current result as an update count;
     *  if the result is a <code>ResultSet</code> object or there are no more results, -1
     *  is returned. This method should be called only once per result.
     * <!-- end generic documentation -->
     *
     * @return the current result as an update count; -1 if the current result is a
     * <code>ResultSet</code> object or there are no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     */
    public int getUpdateCount() throws SQLException {

// fredt - omit checkClosed() in order to be able to handle the result of a
// SHUTDOWN query
        checkClosed();

        return (resultIn == null || resultIn.isData()) ? -1
                                                       : resultIn
                                                       .getUpdateCount();
    }

    /**
     * <!-- start generic documentation -->
     * Moves to this <code>Statement</code> object's next result, returns
     * <code>true</code> if it is a <code>ResultSet</code> object, and
     * implicitly closes any current <code>ResultSet</code>
     * object(s) obtained with the method <code>getResultSet</code>.
     *
     * <P>There are no more results when the following is true:
     * <PRE>
     *     // stmt is a Statement object
     *     ((stmt.getMoreResults() == false) && (stmt.getUpdateCount() == -1))
     * </PRE>
     * <!-- end generic documentation -->
     *
     * @return <code>true</code> if the next result is a <code>ResultSet</code>
     *         object; <code>false</code> if it is an update count or there are
     *         no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     */
    public boolean getMoreResults() throws SQLException {

        checkClosed();

        resultIn = null;

        return false;
    }

    //--------------------------JDBC 2.0-----------------------------

    /**
     * <!-- start generic documentation -->
     * Gives the driver a hint as to the direction in which
     * rows will be processed in <code>ResultSet</code>
     * objects created using this <code>Statement</code> object.  The
     * default value is <code>ResultSet.FETCH_FORWARD</code>.
     * <P>
     * Note that this method sets the default fetch direction for
     * result sets generated by this <code>Statement</code> object.
     * Each result set has its own methods for getting and setting
     * its own fetch direction.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, HSQLDB supports only <code>FETCH_FORWARD</code>. <p>
     *
     * Setting any other value will throw an <code>SQLException</code>
     * stating that the operation is not supported.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param direction the initial direction for processing rows
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     * or the given direction
     * is not one of <code>ResultSet.FETCH_FORWARD</code>,
     * <code>ResultSet.FETCH_REVERSE</code>, or <code>ResultSet.FETCH_UNKNOWN</code>
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *    for jdbcStatement)
     * @see #getFetchDirection
     */
    public void setFetchDirection(int direction) throws SQLException {

        checkClosed();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCascade.java|(1718,177,<39,0>,<45,32>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import junit.framework.TestCase;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusEditor.java|(16181,382,<439,0>,<450,47>)","        Panel pEntry = new Panel();

        pEntry.setLayout(new GridBagLayout());

        GridBagConstraints c = new GridBagConstraints();

        c.fill       = GridBagConstraints.HORIZONTAL;
        c.insets     = new Insets(3, 3, 3, 3);
        c.gridwidth  = 1;
        c.gridheight = 1;
        c.weightx    = c.weighty = 1;
        c.anchor     = GridBagConstraints.WEST;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(150124,101,<3898,0>,<3905,1>)","            t.insertSys(row);
        }

        t.setDataReadOnly(true);

        return t;
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Tree.java|(4998,843,<142,0>,<182,5>)","    }

    /**
     * Method declaration
     *
     *
     * @param d
     */
    public void setMinimumSize(Dimension d) {
        dMinimum = d;
    }

    /**
     * Method declaration
     *
     *
     * @param x
     * @param y
     * @param w
     * @param h
     */

// fredt@users 20011210 - patch 450412 by elise@users
// with additional replacement of deprecated methods
    public void setBounds(int x, int y, int w, int h) {

        super.setBounds(x, y, w, h);

        iSbHeight = sbHoriz.getPreferredSize().height;
        iSbWidth  = sbVert.getPreferredSize().width;
        iHeight   = h - iSbHeight;
        iWidth    = w - iSbWidth;

        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);
        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);
        adjustScroll();

        iImage = null;

        repaint();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(16317,228,<517,0>,<528,5>)","    }

    public String convertToSQLString(Object a) {

        if (a == null) {
            return ""NULL"";
        }

        String s = convertToString(a);

        return StringConverter.toQuotedString(s, '\'', true);
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcDataSource.java|(6835,5322,<191,0>,<307,5>)","    }

    //------------------------- JDBC 4.0 -----------------------------------

    /**
     * Creates a concrete implementation of a Query interface using the JDBC drivers <code>QueryObjectGenerator</code>
     * implementation.
     * <p>
     * If the JDBC driver does not provide its own <code>QueryObjectGenerator</code>, the <code>QueryObjectGenerator</code>
     * provided with Java SE will be used.
     * <p>
     * @param ifc The Query interface that will be created
     * @return A concrete implementation of a Query interface
     * @exception SQLException if a database access error occurs.
     *  @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4BETA
/*
   public <T extends BaseQuery> T createQueryObject(Class<T> ifc) throws SQLException {
        return QueryObjectFactory.createDefaultQueryObject(ifc, this);
   }
*/
//#endif JDBC4

    /**
     * Creates a concrete implementation of a Query interface using the JDBC drivers <code>QueryObjectGenerator</code>
     * implementation.
     * <p>
     * If the JDBC driver does not provide its own <code>QueryObjectGenerator</code>, the <code>QueryObjectGenerator</code>
     * provided with Java SE will be used.
     * <p>
     * This method is primarly for developers of Wrappers to JDBC implementations.
     * Application developers should use <code>createQueryObject(Class&LT;T&GT; ifc).
     * <p>
     * @param ifc The Query interface that will be created
     * @param ds The <code>DataSource</code> that will be used when invoking methods that access
     * the data source. The QueryObjectGenerator implementation will use
     * this <code>DataSource</code> without any unwrapping or modications
     * to create connections to the data source.
     *
     * @return An concrete implementation of a Query interface
     * @exception SQLException if a database access error occurs.
     * @since 1.6
     */
//#ifdef JDBC4BETA
/*
    public <T extends BaseQuery> T createQueryObject(Class<T> ifc, DataSource ds) throws SQLException {
        return QueryObjectFactory.createQueryObject(ifc, ds);
    }
*/
//#endif JDBC4

    /**
     * Retrieves the QueryObjectGenerator for the given JDBC driver.  If the
     * JDBC driver does not provide its own QueryObjectGenerator, NULL is
     * returned.
     * @return The QueryObjectGenerator for this JDBC Driver or NULL if the driver does not provide its own
     * implementation
     * @exception SQLException if a database access error occurs
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4BETA
/*
    public QueryObjectGenerator getQueryObjectGenerator() throws SQLException {
        return null;
    }
*/
//#endif JDBC4
    // ------------------- java.sql.Wrapper implementation ---------------------

    /**
     * Returns an object that implements the given interface to allow access to
     * non-standard methods, or standard methods not exposed by the proxy.
     *
     * If the receiver implements the interface then the result is the receiver
     * or a proxy for the receiver. If the receiver is a wrapper
     * and the wrapped object implements the interface then the result is the
     * wrapped object or a proxy for the wrapped object. Otherwise return the
     * the result of calling <code>unwrap</code> recursively on the wrapped object
     * or a proxy for that result. If the receiver is not a
     * wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
     *
     * @param iface A Class defining an interface that the result must implement.
     * @return an object that implements the interface. May be a proxy for the actual implementing object.
     * @throws java.sql.SQLException If no object found that implements the interface
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public <T> T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {
        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(12102,116,<389,0>,<395,9>)","        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(66410,206,<1954,0>,<1961,28>)","        item.setActionCommand(""#"" + iRecent);
        item.addActionListener(this);
        mRecent.insert(item, iRecent);

        iRecent = (iRecent + 1) % iMaxRecent;
    }

    private void initGUI() {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcNClobTest.java|(4774,548,<144,0>,<160,45>)","        try {
            clob.setString(1, ""T"");

            assertEquals(1L, clob.length());
            assertEquals(3, clob.setString(2L, ""ask""));
            assertEquals(4L, clob.length());
            assertEquals(""Task"", clob.getSubString(1L, 4));
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }

    /**
     * Test of setAsciiStream method, of class org.hsqldb.jdbc.jdbcNClob.
     */
    public void testSetAsciiStream() throws Exception {
        System.out.println(""setAsciiStream"");"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(1857,235,<42,0>,<49,33>)","import org.hsqldb.HsqlException;
import org.hsqldb.Library;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
import org.hsqldb.lib.StringConverter;
import org.hsqldb.lib.StringUtil;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputText.java|(3355,461,<87,0>,<100,9>)","        if (fieldSep.endsWith(""\n"")) {
            fieldSepEnd = true;
            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);
        }

        if (varSep.endsWith(""\n"")) {
            varSepEnd = true;
            varSep    = varSep.substring(0, varSep.length() - 1);
        }

        if (longvarSep.endsWith(""\n"")) {
            longvarSepEnd = true;
            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSql.java|(2240,144,<57,0>,<65,47>)","        super(name);
    }

    protected void setUp() {

        super.setUp();

        try {
            connection = super.newConnection();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(13426,224,<430,0>,<444,9>)","    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputTextLog.java|(2000,219,<46,0>,<51,39>)","import org.hsqldb.store.ValuePool;
import org.hsqldb.types.BinaryData;
import org.hsqldb.types.BlobData;
import org.hsqldb.types.BlobDataMemory;
import org.hsqldb.types.ClobData;
import org.hsqldb.types.ClobDataMemory;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(70583,134,<2373,0>,<2379,13>)","                    end = true;
                    break;
            }

            if (end) {
                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Row.java|(8195,221,<267,0>,<280,1>)","        }

        return false;
    }

    /**
     * Hash code is valid only until a modification to the cache
     *
     * @return file position of row
     */
    public int hashCode() {
        return iPos;
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(1734,165,<38,0>,<43,24>)","import org.hsqldb.Expression;
import org.hsqldb.HsqlException;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(4701,248,<171,0>,<181,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(21942,186,<665,0>,<674,23>)","        }
    }

    public Object subtract(Object a, Object b) throws HsqlException {

        if (a == null || b == null) {
            return null;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(23458,388,<751,0>,<758,55>)","        } else if (s.equals(""SELECT"")) {
            showHelp(DatabaseManagerCommon.selectHelp);
        } else if (s.equals(""INSERT"")) {
            showHelp(DatabaseManagerCommon.insertHelp);
        } else if (s.equals(""UPDATE"")) {
            showHelp(DatabaseManagerCommon.updateHelp);
        } else if (s.equals(""DELETE"")) {
            showHelp(DatabaseManagerCommon.deleteHelp);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/QueryTool.java|(18788,571,<602,0>,<638,32>)","    }

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowActivated(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowDeactivated(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowClosed(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param ev
     */
    public void windowClosing(WindowEvent ev) {

        try {
            cConn.close();
        } catch (Exception e) {}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(2731,233,<76,0>,<86,35>)","    }

    public boolean containsKey(Object key) {
        return super.containsKey(key);
    }

    public boolean containsValue(Object value) {
        return super.containsValue(value);
    }

    public void putAll(HashMap t) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcSQLXMLTest.java|(2647,198,<65,0>,<74,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(3525,352,<121,0>,<143,36>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(20648,300,<633,0>,<641,36>)","            }
            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
            case Types.SQL_REAL :
            case Types.SQL_FLOAT :
            case Types.SQL_DOUBLE :
            case Types.SQL_NUMERIC :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/Log.java|(25680,84,<826,0>,<832,1>)","                return true;
            }
        }

        return false;
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(3706,134,<116,0>,<124,23>)","    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }

    public String getName() {

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(17412,239,<573,0>,<578,41>)","            windowClosing(null);
        } else if (s.equals(""Transfer"")) {
            Transfer.work(null);
        } else if (s.equals(""Dump"")) {
            Transfer.work(new String[]{ ""-d"" });
        } else if (s.equals(""Restore"")) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(5034,290,<191,0>,<202,41>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/OtherType.java|(2091,211,<55,0>,<62,36>)","    }

    public int displaySize() {
        return precision > Integer.MAX_VALUE ? Integer.MAX_VALUE
                                             : (int) precision;
    }

    public int getJDBCTypeNumber() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCacheSize.java|(12855,536,<383,0>,<398,68>)","                                   + sw.elapsedTime());
            }

            // delete and add 4000 rows to introduce fragmentation
            if (deleteWhileInsert && i != 0
                    && i % deleteWhileInsertInterval == 0) {
                sStatement.execute(""CALL IDENTITY();"");

                ResultSet rs = sStatement.getResultSet();

                rs.next();

                int lastId = rs.getInt(1);

                sStatement.execute(
                    ""SELECT * INTO TEMP tempt FROM test WHERE id > ""
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMerge.java|(11204,253,<331,0>,<339,45>)","        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(""TestSql.tearDown() error: "" + e.getMessage());
        }
    }

    public static void main(String[] argv) {

        TestResult result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/QueryTool.java|(10185,398,<323,0>,<335,48>)","        try {
            ResultSetMetaData m   = r.getMetaData();
            int               col = m.getColumnCount();
            String[]          h   = new String[col];

            for (int i = 1; i <= col; i++) {
                h[i - 1] = m.getColumnLabel(i);
            }

            gResult.setHead(h);

            while (r.next()) {
                for (int i = 1; i <= col; i++) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/store/ReusableObjectCache.java|(1768,119,<40,0>,<45,5>)","        try {
            jbInit();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(8356,205,<299,0>,<307,9>)","        }
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(29521,1256,<1026,0>,<1079,27>)","        String       all   = txtCommand.getText();
        StringBuffer b     = new StringBuffer();
        long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = ""ms"";
        g[1] = ""count"";
        g[2] = ""sql"";
        g[3] = ""error"";

        gResult.setHead(g);

        int max = 1;

        lTime = System.currentTimeMillis() - lTime;

        while (!all.equals("""")) {
            int    i = all.indexOf(';');
            String sql;

            if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = """";
            }

            if (sql.startsWith(""--#"")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith(""--"")) {
                continue;
            }

            g[2] = sql;

            long l = 0;

            try {
                l = DatabaseManagerCommon.testStatement(sStatement, sql, max);
                total += l;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(4210,451,<156,0>,<175,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(3431,259,<121,0>,<130,24>)","    }

    public Object convertToTypeLimits(Object a) throws HsqlException {
        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/navigator/LinkedListRowSetNavigator.java|(3587,294,<119,0>,<128,9>)","        out.writeLong(id);
        out.writeInt(size);
        out.writeInt(0);    // offset
        out.writeInt(size);

        while (hasNext()) {
            Object[] data = (Object[]) getNext();

            out.writeData(meta.getColumnCount(), meta.colTypes, data, null, null);
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/ScaledRAFile.java|(9378,177,<268,0>,<277,23>)","            }

            ba.reset();
            ba.skip(seekPosition - bufferOffset);

            int val = ba.read();

            seekPosition++;

            return val;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(8796,116,<272,0>,<278,9>)","        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcConnectionTest.java|(2346,165,<59,0>,<66,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/DataFileCache.java|(9113,209,<263,0>,<270,5>)","            close(false);

            throw Trace.error(Trace.FILE_IO_ERROR, Trace.DataFileCache_open,
                              new Object[] {
                e, fileName
            });
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(10118,151,<313,0>,<320,9>)","        }
    }

    public Object convertToTypeLimits(Object a) throws HsqlException {

        if (precision == 0) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcSQLXML.java|(1793,212,<36,0>,<42,28>)","import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.StringReader;"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/Sort.java|(5562,140,<165,0>,<171,13>)","            if (a == null) {
                return -1;
            }

            if (b == null) {
                return 1;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(11994,249,<381,0>,<397,23>)","    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcDatabaseMetaData.java|(255007,2559,<5959,0>,<6006,5>)","    }

//#endif JDBC4

    /**
     * Returns an object that implements the given interface to allow access to non-standard methods,
     * or standard methods not exposed by the proxy.
     * The result may be either the object found to implement the interface or a proxy for that object.
     * If the receiver implements the interface then that is the object. If the receiver is a wrapper
     * and the wrapped object implements the interface then that is the object. Otherwise the object is
     *  the result of calling <code>unwrap</code> recursively on the wrapped object. If the receiver is not a
     * wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
     *
     * @param iface A Class defining an interface that the result must implement.
     * @return an object that implements the interface. May be a proxy for the actual implementing object.
     * @throws java.sql.SQLException If no object found that implements the interface
     * @since JDK 1.6, HSQLDB 1.9
     */
//#ifdef JDBC4
    public <T> T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {
        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.9
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(2887,116,<95,0>,<101,9>)","        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HsqlDeque.java|(3671,205,<114,0>,<121,9>)","        firstindex++;
        elementCount--;

        if (elementCount == 0) {
            firstindex = endindex = 0;
        } else if (firstindex == list.length) {
            firstindex = 0;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(2990,464,<93,0>,<120,36>)","        while (it.hasNext()) {
            Object key = it.next();

            put(key, t.get(key));
        }
    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(6390,313,<225,0>,<244,23>)","        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSql.java|(1599,185,<31,0>,<37,34>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(61970,1256,<1777,0>,<1830,27>)","        String       all   = txtCommand.getText();
        StringBuffer b     = new StringBuffer();
        long         total = 0;

        for (int i = 0; i < all.length(); i++) {
            char c = all.charAt(i);

            if (c != '\n') {
                b.append(c);
            }
        }

        all = b.toString();

        String[] g = new String[4];

        g[0] = ""ms"";
        g[1] = ""count"";
        g[2] = ""sql"";
        g[3] = ""error"";

        gResult.setHead(g);

        int max = 1;

        lTime = System.currentTimeMillis() - lTime;

        while (!all.equals("""")) {
            int    i = all.indexOf(';');
            String sql;

            if (i != -1) {
                sql = all.substring(0, i);
                all = all.substring(i + 1);
            } else {
                sql = all;
                all = """";
            }

            if (sql.startsWith(""--#"")) {
                max = Integer.parseInt(sql.substring(3));

                continue;
            } else if (sql.startsWith(""--"")) {
                continue;
            }

            g[2] = sql;

            long l = 0;

            try {
                l = DatabaseManagerCommon.testStatement(sStatement, sql, max);
                total += l;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(16856,366,<547,0>,<565,9>)","    }

    /**
     * Method declaration
     *
     *
     * @param ev
     */
    public void actionPerformed(ActionEvent ev) {

        String s = ev.getActionCommand();

        if (s == null) {
            if (ev.getSource() instanceof MenuItem) {
                MenuItem i;

                s = ((MenuItem) ev.getSource()).getLabel();
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(2376,180,<63,0>,<73,29>)","    }

    public int getSQLGenericTypeNumber() {
        return type;
    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }

    public String getName() {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcRowIdTest.java|(1999,234,<47,0>,<58,32>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(4586,248,<170,0>,<180,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(5660,224,<173,0>,<187,9>)","    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCacheSize.java|(8712,328,<245,0>,<254,37>)","            sw.zero();

            sStatement = cConnection.createStatement();

            java.util.Random randomgen = new java.util.Random();

//            sStatement.execute(""SET WRITE_DELAY "" + writeDelay);
            sStatement.execute(ddl1);
            sStatement.execute(ddl2);
            sStatement.execute(ddl3);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBug785429.java|(1599,212,<31,0>,<39,34>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import junit.framework.TestCase;
import junit.framework.TestResult;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/TableWorks.java|(32057,323,<906,0>,<914,36>)","            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
            case Types.SQL_REAL :
            case Types.SQL_FLOAT :
            case Types.SQL_DOUBLE :
            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputBinary.java|(5821,172,<186,0>,<194,9>)","    }

    protected ClobData readClob() throws IOException, HsqlException {

        String s = readString();

        if (s == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(10626,163,<315,0>,<326,27>)","        }

        if (c == null) {
            return;
        }

        m.connect(c);
    }

    private static void showUsage() {

        System.out.println(
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(34816,504,<1253,0>,<1270,43>)","        pResult = new Panel();

        pQuery.setLayout(new BorderLayout());
        pCommand.setLayout(new BorderLayout());
        pResult.setLayout(new BorderLayout());

        Font fFont = new Font(""Dialog"", Font.PLAIN, 12);

        txtCommand = new TextArea(5, 40);

        txtCommand.addKeyListener(this);

        txtResult = new TextArea(20, 40);

        txtCommand.setFont(fFont);
        txtResult.setFont(new Font(""Courier"", Font.PLAIN, 12));

        butExecute = new Button(""Execute"");
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java|(37379,1402,<912,0>,<938,5>)","            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCacheSize.java|(1652,178,<34,0>,<39,26>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(71599,1356,<1747,0>,<1772,88>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(6554,356,<169,0>,<185,49>)","    public void connect(Connection c) {

        if (c == null) {
            return;
        }

        if (cConn != null) {
            try {
                cConn.close();
            } catch (SQLException e) {}
        }

        cConn = c;

        try {
            dMeta      = cConn.getMetaData();
            sStatement = cConn.createStatement();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(11411,109,<386,0>,<391,5>)","            }
            default : {
                throw unexpectedToken();
            }
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyLongValueHashMap.java|(2621,155,<73,0>,<80,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            return longValueTable[lookup];
        }

        return defaultValue;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcDataSource.java|(10720,1356,<280,0>,<305,88>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataRemoteClient.java|(5188,158,<174,0>,<181,5>)","    }

    void checkClosed() throws HsqlException {

        if (isClosed()) {
            throw Trace.error(Trace.BLOB_IS_NO_LONGER_VALID);
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMultiInsert.java|(5133,253,<142,0>,<150,45>)","        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(""TestSql.tearDown() error: "" + e.getMessage());
        }
    }

    public static void main(String[] argv) {

        TestResult result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(2259,238,<57,0>,<63,37>)","import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Parser.java|(16481,134,<457,0>,<463,13>)","                    end = true;
                    break;
            }

            if (end) {
                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestAllTypes.java|(1625,178,<33,0>,<38,26>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataID.java|(1626,173,<33,0>,<39,35>)","import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;

import org.hsqldb.HsqlException;
import org.hsqldb.SessionInterface;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(7428,714,<210,0>,<239,16>)","        }
    }

    /**
     * Method declaration
     *
     *
     * @param arg
     */
    public static void main(String[] arg) {

        System.getProperties().put(""sun.java2d.noddraw"", ""true"");

        // (ulrivo): read all arguments from the command line
        String  lowerArg;
        String  urlid        = null;
        String  rcFile       = null;
        boolean autoConnect  = false;
        boolean urlidConnect = false;

        bMustExit = true;

        for (int i = 0; i < arg.length; i++) {
            lowerArg = arg[i].toLowerCase();

            if (lowerArg.length() > 1 && lowerArg.charAt(1) == '-') {
                lowerArg = lowerArg.substring(1);
            }

            i++;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyLongValueHashMap.java|(2940,405,<89,0>,<111,5>)","            return true;
        }

        return false;
    }

    public boolean put(int key, int value) {

        int oldSize = size();

        super.addOrRemove(key, value, null, null, false);

        return oldSize != size();
    }

    public boolean remove(int key) {

        int oldSize = size();

        super.addOrRemove(key, 0, null, null, true);

        return oldSize != size();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ClosableByteArrayOutputStream.java|(12556,602,<357,0>,<375,5>)","    }

    /**
     * Converts this stream's accumuated data into a string, translating bytes
     * into characters according to the platform's default character encoding.
     *
     * @return String translated from this stream's accumuated data.
     * @throws RuntimeException may be thrown if this output stream has been
     *      {@link #free() freed}.
     */
    public synchronized String toString() {
        try {
            checkFreed();
        } catch (IOException ex) {
            throw new RuntimeException(ex.toString());
        }

        return new String(buf, 0, count);
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(64521,229,<1880,0>,<1889,29>)","                if (l > size[j]) {
                    size[j] = l;
                }
            }
        }

        StringBuffer b = new StringBuffer();

        for (int i = 0; i < width; i++) {
            b.append(col[i]);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(1715,162,<37,0>,<42,24>)","import org.hsqldb.HsqlException;
import org.hsqldb.Library;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcDatabaseMetaData.java|(256050,1516,<5978,0>,<6006,5>)","    public <T> T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {
        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.9
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(145700,1437,<3489,0>,<3516,5>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/TransferDb.java|(1625,216,<33,0>,<39,26>)","import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(14198,185,<456,0>,<463,36>)","        }

        switch (otherType.type) {

            case Types.SQL_CLOB :
                a = a.toString();
            case Types.SQL_CHAR :
            case Types.SQL_VARCHAR :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntValueHashMap.java|(4726,297,<174,0>,<187,33>)","            }
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {

            int oldSize = size();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(61627,166,<1760,0>,<1767,22>)","                        }
                    } catch (SQLException e) {}
                }

                gResult.addRow(h);
            }

            r.close();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(2817,155,<83,0>,<90,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            return longValueTable[lookup];
        }

        return defaultValue;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/WrapperIterator.java|(5492,247,<195,0>,<208,26>)","        }

        throw new NoSuchElementException();
    }

    public int nextInt() {
        throw new NoSuchElementException();
    }

    public long nextLong() {
        throw new NoSuchElementException();
    }

    public void remove() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/QueryTool.java|(12429,176,<424,0>,<430,39>)","        for (int i = 0; i < iMaxRecent; i++) {
            if (s.equals(sRecent[i])) {
                return;
            }
        }

        if (sRecent[iRecent] != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcBlob.java|(33230,222,<850,0>,<860,5>)","        }

        this.data = data;    // (byte[]) data.clone();
    }

    protected void checkValid(final Object data) {

        if (data == null) {
            throw new RuntimeException(""null data"");
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/ScaledRAFileInJar.java|(4181,153,<127,0>,<136,19>)","        }

        ba.reset();
        ba.skip(seekPosition - bufferOffset);

        int val = ba.read();

        seekPosition++;

        return val;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(18697,442,<608,0>,<621,31>)","        } else if (s.equals(""Open Script..."")) {
            FileDialog f = new FileDialog(fMain, ""Open Script"",
                                          FileDialog.LOAD);

            // (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(116006,5357,<2727,0>,<2859,5>)","    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the maximum number of bytes that can be
     * returned for character and binary column values in a <code>ResultSet</code>
     * object produced by this <code>Statement</code> object.
     * This limit applies only to  <code>BINARY</code>, <code>VARBINARY</code>,
     * <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
     * (JDBC4 new:) <code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>
     * and <code>LONGVARCHAR</code> columns.  If the limit is exceeded, the
     * excess data is silently discarded.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.7.2, HSQLDB always returns zero, meaning there
     * is no limit.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return the current column size limit for columns storing character and
     *         binary values; zero means there is no limit
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #setMaxFieldSize
     */
    public int getMaxFieldSize() throws SQLException {

        checkClosed();

        return 0;
    }

    /**
     * <!-- start generic documentation -->
     * (JDBC4 clarification:) Sets the limit for the maximum number of bytes in a <code>ResultSet</code>
     * Sets the limit for the maximum number of bytes that can be returned for
     * character and binary column values in a <code>ResultSet</code>
     * object produced by this <code>Statement</code> object.
     *
     * This limit applies
     * only to <code>BINARY</code>, <code>VARBINARY</code>,
     * <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
     * (JDBC4 new:) <code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code> and
     * <code>LONGVARCHAR</code> fields.  If the limit is exceeded, the excess data
     * is silently discarded. For maximum portability, use values
     * greater than 256.
     * <!-- emd generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * To present, calls to this method are simply ignored; HSQLDB always
     * stores the full number of bytes when dealing with any of the field types
     * mentioned above. These types all have an absolute maximum element upper
     * bound determined by the Java array index limit
     * java.lang.Integer.MAX_VALUE.  For XXXBINARY types, this translates to
     * Integer.MAX_VALUE bytes.  For XXXCHAR types, this translates to
     * 2 * Integer.MAX_VALUE bytes (2 bytes / character). <p>
     *
     * In practice, field sizes are limited to values much smaller than the
     * absolute maximum element upper bound, in particular due to limits imposed
     * on the maximum available Java heap memory.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param max the new column size limit in bytes; zero means there is no limit
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     *            or the condition max >= 0 is not satisfied
     * @see #getMaxFieldSize
     */
    public void setMaxFieldSize(int max) throws SQLException {

        checkClosed();

        if (max < 0) {
            throw Util.outOfRangeArgument();
        }
    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the maximum number of rows that a
     * <code>ResultSet</code> object produced by this
     * <code>Statement</code> object can contain.  If this limit is exceeded,
     * the excess rows are silently dropped.
     * <!-- start generic documentation -->
     *
     * @return the current maximum number of rows for a <code>ResultSet</code>
     *         object produced by this <code>Statement</code> object;
     *         zero means there is no limit
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #setMaxRows
     */
    public int getMaxRows() throws SQLException {

        checkClosed();

        return maxRows;
    }

    /**
     * <!-- start generic documentation -->
     * (JDBC4 clarification:)
     * Sets the limit for the maximum number of rows that any
     * <code>ResultSet</code> object  generated by this <code>Statement</code>
     * object can contain to the given number.
     * If the limit is exceeded, the excess
     * rows are silently dropped.
     * <!-- end generic documentation -->
     *
     * @param max the new max rows limit; zero means there is no limit
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     *            or the condition max >= 0 is not satisfied
     * @see #getMaxRows
     */
    public void setMaxRows(int max) throws SQLException {

        checkClosed();

        if (max < 0) {
            throw Util.outOfRangeArgument();
        }

        maxRows = max;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCacheSize.java|(6283,258,<185,0>,<197,30>)","            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(""TestSql.setUp() error: "" + e.getMessage());
        }
    }

    /**
     * Fill up the cache
     *
     *
     */
    public void testFillUp() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(7344,556,<215,0>,<237,28>)","                                                    other.type, precision);

            default :
                throw Trace.error(Trace.INVALID_CONVERSION);
        }
    }

    /**
     * For concatenation
     */
    public Type getCombinedType(Type other,
                                int operation) throws HsqlException {

        if (operation != Expression.CONCAT) {
            return getAggregateType(other);
        }

        Type newType;

        switch (other.type) {

            case Types.SQL_ALL_TYPES :
                return this;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/OrderedIntHashSet.java|(2869,239,<92,0>,<105,5>)","    }

    public int getOrderedMatchCount(int[] array) {

        int i = 0;

        for (; i < array.length; i++) {
            if (!super.containsKey(array[i])) {
                break;
            }
        }

        return i;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/result/ResultMetaData.java|(11149,72,<350,0>,<355,1>)","                    }
                }
            }
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/UtilTest.java|(11657,173,<276,0>,<283,25>)","    }
    
    protected void setUp() throws Exception {
        super.setUp();
    }
    
    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(2303,149,<63,0>,<70,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            return objectValueTable[lookup];
        }

        return null;
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcConnectionTest.java|(2320,234,<58,0>,<69,32>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobDataRemoteClient.java|(4774,120,<143,0>,<151,5>)","    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobData.java|(1626,173,<33,0>,<39,35>)","import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;

import org.hsqldb.HsqlException;
import org.hsqldb.SessionInterface;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(3960,283,<141,0>,<153,33>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {

            int oldSize = size();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/server/WebServer.java|(7075,682,<171,0>,<192,5>)","        try {
            server.setProperties(props);
        } catch (Exception e) {
            server.printError(""Failed to set properties"");
            server.printStackTrace(e);

            return;
        }

        // now messages go to the channel specified in properties
        server.print(""Startup sequence initiated from main() method"");

        if (fileProps != null) {
            server.print(""Loaded properties from ["" + propsPath
                         + "".properties]"");
        } else {
            server.print(""Could not load properties from file"");
            server.print(""Using cli/default properties only"");
        }

        server.start();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobDataRemoteClient.java|(5229,217,<165,0>,<171,26>)","        } catch (IOException e) {
            throw Trace.error(Trace.TRANSFER_CORRUPTED);
        }
    }

    public void write(RowOutputInterface out) throws IOException, HsqlException {
        out.writeLong(id);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputText.java|(11132,209,<450,0>,<458,73>)","            return null;
        }

        data = StringConverter.hexToByteArray(s);

        return new JavaObjectData(data);
    }

    protected BinaryData readBinary() throws IOException, HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HsqlDeque.java|(4147,179,<138,0>,<144,9>)","        elementCount--;

        if (elementCount == 0) {
            firstindex = endindex = 0;
        } else if (endindex == 0) {
            endindex = list.length;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(4874,451,<184,0>,<203,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(15853,329,<497,0>,<508,31>)","                                          FileDialog.SAVE);

            // (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(4763,290,<180,0>,<191,41>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/OracleTransferHelper.java|(3346,1106,<91,0>,<119,74>)","    }

    String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,
                               String columnType, ResultSet columnDesc,
                               int columnIndex) throws SQLException {

        if (columnType.equals(""SERIAL"")) {
            String SeqName = new String(""_"" + columnDesc.getString(4)
                                        + ""_seq"");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }

            String DropSequence = ""DROP SEQUENCE "" + SeqName + "";"";

            t.Stmts.sDestDrop += DropSequence;
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
            String HSQLDB_func = Funcs[Idx][HSQLDB];
            int    iStartPos   = columnType.indexOf(HSQLDB_func);

            if (iStartPos >= 0) {
                String NewColumnType = columnType.substring(0, iStartPos);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/OtherType.java|(3752,177,<134,0>,<142,9>)","        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public String convertToString(Object a) {
        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputTextLog.java|(8420,174,<322,0>,<329,39>)","            return null;
        }

        return HsqlDateTime.dateValue(s);
    }

    protected Timestamp readTimestamp(Type type)
    throws IOException, HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBatchExecution.java|(1599,171,<31,0>,<37,26>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/preprocessor/Preprocessor.java|(20848,133,<604,0>,<610,5>)","                return true;
            }
            default : {
                return false;
            }
        }
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(15253,329,<480,0>,<491,31>)","                                          FileDialog.SAVE);

            // (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcParameterMetaDataTest.java|(1974,165,<46,0>,<53,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcConnectionTest.java|(5447,135,<173,0>,<180,5>)","        } catch (SQLException ex) {

        }

        if (sb.length() > 0) {
            fail(sb.toString());
        }
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcParameterMetaData.java|(9264,2763,<255,0>,<307,5>)","    }

    //----------------------------- JDBC 4.0 -----------------------------------
    // ------------------- java.sql.Wrapper implementation ---------------------

    /**
     * Returns an object that implements the given interface to allow access to
     * non-standard methods, or standard methods not exposed by the proxy.
     *
     * If the receiver implements the interface then the result is the receiver
     * or a proxy for the receiver. If the receiver is a wrapper
     * and the wrapped object implements the interface then the result is the
     * wrapped object or a proxy for the wrapped object. Otherwise return the
     * the result of calling <code>unwrap</code> recursively on the wrapped object
     * or a proxy for that result. If the receiver is not a
     * wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
     *
     * @param iface A Class defining an interface that the result must implement.
     * @return an object that implements the interface. May be a proxy for the actual implementing object.
     * @throws java.sql.SQLException If no object found that implements the interface
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
     public <T> T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {
            if (isWrapperFor(iface)) {
                return (T) this;
            }

            throw Util.invalidArgument(""iface: "" + iface);
        }


//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(75549,254,<2548,0>,<2555,13>)","            HsqlName schemaName;

            if (tokenType == Token.DEFAULT) {
                schemaName = null;
            } else {
                schemaName =
                    database.schemaManager.getSchemaHsqlName(tokenString);
            }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDataSourceTest.java|(2085,165,<50,0>,<57,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputTextLog.java|(2035,451,<47,0>,<58,29>)","import org.hsqldb.types.BinaryData;
import org.hsqldb.types.BlobData;
import org.hsqldb.types.BlobDataMemory;
import org.hsqldb.types.ClobData;
import org.hsqldb.types.ClobDataMemory;
import org.hsqldb.types.DateTimeType;
import org.hsqldb.types.IntervalMonthData;
import org.hsqldb.types.IntervalSecondData;
import org.hsqldb.types.IntervalType;
import org.hsqldb.types.JavaObjectData;
import org.hsqldb.types.TimeData;
import org.hsqldb.types.Type;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/OtherType.java|(3358,233,<119,0>,<126,70>)","    }

    public Object convertToTypeLimits(Object a) throws HsqlException {
        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/TransferDb.java|(1599,242,<31,0>,<39,26>)","package org.hsqldb.util;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/preprocessor/BasicResolver.java|(2765,167,<72,0>,<79,5>)","        }

        try {
            return file.getCanonicalFile();
        } catch (Exception e) {
            return file.getAbsoluteFile();
        }
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(13191,129,<447,0>,<454,9>)","        }
    }

    public String convertToSQLString(Object a) {

        if (a == null) {
            return ""NULL"";
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/AllSimpleTests.java|(1687,119,<37,0>,<42,5>)","        try {
            jbInit();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/ScaledRAFile.java|(9077,252,<259,0>,<265,33>)","            if (seekPosition >= fileLength) {
                return -1;
            }

            if (bufferDirty || seekPosition < bufferOffset
                    || seekPosition >= bufferOffset + buffer.length) {
                readIntoBuffer();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(19974,640,<485,0>,<508,16>)","        }
    }

    public static void main(String[] arg) {

        System.getProperties().put(""sun.java2d.noddraw"", ""true"");

        // (ulrivo): read all arguments from the command line
        String  lowerArg;
        String  urlid        = null;
        String  rcFile       = null;
        boolean autoConnect  = false;
        boolean urlidConnect = false;

        bMustExit = true;

        for (int i = 0; i < arg.length; i++) {
            lowerArg = arg[i].toLowerCase();

            if (lowerArg.length() > 1 && lowerArg.charAt(1) == '-') {
                lowerArg = lowerArg.substring(1);
            }

            i++;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(3309,198,<113,0>,<120,9>)","    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(90905,139,<3151,0>,<3158,9>)","            if (tokenType == Token.COMMA) {
                read();

                continue;
            }

            break;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestAllTypes.java|(1599,204,<31,0>,<38,26>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/PostgresTransferHelper.java|(2530,252,<71,0>,<78,68>)","        }

        return (type);
    }

    String fixupColumnDefRead(TransferTable t, ResultSetMetaData meta,
                              String columnType, ResultSet columnDesc,
                              int columnIndex) throws SQLException {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcConnectionTest.java|(2320,198,<58,0>,<67,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(13426,249,<430,0>,<446,23>)","    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(13344,230,<418,0>,<427,33>)","    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return a;
        }

        switch (otherType.type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(4960,506,<188,0>,<210,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(39429,228,<1046,0>,<1056,24>)","        }
    }

    public void keyPressed(KeyEvent k) {}

    public void keyReleased(KeyEvent k) {}

    public void keyTyped(KeyEvent k) {

        if (k.getKeyChar() == '\n' && k.isControlDown()) {
            k.consume();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(5768,116,<181,0>,<187,9>)","        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusTextField.java|(2330,178,<72,0>,<82,38>)","    }

    public void requestFocus() {
        super.requestFocus();
    }

    public void setChanged() {
        countChanges++;
    }

    public void setContent(String s) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(3230,216,<108,0>,<116,9>)","        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/UtilTest.java|(11631,246,<275,0>,<286,32>)","        super(testName);
    }
    
    protected void setUp() throws Exception {
        super.setUp();
    }
    
    protected void tearDown() throws Exception {
        super.tearDown();
    }
    
    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcDatabaseMetaData.java|(256131,1354,<5979,0>,<6004,88>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.9
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(1685,192,<36,0>,<42,24>)","import org.hsqldb.Expression;
import org.hsqldb.HsqlException;
import org.hsqldb.Library;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobData.java|(2785,210,<76,0>,<87,1>)","    public long getId();

    public void setId(long id);

    public void free();

    public boolean isClosed();

    public void setSession(SessionInterface session);

    public int getStreamBlockSize();
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(2990,405,<92,0>,<114,5>)","            return true;
        }

        return false;
    }

    public boolean put(int key, int value) {

        int oldSize = size();

        super.addOrRemove(key, value, null, null, false);

        return oldSize != size();
    }

    public boolean remove(int key) {

        int oldSize = size();

        super.addOrRemove(key, 0, null, null, true);

        return oldSize != size();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/preprocessor/Document.java|(1824,182,<38,0>,<43,22>)","import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(11124,200,<366,0>,<376,9>)","            return a;
        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcCallableStatement.java|(1841,254,<41,0>,<54,23>)","import java.util.Calendar;

//#ifdef JAVA2
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Ref;
import java.util.Map;

//#endif JAVA2
//#ifdef JDBC4
import java.sql.NClob;
import java.sql.RowId;
import java.sql.SQLXML;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(3431,233,<121,0>,<128,70>)","    }

    public Object convertToTypeLimits(Object a) throws HsqlException {
        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcParameterMetaData.java|(10569,1377,<279,0>,<305,88>)","            if (isWrapperFor(iface)) {
                return (T) this;
            }

            throw Util.invalidArgument(""iface: "" + iface);
        }


//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Types.java|(29730,229,<850,0>,<857,30>)","        switch (type) {

            case Types.SQL_BINARY :
            case Types.SQL_BLOB :
            case Types.SQL_CHAR :
            case Types.SQL_NCHAR :
            case Types.SQL_CLOB :
            case Types.NCLOB :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Function.java|(20454,211,<590,0>,<597,5>)","            sb.append(""["").append(argList[i].describe(session)).append(""]"");
        }

        sb.append("") returns "").append(dataType.getName());
        sb.append(""]\n"");

        return sb.toString();
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcParameterMetaDataTest.java|(1948,234,<45,0>,<56,32>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusTableForm.java|(1625,216,<33,0>,<39,26>)","import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcNClobTest.java|(2042,234,<49,0>,<60,32>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(120076,117,<2890,0>,<2897,5>)","                t.insertSys(row);
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestScripts.java|(4998,352,<136,0>,<150,5>)","    static void delete(String file) {

        try {
            new File(file).delete();
        } catch (Exception e) {}
    }

    static void deleteDatabase(String path) {

        delete(path + "".backup"");
        delete(path + "".properties"");
        delete(path + "".script"");
        delete(path + "".data"");
        delete(path + "".log"");
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(3389,352,<114,0>,<136,36>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(40076,239,<1075,0>,<1080,41>)","            windowClosing(null);
        } else if (s.equals(""Transfer"")) {
            Transfer.work(null);
        } else if (s.equals(""Dump"")) {
            Transfer.work(new String[]{ ""-d"" });
        } else if (s.equals(""Restore"")) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcBlob.java|(1599,172,<31,0>,<37,29>)","package org.hsqldb.jdbc;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Blob;
import java.sql.SQLException;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Transfer.java|(28735,463,<925,0>,<954,46>)","        fMain.dispose();

        if (bMustExit) {
            System.exit(0);
        }
    }

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowDeiconified(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowIconified(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowOpened(WindowEvent e) {}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSelf.java|(8844,174,<250,0>,<256,5>)","                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            print(""TestSelf init error: "" + e.getMessage());
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestLobs.java|(2016,144,<51,0>,<59,47>)","        super(name);
    }

    protected void setUp() {

        super.setUp();

        try {
            connection = super.newConnection();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Tree.java|(8398,291,<316,0>,<326,34>)","            return;
        }

        g.setColor(SystemColor.control);
        g.fillRect(iWidth, iHeight, iSbWidth, iSbHeight);

        if (iImage == null) {
            iImage = createImage(iWidth, iHeight);
            gImage = iImage.getGraphics();

            gImage.setFont(fFont);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcParameterMetaData.java|(10569,1458,<279,0>,<307,5>)","            if (isWrapperFor(iface)) {
                return (T) this;
            }

            throw Util.invalidArgument(""iface: "" + iface);
        }


//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(5069,475,<126,0>,<133,30>)","        + ""Copyright (c) 1995-2000, The Hypersonic SQL Group.\n""
        + ""Copyright (c) 2001-2007, The HSQL Development Group.\n""
        + ""http://hsqldb.org  (User Guide available at this site).\n\n\n""
        + ""You may use and redistribute according to the HSQLDB\n""
        + ""license documented in the source code and at the web\n""
        + ""site above.""          //
        + (TT_AVAILABLE ? ""\n\nTransferTool options are available.""
                        : """");
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetMetaDataTest.java|(2320,1385,<61,0>,<85,27>)","    }

    private final String select =
        ""select id as           id_column, "" +                            // 1
               ""c_bigint        as bigint_column, "" +
               ""c_binary        as binary_column, "" +
               ""c_boolean       as boolean_column, "" +
               ""c_char          as char_column, "" +                       // 5
               ""c_date          as date_column, "" +
               ""c_decimal       as decimal_column, "" +
               ""c_double        as double_column, "" +
               ""c_float         as float_column, "" +
               ""c_integer       as integer_column, "" +                    // 10
               ""c_longvarbinary as longvarbinary_column, "" +
               ""c_longvarchar   as longvarchar_column, "" +
               ""c_object        as object_column, "" +
               ""c_real          as real_column, "" +
               ""c_smallint      as smallint_column, "" +                   // 15
               ""c_time          as time_column, "" +
               ""c_timestamp     as timestamp_column, "" +
               ""c_tinyint       as tinyint_column, "" +
               ""c_varbinary     as varbinary_column, "" +
               ""c_varchar       as varchar_column, "" +                    // 20
               ""c_varchar_ignorecase as varchar_ignorecase_column "" +
          ""from all_types"";"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Tree.java|(7308,1033,<266,0>,<313,35>)","        int v = iY / iRowHeight,
            h = iHeight / iRowHeight;

        sbVert.setValues(v, h, 0, iRowCount + 1);

        iX = sbHoriz.getValue();
        iY = iRowHeight * sbVert.getValue();
    }

    /**
     * Method declaration
     *
     *
     * @param e
     *
     * @return
     */

// fredt@users 20020130 - comment by fredt
// to remove this deprecated method we need to rewrite the Tree class as a
// ScrollPane component
    public boolean handleEvent(Event e) {

        switch (e.id) {

            case Event.SCROLL_LINE_UP :
            case Event.SCROLL_LINE_DOWN :
            case Event.SCROLL_PAGE_UP :
            case Event.SCROLL_PAGE_DOWN :
            case Event.SCROLL_ABSOLUTE :
                iX = sbHoriz.getValue();
                iY = iRowHeight * sbVert.getValue();

                repaint();

                return true;
        }

        return super.handleEvent(e);
    }

    /**
     * Method declaration
     *
     *
     * @param g
     */
    public void paint(Graphics g) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(15726,868,<494,0>,<519,31>)","            }
        } else if (s.equals(""Save Result..."")) {
            FileDialog f = new FileDialog(fMain, ""Save Result"",
                                          FileDialog.SAVE);

            // (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
                showResultInText();
                DatabaseManagerCommon.writeFile(f.getDirectory() + file,
                                                txtResult.getText());
            }
        } else if (s.equals(""Results in Text"")) {
            iResult = 1;

            pResult.removeAll();
            pResult.add(""Center"", txtResult);
            pResult.doLayout();
            showResultInText();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(16640,300,<521,0>,<528,39>)","        } else if (s.equals(""AutoCommit on"")) {
            try {
                cConn.setAutoCommit(true);
            } catch (SQLException e) {}
        } else if (s.equals(""AutoCommit off"")) {
            try {
                cConn.setAutoCommit(false);
            } catch (SQLException e) {}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/server/WebServer.java|(6027,447,<143,0>,<151,57>)","        HsqlProperties fileProps =
            ServerConfiguration.getPropertiesFromFile(propsPath);
        HsqlProperties props = fileProps == null ? new HsqlProperties()
                                                 : fileProps;
        HsqlProperties stringProps = HsqlProperties.argArrayToProps(args,
            ServerConstants.SC_KEY_PREFIX);

        if (stringProps != null) {
            if (stringProps.getErrorKeys().length != 0) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcSavepointTest.java|(4237,171,<123,0>,<130,1>)","        assertEquals(expResult, result);
    }

    public static void main(java.lang.String[] argList) {

        junit.textui.TestRunner.run(suite());
    }   
}"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCacheSize.java|(1652,203,<34,0>,<40,24>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Parser.java|(106744,160,<3710,0>,<3720,5>)","            }

            if (tokenType == Token.COMMA) {
                read();

                continue;
            }

            break;
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/OtherType.java|(3223,116,<110,0>,<116,9>)","        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetMetaDataTest.java|(9970,424,<269,0>,<279,36>)","               ""bigint_column"",
               ""binary_column"",
               ""boolean_column"",
               ""char_column"",                       // 5
               ""date_column"",
               ""decimal_column"",
               ""double_column"",
               ""float_column"",
               ""integer_column"",                    // 10
               ""longvarbinary_column"",
               ""longvarchar_column"","
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NullType.java|(2115,149,<57,0>,<65,5>)","    }

    public int getSQLGenericTypeNumber() {
        return type;
    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ConnectionDialogSwing.java|(13319,335,<379,0>,<393,1>)","        }
    }

    public void itemStateChanged(ItemEvent e) {

        String s = (String) e.getItem();

        for (int i = 0; i < connTypes.length; i++) {
            if (s.equals(connTypes[i][0])) {
                mDriver.setText(connTypes[i][1]);
                mURL.setText(connTypes[i][2]);
            }
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/CommandParser.java|(20593,132,<676,0>,<682,5>)","                break;
            }
            default : {
                throw unexpectedToken();
            }
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(46086,3884,<1161,0>,<1249,5>)","    }

    //--------------------------JDBC 3.0-----------------------------

    /**
     * <!-- start generic documentation -->
     * Moves to this <code>Statement</code> object's next result, deals with
     * any current <code>ResultSet</code> object(s) according  to the instructions
     * specified by the given flag, and returns
     * <code>true</code> if the next result is a <code>ResultSet</code> object.
     *
     * <P>There are no more results when the following is true:
     * <PRE>
     *     // stmt is a Statement object
     *     ((stmt.getMoreResults(current) == false) && (stmt.getUpdateCount() == -1))
     * </PRE>
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, HSQLDB does not yet support this feature. <p>
     *
     * Calling this method always throws an <code>SQLException</code>,
     * stating that the function is not supported.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param current one of the following <code>Statement</code>
     *        constants indicating what should happen to current
     *        <code>ResultSet</code> objects obtained using the method
     *        <code>getResultSet</code>:
     *        <code>Statement.CLOSE_CURRENT_RESULT</code>,
     *        <code>Statement.KEEP_CURRENT_RESULT</code>, or
     *        <code>Statement.CLOSE_ALL_RESULTS</code>
     * @return <code>true</code> if the next result is a <code>ResultSet</code>
     *         object; <code>false</code> if it is an update count or there are no
     *         more results
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code> or the argument
     *             supplied is not one of the following:
     *        <code>Statement.CLOSE_CURRENT_RESULT</code>,
     *        <code>Statement.KEEP_CURRENT_RESULT</code>, or
     *        <code>Statement.CLOSE_ALL_RESULTS</code>
     * @since JDK 1.4, HSQLDB 1.7
     * @see #execute
     */
//#ifdef JDBC3
    public boolean getMoreResults(int current) throws SQLException {
        throw Util.notSupported();
    }

//#endif JDBC3

    /**
     * <!-- start generic documentation -->
     * Retrieves any auto-generated keys created as a result of executing this
     * <code>Statement</code> object. If this <code>Statement</code> object did
     * not generate any keys, an empty <code>ResultSet</code>
     * object is returned.
     * <p>(JDBC4 clarification:)
     * <p><B>Note:</B>If the columns which represent the auto-generated keys were not specified,
     * the JDBC driver implementation will determine the columns which best represent the auto-generated keys.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Supported in 1.9.0.x <p>
     *
     * If column names or indexes provided by the user in the executeUpdate()
     * method calls are not correct, an empty result is returned.
     *
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return a <code>ResultSet</code> object containing the auto-generated key(s)
     *         generated by the execution of this <code>Statement</code> object
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
     * @since JDK 1.4, HSQLDB 1.7
     */
//#ifdef JDBC3
    public ResultSet getGeneratedKeys() throws SQLException {
        return getGeneratedResultSet();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(8757,490,<284,0>,<293,44>)","            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(87361,163,<3009,0>,<3016,13>)","                if (tokenType == Token.COMMA) {
                    read();

                    continue;
                }

                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(3747,451,<134,0>,<153,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(2050,214,<50,0>,<56,34>)","import java.awt.Panel;
import java.awt.TextArea;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcDataSource.java|(10720,1437,<280,0>,<307,5>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyLongValueHashMap.java|(2400,170,<62,0>,<69,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            return longValueTable[lookup];
        }

        throw new NoSuchElementException();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataRemoteClient.java|(1758,217,<39,0>,<44,43>)","import org.hsqldb.HsqlException;
import org.hsqldb.SessionInterface;
import org.hsqldb.Trace;
import org.hsqldb.result.ResultLob;
import org.hsqldb.rowio.RowInputInterface;
import org.hsqldb.rowio.RowOutputInterface;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataID.java|(3361,141,<110,0>,<119,5>)","        return null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(1775,176,<39,0>,<44,34>)","import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
import org.hsqldb.lib.java.JavaSystem;
import org.hsqldb.store.ValuePool;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBug778213.java|(5778,158,<192,0>,<198,1>)","        failures = result.failures();

        while (failures.hasMoreElements()) {
            System.out.println(failures.nextElement());
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(60087,133,<1708,0>,<1714,5>)","        } else {
            showResultInText();
        }

        txtCommand.selectAll();
        txtCommand.requestFocus();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ConnectionDialog.java|(9403,192,<333,0>,<339,5>)","        p.add(""South"", createLabel(""""));
        p.add(""East"", createLabel(""""));
        p.add(""West"", createLabel(""""));
        p.setBackground(SystemColor.control);

        return p;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/CommandParser.java|(20616,109,<677,0>,<682,5>)","            }
            default : {
                throw unexpectedToken();
            }
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcClobTest.java|(5644,303,<173,0>,<185,5>)","            result.flush();

            assertEquals(1L, clob.length());

            result.close();

            assertEquals(4L, clob.length());

            assertEquals(""Task"", clob.getSubString(1, 4));
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/TextCache.java|(19191,213,<643,0>,<650,9>)","    }

    public synchronized CachedObject get(int i, PersistentStore store,
                                         boolean keep) throws HsqlException {

        if (i < 0) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(4281,157,<157,0>,<164,29>)","            return size() != oldSize;
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(20615,1142,<510,0>,<541,9>)","            if (lowerArg.equals(""-driver"")) {
                defDriver   = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals(""-url"")) {
                defURL      = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals(""-user"")) {
                defUser     = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals(""-password"")) {
                defPassword = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals(""-urlid"")) {
                urlid        = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals(""-rcfile"")) {
                rcFile       = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals(""-dir"")) {
                defDirectory = arg[i];
            } else if (lowerArg.equals(""-script"")) {
                defScript = arg[i];
            } else if (lowerArg.equals(""-noexit"")) {
                bMustExit = false;

                i--;
            } else {
                showUsage();

                return;
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(14010,198,<449,0>,<456,9>)","    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(4159,341,<153,0>,<167,41>)","        }

        public Object get(Object key) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(3270,471,<109,0>,<136,36>)","        int oldSize = size();

        super.addOrRemove(key, 0, null, null, true);

        return oldSize != size();
    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(71634,1402,<1748,0>,<1774,5>)","            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/navigator/DataRowSetNavigator.java|(9250,294,<338,0>,<347,9>)","        out.writeLong(id);
        out.writeInt(size);
        out.writeInt(0);    // offset
        out.writeInt(size);

        while (hasNext()) {
            Object[] data = (Object[]) getNext();

            out.writeData(meta.getColumnCount(), meta.colTypes, data, null, null);
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(1599,201,<31,0>,<38,38>)","package org.hsqldb.types;

import org.hsqldb.HsqlException;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
import org.hsqldb.lib.StringConverter;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Library.java|(6158,222,<132,0>,<139,12>)","            ""ACOS"", ""java.lang.Math.acos""
        }, {
            ""ASIN"", ""java.lang.Math.asin""
        }, {
            ""ATAN"", ""java.lang.Math.atan""
        }, {
            ""ATAN2"", ""java.lang.Math.atan2""
        }, {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(76083,1011,<1796,0>,<1825,5>)","        if (resultIn.isError()) {
            throw Util.sqlException(resultIn);
        }

        RowSetNavigator navigator    = resultIn.getNavigator();
        int[]           updateCounts = new int[navigator.getSize()];

        for (int i = 0; i < updateCounts.length; i++) {
            Object[] data = (Object[]) navigator.getNext();

            updateCounts[i] = ((Integer) data[0]).intValue();
        }

//#ifdef JAVA2
        if (updateCounts.length != batchCount) {
            if (errorResult == null) {
                throw new BatchUpdateException(updateCounts);
            } else {
                errorResult.getMainString();

                throw new BatchUpdateException(errorResult.getMainString(),
                                               errorResult.getSubString(),
                                               errorResult.getErrorCode(),
                                               updateCounts);
            }
        }

//#endif JAVA2
        return updateCounts;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(27738,700,<923,0>,<946,9>)","                } else {
                    if (currentValue >= limits[currentPart]) {
                        throw Trace.error(Trace.NUMERIC_VALUE_OUT_OF_RANGE);
                    }

                    if (currentDigits != 2) {
                        throw Trace.error(Trace.UNEXPECTED_TOKEN);
                    }

                    totalValue += currentValue * factors[currentPart];
                }

                currentPart++;

                currentValue  = 0;
                currentDigits = 0;
            }
        }

        for (; i < s.length(); i++) {
            if (s.charAt(i) != ' ') {
                throw Trace.error(Trace.UNEXPECTED_TOKEN);
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/JdbcSuite.java|(1960,409,<46,0>,<65,32>)","        super(testName);
    }

    // inherit javadocs
    protected void setUp() throws Exception {
        super.setUp();
    }


    // inherit javadocs
    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * suite method automatically generated by JUnit module
     *
     * @return the JDBC test suite
     */
    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDataSourceTest.java|(2059,234,<49,0>,<60,32>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(98886,139,<2503,0>,<2511,5>)","                    t.insertSys(row);
                }
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputText.java|(1887,451,<43,0>,<54,29>)","import org.hsqldb.types.BinaryData;
import org.hsqldb.types.BlobData;
import org.hsqldb.types.BlobDataMemory;
import org.hsqldb.types.ClobData;
import org.hsqldb.types.ClobDataMemory;
import org.hsqldb.types.DateTimeType;
import org.hsqldb.types.IntervalMonthData;
import org.hsqldb.types.IntervalSecondData;
import org.hsqldb.types.IntervalType;
import org.hsqldb.types.JavaObjectData;
import org.hsqldb.types.TimeData;
import org.hsqldb.types.Type;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(3250,641,<107,0>,<143,36>)","        int oldSize = size();

        super.addOrRemove(key, value, null, null, false);

        return oldSize != size();
    }

    public boolean remove(long key) {

        int oldSize = size();

        super.addOrRemove(key, 0, null, null, true);

        return oldSize != size();
    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(17691,393,<574,0>,<581,52>)","                    HsqlName mainName = database.nameManager.newAutoName(""REF"",
                        c.getName().name);

                    c.core.uniqueName = uniqueConstraint.getName();
                    c.core.mainName   = mainName;
                    c.core.mainIndex  = mainIndex;
                    c.core.refTable   = table;
                    c.core.refName    = c.getName();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(3774,290,<130,0>,<141,41>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(109538,117,<2794,0>,<2801,5>)","                t.insertSys(row);
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobData.java|(1599,200,<31,0>,<39,35>)","package org.hsqldb.types;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;

import org.hsqldb.HsqlException;
import org.hsqldb.SessionInterface;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(4954,178,<171,0>,<180,9>)","        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSchemaParse.java|(1599,169,<31,0>,<37,26>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(121582,117,<3142,0>,<3149,5>)","                t.insertSys(row);
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBug785429.java|(4513,299,<137,0>,<147,34>)","    }

    public static void main(String[] args) throws Exception {

        TestResult            result;
        TestCase              test;
        java.util.Enumeration exceptions;
        java.util.Enumeration failures;
        int                   count;

        result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputText.java|(2109,229,<49,0>,<54,29>)","import org.hsqldb.types.IntervalMonthData;
import org.hsqldb.types.IntervalSecondData;
import org.hsqldb.types.IntervalType;
import org.hsqldb.types.JavaObjectData;
import org.hsqldb.types.TimeData;
import org.hsqldb.types.Type;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(2531,149,<68,0>,<76,5>)","    }

    public int getSQLGenericTypeNumber() {
        return type;
    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/UtilTest.java|(11631,206,<275,0>,<284,5>)","        super(testName);
    }
    
    protected void setUp() throws Exception {
        super.setUp();
    }
    
    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputBinary.java|(1891,295,<43,0>,<50,29>)","import org.hsqldb.types.BinaryData;
import org.hsqldb.types.BlobData;
import org.hsqldb.types.ClobData;
import org.hsqldb.types.IntervalMonthData;
import org.hsqldb.types.IntervalSecondData;
import org.hsqldb.types.JavaObjectData;
import org.hsqldb.types.TimeData;
import org.hsqldb.types.Type;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Expression.java|(40910,124,<1344,0>,<1351,9>)","        }
    }

    public boolean equals(Object other) {

        if (other == this) {
            return true;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/scriptio/ScriptReaderBase.java|(1629,176,<33,0>,<39,24>)","import java.io.IOException;

import org.hsqldb.Database;
import org.hsqldb.HsqlException;
import org.hsqldb.NumberSequence;
import org.hsqldb.Session;
import org.hsqldb.Table;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(2852,239,<86,0>,<99,5>)","    }

    public int getOrderedMatchCount(int[] array) {

        int i = 0;

        for (; i < array.length; i++) {
            if (!super.containsKey(array[i])) {
                break;
            }
        }

        return i;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(2054,289,<51,0>,<60,29>)","        super(name);
    }

    /* Implements the TestLikePredicate test */
    public void test() throws Exception {

        Connection        conn = newConnection();
        Statement         stmt = conn.createStatement();
        PreparedStatement pstmt;
        ResultSet         rs;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcDataSource.java|(10639,1518,<279,0>,<307,5>)","    public <T> T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {
        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSubselect.java|(1653,177,<34,0>,<40,32>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import junit.framework.TestCase;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(4143,341,<153,0>,<167,41>)","        }

        public Object get(Object key) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcNClobTest.java|(2068,165,<50,0>,<57,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(1857,162,<42,0>,<47,24>)","import org.hsqldb.HsqlException;
import org.hsqldb.Library;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(7422,151,<239,0>,<246,9>)","        }
    }

    public Object convertToTypeLimits(Object a) throws HsqlException {

        if (precision == 0) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(13334,205,<417,0>,<425,9>)","        }
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/preprocessor/Preprocessor.java|(22536,167,<660,0>,<667,5>)","        }

        try {
            return file.getCanonicalFile();
        } catch (Exception e) {
            return file.getAbsoluteFile();
        }
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(26110,1160,<877,0>,<911,28>)","        }

        for (; currentPart <= lastPart; i++) {
            boolean endOfPart = false;

            if (i > s.length()) {
                break;
            } else if (i == s.length()) {
                if (currentPart == lastPart) {
                    endOfPart = true;
                } else if (currentPart == FRACTION_PART_INDEX - 1) {
                    endOfPart = true;
                } else {
                    throw Trace.error(Trace.UNEXPECTED_TOKEN);
                }
            } else {
                int character = s.charAt(i);

                if (character >= '0' && character <= '9') {
                    int digit = character - '0';

                    currentValue *= 10;
                    currentValue += digit;

                    currentDigits++;
                } else if (character == separators[currentPart]) {
                    endOfPart = true;
                } else if (character == ' ' && currentPart == lastPart) {
                    endOfPart = true;
                } else {
                    throw Trace.error(Trace.UNEXPECTED_TOKEN);
                }
            }

            if (endOfPart) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/index/DiskNode.java|(7701,177,<254,0>,<263,5>)","    }

    Object[] getData() throws HsqlException {

        if (Trace.DOASSERT) {
            Trace.doAssert(iBalance != -2);
        }

        return rData.getData();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(2309,149,<63,0>,<70,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            return objectValueTable[lookup];
        }

        return null;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputTextLog.java|(8907,222,<346,0>,<353,39>)","            return null;
        }

        return (IntervalMonthData) ((IntervalType) type).newInterval(s);
    }

    protected IntervalSecondData readDaySecondInterval(Type type)
    throws IOException, HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(3539,139,<121,0>,<130,5>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DIProcedureInfo.java|(5353,206,<156,0>,<165,13>)","            case Types.SQL_TIME : {
                size = 8;

                break;
            }
            case Types.SQL_TIMESTAMP : {
                size = 12;

                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(30587,414,<760,0>,<765,84>)","            addColumn(t, ""BUFFER_LENGTH"", Types.SQL_INTEGER);
            addColumn(t, ""DECIMAL_DIGITS"", Types.SQL_SMALLINT);
            addColumn(t, ""PSEUDO_COLUMN"", Types.SQL_SMALLINT, false);    // not null
            addColumn(t, ""TABLE_CAT"", Types.SQL_VARCHAR);
            addColumn(t, ""TABLE_SCHEM"", Types.SQL_VARCHAR);
            addColumn(t, ""TABLE_NAME"", Types.SQL_VARCHAR, false);        // not null
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(23230,490,<699,0>,<708,44>)","            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(24375,389,<769,0>,<776,53>)","        } else if (s.equals(""SCRIPT"")) {
            showHelp(DatabaseManagerCommon.scriptHelp);
        } else if (s.equals(""SHUTDOWN"")) {
            showHelp(DatabaseManagerCommon.shutdownHelp);
        } else if (s.equals(""SET"")) {
            showHelp(DatabaseManagerCommon.setHelp);
        } else if (s.equals(""Test Script"")) {
            showHelp(DatabaseManagerCommon.testHelp);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(2813,624,<85,0>,<121,36>)","        return super.containsKey(key);
    }

    public int getOrderedMatchCount(int[] array) {

        int i = 0;

        for (; i < array.length; i++) {
            if (!super.containsKey(array[i])) {
                break;
            }
        }

        return i;
    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(4147,157,<147,0>,<154,29>)","            return size() != oldSize;
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(4819,506,<181,0>,<203,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcSQLXMLTest.java|(1656,182,<32,0>,<37,22>)","import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(13433,217,<432,0>,<444,9>)","    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(1626,162,<33,0>,<38,24>)","import org.hsqldb.HsqlException;
import org.hsqldb.Library;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBug1191815.java|(3378,299,<98,0>,<108,34>)","    }

    public static void main(String[] args) throws Exception {

        TestResult            result;
        TestCase              test;
        java.util.Enumeration exceptions;
        java.util.Enumeration failures;
        int                   count;

        result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java|(37344,1356,<911,0>,<936,88>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/scriptio/ScriptWriterBase.java|(8329,220,<245,0>,<251,5>)","        } catch (IOException e) {
            throw Trace.error(Trace.FILE_IO_ERROR, Trace.Message_Pair,
                              new Object[] {
                e.toString(), outFile
            });
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Grid.java|(9073,291,<348,0>,<358,34>)","            return;
        }

        g.setColor(SystemColor.control);
        g.fillRect(iWidth, iHeight, iSbWidth, iSbHeight);

        if (iImage == null) {
            iImage = createImage(iWidth, iHeight);
            gImage = iImage.getGraphics();

            gImage.setFont(fFont);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataRemoteClient.java|(1654,173,<34,0>,<40,35>)","import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;

import org.hsqldb.HsqlException;
import org.hsqldb.SessionInterface;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Parser.java|(97855,109,<3450,0>,<3455,5>)","            }
            default : {
                throw unexpectedToken();
            }
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestHashStructures.java|(17691,171,<536,0>,<545,44>)","    }

    int nextIntRandom(Random r, int range) {

        int b = Math.abs(r.nextInt());

        return b % range;
    }

    public static void main(String[] argv) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputBinary.java|(6064,325,<210,0>,<221,49>)","    }

    protected void writeYearMonthInterval(IntervalMonthData o, Type type) {
        this.writeBytes(type.convertToString(o));
    }

    protected void writeDaySecondInterval(IntervalSecondData o, Type type) {
        this.writeBytes(type.convertToString(o));
    }


    protected void writeOther(JavaObjectData o) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcSavepointTest.java|(2009,234,<47,0>,<58,32>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public static Test suite() {"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(58191,132,<1947,0>,<1953,5>)","                break;
            }
            default : {
                throw unexpectedToken();
            }
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(3389,139,<114,0>,<123,5>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(12330,366,<395,0>,<413,9>)","    }

    /**
     * Method declaration
     *
     *
     * @param ev
     */
    public void actionPerformed(ActionEvent ev) {

        String s = ev.getActionCommand();

        if (s == null) {
            if (ev.getSource() instanceof MenuItem) {
                MenuItem i;

                s = ((MenuItem) ev.getSource()).getLabel();
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcNClobTest.java|(6205,680,<195,0>,<221,39>)","        try {
            clob.setString(1L, ""T"");

            assertEquals(1L, clob.length());

            Writer result = clob.setCharacterStream(2);

            result.write(""ask"");
            result.flush();

            assertEquals(1L, clob.length());

            result.close();

            assertEquals(4L, clob.length());

            assertEquals(""Task"", clob.getSubString(1, 4));
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }

    /**
     * Test of truncate method, of class org.hsqldb.jdbc.jdbcNClob.
     */
    public void testTruncate() throws Exception {
        System.out.println(""truncate"");"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(1599,201,<31,0>,<38,38>)","package org.hsqldb.types;

import org.hsqldb.HsqlException;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
import org.hsqldb.lib.StringConverter;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(29333,128,<907,0>,<913,9>)","        }
    }

    public String convertToSQLString(Object a) {
        if (a == null) {
            return ""NULL"";
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(1626,174,<33,0>,<38,38>)","import org.hsqldb.HsqlException;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
import org.hsqldb.lib.StringConverter;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/server/Server.java|(14162,469,<358,0>,<370,72>)","                return;
            }

            props.addProperties(stringProps);
        }

        ServerConfiguration.translateDefaultDatabaseProperty(props);

        // Standard behaviour when started from the command line
        // is to halt the VM when the server shuts down.  This may, of
        // course, be overridden by whatever, if any, security policy
        // is in place.
        ServerConfiguration.translateDefaultNoSystemExitProperty(props);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/HsqldbTransferHelper.java|(2286,252,<62,0>,<69,68>)","        }

        return (type);
    }

    String fixupColumnDefRead(TransferTable t, ResultSetMetaData meta,
                              String columnType, ResultSet columnDesc,
                              int columnIndex) throws SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(13334,240,<417,0>,<427,33>)","        }
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return a;
        }

        switch (otherType.type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(35081,117,<870,0>,<877,5>)","                t.insertSys(row);
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(71296,4236,<1690,0>,<1775,37>)","    }

    //------------------------- JDBC 2.0 - overriden methods -------------------

    /**
     * <!-- start generic documentation -->
     * Submits a batch of commands to the database for execution and
     * if all commands execute successfully, returns an array of update counts.
     * The <code>int</code> elements of the array that is returned are ordered
     * to correspond to the commands in the batch, which are ordered
     * according to the order in which they were added to the batch.
     * The elements in the array returned by the method <code>executeBatch</code>
     * may be one of the following:
     * <OL>
     * <LI>A number greater than or equal to zero -- indicates that the
     * command was processed successfully and is an update count giving the
     * number of rows in the database that were affected by the command's
     * execution
     * <LI>A value of <code>SUCCESS_NO_INFO</code> -- indicates that the command was
     * processed successfully but that the number of rows affected is
     * unknown
     * <P>
     * If one of the commands in a batch update fails to execute properly,
     * this method throws a <code>BatchUpdateException</code>, and a JDBC
     * driver may or may not continue to process the remaining commands in
     * the batch.  However, the driver's behavior must be consistent with a
     * particular DBMS, either always continuing to process commands or never
     * continuing to process commands.  If the driver continues processing
     * after a failure, the array returned by the method
     * <code>BatchUpdateException.getUpdateCounts</code>
     * will contain as many elements as there are commands in the batch, and
     * at least one of the elements will be the following:
     * <P>
     * <LI>A value of <code>EXECUTE_FAILED</code> -- indicates that the command failed
     * to execute successfully and occurs only if a driver continues to
     * process commands after a command fails
     * </OL>
     * <P>
     * A driver is not required to implement this method.
     * The possible implementations and return values have been modified in
     * the Java 2 SDK, Standard Edition, version 1.3 to
     * accommodate the option of continuing to proccess commands in a batch
     * update after a <code>BatchUpdateException</code> obejct has been thrown. <p>
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Starting with HSQLDB 1.7.2, this feature is supported. <p>
     *
     * HSQLDB stops execution of commands in a batch when one of the commands
     * results in an exception. The size of the returned array equals the
     * number of commands that were executed successfully.<p>
     *
     * When the product is built under the JAVA1 target, an exception
     * is never thrown and it is the responsibility of the client software to
     * check the size of the  returned update count array to determine if any
     * batch items failed.  To build and run under the JAVA2 target, JDK/JRE
     * 1.3 or higher must be used.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return an array of update counts containing one element for each
     * command in the batch.  The elements of the array are ordered according
     * to the order in which commands were added to the batch.
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code> or the
     * driver does not support batch statements. Throws {@link BatchUpdateException}
     * (a subclass of <code>SQLException</code>) if one of the commands sent to the
     * database fails to execute properly or attempts to return a result set.
     *
     *
     * @see #addBatch
     * @see DatabaseMetaData#supportsBatchUpdates
     * @since JDK 1.3 (JDK 1.1.x developers: read the overview for
     * jdbcStatement)
     */
    public int[] executeBatch() throws SQLException {

        checkClosed();
        connection.clearWarningsNoCheck();

        generatedResult = null;

        if (batchResultOut == null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/TableWorks.java|(6178,309,<159,0>,<166,40>)","        HsqlName mainName = database.nameManager.newAutoName(""REF"",
            c.getName().name);

        c.core.uniqueName = uniqueConstraint.getName();
        c.core.mainName   = mainName;
        c.core.mainIndex  = mainIndex;
        c.core.refTable   = table;
        c.core.refName    = c.getName();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(11146,178,<367,0>,<376,9>)","        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(10202,5435,<250,0>,<384,5>)","    }

    //----------------------------------------------------------------------

    /**
     * <!-- start generic documentation -->
     * Retrieves the maximum number of bytes that can be
     * returned for character and binary column values in a <code>ResultSet</code>
     * object produced by this <code>Statement</code> object.
     * This limit applies only to  <code>BINARY</code>, <code>VARBINARY</code>,
     * <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
     * (JDBC4 new:) <code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>
     * and <code>LONGVARCHAR</code> columns.  If the limit is exceeded, the
     * excess data is silently discarded.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.7.2, HSQLDB always returns zero, meaning there
     * is no limit.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return the current column size limit for columns storing character and
     *         binary values; zero means there is no limit
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #setMaxFieldSize
     */
    public int getMaxFieldSize() throws SQLException {

        checkClosed();

        return 0;
    }

    /**
     * <!-- start generic documentation -->
     * (JDBC4 clarification:) Sets the limit for the maximum number of bytes in a <code>ResultSet</code>
     * Sets the limit for the maximum number of bytes that can be returned for
     * character and binary column values in a <code>ResultSet</code>
     * object produced by this <code>Statement</code> object.
     *
     * This limit applies
     * only to <code>BINARY</code>, <code>VARBINARY</code>,
     * <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
     * (JDBC4 new:) <code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code> and
     * <code>LONGVARCHAR</code> fields.  If the limit is exceeded, the excess data
     * is silently discarded. For maximum portability, use values
     * greater than 256.
     * <!-- emd generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * To present, calls to this method are simply ignored; HSQLDB always
     * stores the full number of bytes when dealing with any of the field types
     * mentioned above. These types all have an absolute maximum element upper
     * bound determined by the Java array index limit
     * java.lang.Integer.MAX_VALUE.  For XXXBINARY types, this translates to
     * Integer.MAX_VALUE bytes.  For XXXCHAR types, this translates to
     * 2 * Integer.MAX_VALUE bytes (2 bytes / character). <p>
     *
     * In practice, field sizes are limited to values much smaller than the
     * absolute maximum element upper bound, in particular due to limits imposed
     * on the maximum available Java heap memory.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param max the new column size limit in bytes; zero means there is no limit
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     *            or the condition max >= 0 is not satisfied
     * @see #getMaxFieldSize
     */
    public void setMaxFieldSize(int max) throws SQLException {

        checkClosed();

        if (max < 0) {
            throw Util.outOfRangeArgument();
        }
    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the maximum number of rows that a
     * <code>ResultSet</code> object produced by this
     * <code>Statement</code> object can contain.  If this limit is exceeded,
     * the excess rows are silently dropped.
     * <!-- start generic documentation -->
     *
     * @return the current maximum number of rows for a <code>ResultSet</code>
     *         object produced by this <code>Statement</code> object;
     *         zero means there is no limit
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #setMaxRows
     */
    public int getMaxRows() throws SQLException {

        checkClosed();

        return maxRows;
    }

    /**
     * <!-- start generic documentation -->
     * (JDBC4 clarification:)
     * Sets the limit for the maximum number of rows that any
     * <code>ResultSet</code> object  generated by this <code>Statement</code>
     * object can contain to the given number.
     * If the limit is exceeded, the excess
     * rows are silently dropped.
     * <!-- end generic documentation -->
     *
     * @param max the new max rows limit; zero means there is no limit
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     *            or the condition max >= 0 is not satisfied
     * @see #getMaxRows
     */
    public void setMaxRows(int max) throws SQLException {

        checkClosed();

        if (max < 0) {
            throw Util.outOfRangeArgument();
        }

        maxRows = max;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestLibSpeed.java|(2738,715,<74,0>,<98,12>)","        }, {
            ""PI"", ""org.hsqldb.Library.pi""
        }, {
            ""POWER"", ""java.lang.Math.pow""
        }, {
            ""RADIANS"", ""java.lang.Math.toRadians""
        }, {
            ""RAND"", ""java.lang.Math.random""
        }, {
            ""ROUND"", ""org.hsqldb.Library.round""
        }, {
            ""SIGN"", ""org.hsqldb.Library.sign""
        }, {
            ""SIN"", ""java.lang.Math.sin""
        }, {
            ""SQRT"", ""java.lang.Math.sqrt""
        }, {
            ""TAN"", ""java.lang.Math.tan""
        }, {
            ""TRUNCATE"", ""org.hsqldb.Library.truncate""
        }, {
            ""BITAND"", ""org.hsqldb.Library.bitand""
        }, {
            ""BITOR"", ""org.hsqldb.Library.bitor""
        }, {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongDeque.java|(5052,249,<200,0>,<207,52>)","            firstindex++;

            if (firstindex == list.length) {
                firstindex = 0;
            }
        } else {
            System.arraycopy(list, target + 1, list, target,
                             endindex - target - 1);
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcBlobTest.java|(2076,165,<50,0>,<57,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(23916,134,<609,0>,<615,30>)","        if (c == null) {
            return;
        }

        if (cConn != null) {
            try {
                cConn.close();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataID.java|(3382,120,<111,0>,<119,5>)","    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(4604,506,<167,0>,<189,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/PostgresTransferHelper.java|(5103,440,<144,0>,<163,24>)","                NewColumnType += columnType.substring(iStartPos
                                                      + HSQLDB_func.length());
                columnType = NewColumnType;
            }
        }

        return (columnType);
    }

    void beginDataTransfer() {

        try {
            db.setAutoCommit(false);
        } catch (Exception e) {}
    }

    void endDataTransfer() {

        try {
            db.commit();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBug1191815.java|(3861,158,<117,0>,<123,1>)","        failures = result.failures();

        while (failures.hasMoreElements()) {
            System.out.println(failures.nextElement());
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestAllTypes.java|(4079,258,<112,0>,<124,30>)","            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(""TestSql.setUp() error: "" + e.getMessage());
        }
    }

    /**
     * Fill up the cache
     *
     *
     */
    public void testFillUp() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(19733,329,<637,0>,<648,31>)","                                          FileDialog.SAVE);

            // (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Library.java|(6660,715,<149,0>,<173,12>)","        }, {
            ""PI"", ""org.hsqldb.Library.pi""
        }, {
            ""POWER"", ""java.lang.Math.pow""
        }, {
            ""RADIANS"", ""java.lang.Math.toRadians""
        }, {
            ""RAND"", ""java.lang.Math.random""
        }, {
            ""ROUND"", ""org.hsqldb.Library.round""
        }, {
            ""SIGN"", ""org.hsqldb.Library.sign""
        }, {
            ""SIN"", ""java.lang.Math.sin""
        }, {
            ""SQRT"", ""java.lang.Math.sqrt""
        }, {
            ""TAN"", ""java.lang.Math.tan""
        }, {
            ""TRUNCATE"", ""org.hsqldb.Library.truncate""
        }, {
            ""BITAND"", ""org.hsqldb.Library.bitand""
        }, {
            ""BITOR"", ""org.hsqldb.Library.bitor""
        }, {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(3409,134,<107,0>,<113,30>)","        if (c == null) {
            return;
        }

        if (cConn != null) {
            try {
                cConn.close();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Grid.java|(11770,192,<437,0>,<450,5>)","        }

        g.drawImage(iImage, 0, 0, this);
    }

    /**
     * Method declaration
     *
     *
     * @param g
     */
    public void update(Graphics g) {
        paint(g);
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(4021,178,<138,0>,<147,9>)","        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetTest.java|(4848,187,<134,0>,<140,25>)","        ""real_column"",
        ""smallint_column"",
        ""time_column"",
        ""timestamp_column"",
        ""tinyint_column"",
        ""varbinary_column"",
        ""varchar_column"","
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(2594,170,<72,0>,<79,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            return longValueTable[lookup];
        }

        throw new NoSuchElementException();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(7186,146,<258,0>,<265,9>)","        }
    }

    public Object convertToTypeLimits(Object a) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcClob.java|(30953,222,<743,0>,<750,5>)","                } catch (SQLException se) {
                    throw new java.io.IOException(se.toString());
                } finally {
                    super.close();
                }
            }
        };
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDataSourceFactoryTest.java|(2078,198,<48,0>,<57,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(2275,149,<65,0>,<73,5>)","    }

    public int getSQLGenericTypeNumber() {
        return type;
    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSql.java|(1625,239,<33,0>,<40,22>)","import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/ScaledRAFile.java|(14847,213,<492,0>,<504,5>)","    }

    public boolean canAccess(int length) {
        return true;
    }

    public boolean canSeek(long position) {
        return true;
    }

    public Database getDatabase() {
        return null;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobInputStream.java|(3080,522,<89,0>,<114,53>)","    }

    public long skip(long n) throws IOException {

        if (n <= 0) {
            return 0;
        }

        if (currentPosition + n > availableLength) {
            n = availableLength - currentPosition;
        }

        currentPosition += n;

        return n;
    }

    public int available() {
        return (int) (bufferOffset + buffer.length - currentPosition);
    }

    public void close() throws IOException {
        isClosed = true;
    }

    private void checkClosed() throws HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(26985,234,<908,0>,<915,35>)","            int r = sStatement.getUpdateCount();

            if (r == -1) {
                formatResultSet(sStatement.getResultSet());
            } else {
                g[0] = ""update count"";

                gResult.setHead(g);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Grid.java|(7198,208,<254,0>,<269,25>)","    }

    /**
     * Method declaration
     *
     */
    public void update() {
        adjustScroll();
        repaint();
    }

    /**
     * Method declaration
     *
     */
    void adjustScroll() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(2877,177,<87,0>,<96,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            value[0] = intValueTable[lookup];

            return true;
        }

        return false;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(2718,224,<83,0>,<97,9>)","    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(1685,192,<36,0>,<42,24>)","import org.hsqldb.Expression;
import org.hsqldb.HsqlException;
import org.hsqldb.Library;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputText.java|(10733,250,<431,0>,<440,20>)","            return null;
        }

        return s.equalsIgnoreCase(""TRUE"") ? Boolean.TRUE
                                          : Boolean.FALSE;
    }

    protected Object readOther() throws IOException, HsqlException {

        byte[] data;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(2975,217,<101,0>,<113,9>)","    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(1599,162,<31,0>,<37,24>)","package org.hsqldb.types;

import org.hsqldb.HsqlException;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMerge.java|(2172,144,<55,0>,<63,47>)","        super(name);
    }

    protected void setUp() {

        super.setUp();

        try {
            connection = super.newConnection();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Parser.java|(30419,173,<946,0>,<954,9>)","                if (tokenType == Token.COMMA) {
                    read();

                    continue;
                }

                break;
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCollation.java|(2176,178,<54,0>,<62,54>)","    }

    protected void setUp() {

        super.setUp();

        try {
            connection = super.newConnection();
            statement  = connection.createStatement();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(4805,248,<181,0>,<191,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(67775,117,<1681,0>,<1688,5>)","                t.insertSys(row);
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NullType.java|(1599,162,<31,0>,<37,24>)","package org.hsqldb.types;

import org.hsqldb.HsqlException;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusTableForm.java|(28768,382,<882,0>,<893,47>)","        Panel pEntry = new Panel();

        pEntry.setLayout(new GridBagLayout());

        GridBagConstraints c = new GridBagConstraints();

        c.fill       = GridBagConstraints.HORIZONTAL;
        c.insets     = new Insets(3, 3, 3, 3);
        c.gridwidth  = 1;
        c.gridheight = 1;
        c.weightx    = c.weighty = 1;
        c.anchor     = GridBagConstraints.WEST;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcBlob.java|(25824,222,<644,0>,<651,5>)","                } catch (SQLException se) {
                    throw new java.io.IOException(se.toString());
                } finally {
                    super.close();
                }
            }
        };
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/TransferSQLText.java|(3964,270,<117,0>,<126,13>)","                if (iMaxRows != 0 && i == iMaxRows) {
                    break;
                }

                i++;

                if (iMaxRows != 0 || i % 100 == 0) {
                    tracer.trace(""Transfered "" + i + "" rows"");
                }
            }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcSavepointTest.java|(2035,165,<48,0>,<55,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputText.java|(3466,461,<94,0>,<107,9>)","        if (fieldSep.endsWith(""\n"")) {
            fieldSepEnd = true;
            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);
        }

        if (varSep.endsWith(""\n"")) {
            varSepEnd = true;
            varSep    = varSep.substring(0, varSep.length() - 1);
        }

        if (longvarSep.endsWith(""\n"")) {
            longvarSepEnd = true;
            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(121357,5966,<2859,0>,<3015,22>)","    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the number of seconds the driver will
     * wait for a <code>Statement</code> object to execute.
     * If the limit is exceeded, a
     * <code>SQLException</code> is thrown.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * To present, HSQLDB always returns zero, meaning there
     * is no limit.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return the current query timeout limit in seconds; zero means there is
     *         no limit
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #setQueryTimeout
     */
    public int getQueryTimeout() throws SQLException {

        checkClosed();

        return 0;
    }

    /**
     * <!-- start generic documentation -->
     * Sets the number of seconds the driver will wait for a
     * <code>Statement</code> object to execute to the given number of seconds.
     * If the limit is exceeded, an <code>SQLException</code> is thrown. A JDBC
     * (JDBC4 clarification:)
     * driver must apply this limit to the <code>execute</code>,
     * <code>executeQuery</code> and <code>executeUpdate</code> methods. JDBC driver
     * implementations may also apply this limit to <code>ResultSet</code> methods
     * (consult your driver vendor documentation for details).
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, calls to this method are ignored; HSQLDB waits an
     * unlimited amount of time for statement execution
     * requests to return.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param seconds the new query timeout limit in seconds; zero means
     *        there is no limit
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     *            or the condition seconds >= 0 is not satisfied
     * @see #getQueryTimeout
     */
    public void setQueryTimeout(int seconds) throws SQLException {

        checkClosed();

        if (seconds < 0) {
            throw Util.outOfRangeArgument();
        }
    }

    /**
     * <!-- start generic documentation -->
     * Cancels this <code>Statement</code> object if both the DBMS and
     * driver support aborting an SQL statement.
     * This method can be used by one thread to cancel a statement that
     * is being executed by another thread.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, HSQLDB does <i>not</i> support aborting an SQL
     * statement; calls to this method are ignored.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     */
    public void cancel() throws SQLException {
        checkClosed();
    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the first warning reported by calls on this <code>Statement</code> object.
     * Subsequent <code>Statement</code> object warnings will be chained to this
     * <code>SQLWarning</code> object.
     *
     * <p>The warning chain is automatically cleared each time
     * a statement is (re)executed. This method may not be called on a closed
     * <code>Statement</code> object; doing so will cause an <code>SQLException</code>
     * to be thrown.
     *
     * <P><B>Note:</B> If you are processing a <code>ResultSet</code> object, any
     * warnings associated with reads on that <code>ResultSet</code> object
     * will be chained on it rather than on the <code>Statement</code>
     * object that produced it.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, HSQLDB never produces Statement warnings;
     * this method always returns null.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return the first <code>SQLWarning</code> object or <code>null</code>
     *         if there are no warnings
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     */
    public SQLWarning getWarnings() throws SQLException {

        checkClosed();

        return null;
    }

    /**
     * <!-- start generic documentation -->
     * Clears all the warnings reported on this <code>Statement</code>
     * object. After a call to this method,
     * the method <code>getWarnings</code> will return
     * <code>null</code> until a new warning is reported for this
     * <code>Statement</code> object.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Supported in HSQLDB 1.9.0.1.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     */
    public void clearWarnings() throws SQLException {

        checkClosed();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/Log.java|(3410,176,<69,0>,<75,24>)","import java.io.IOException;

import org.hsqldb.Database;
import org.hsqldb.HsqlException;
import org.hsqldb.NumberSequence;
import org.hsqldb.Session;
import org.hsqldb.Table;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/PostgresTransferHelper.java|(3939,1106,<113,0>,<141,74>)","    }

    String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,
                               String columnType, ResultSet columnDesc,
                               int columnIndex) throws SQLException {

        if (columnType.equals(""SERIAL"")) {
            String SeqName = new String(""_"" + columnDesc.getString(4)
                                        + ""_seq"");
            int spaceleft = 31 - SeqName.length();

            if (t.Stmts.sDestTable.length() > spaceleft) {
                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)
                          + SeqName;
            } else {
                SeqName = t.Stmts.sDestTable + SeqName;
            }

            String DropSequence = ""DROP SEQUENCE "" + SeqName + "";"";

            t.Stmts.sDestDrop += DropSequence;
        }

        for (int Idx = 0; Idx < Funcs.length; Idx++) {
            String HSQLDB_func = Funcs[Idx][HSQLDB];
            int    iStartPos   = columnType.indexOf(HSQLDB_func);

            if (iStartPos >= 0) {
                String NewColumnType = columnType.substring(0, iStartPos);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(20662,323,<634,0>,<642,36>)","            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
            case Types.SQL_REAL :
            case Types.SQL_FLOAT :
            case Types.SQL_DOUBLE :
            case Types.SQL_NUMERIC :
            case Types.SQL_DECIMAL :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(39801,4210,<1010,0>,<1095,37>)","    }

    /**
     * <!-- start generic documentation -->
     * Submits a batch of commands to the database for execution and
     * if all commands execute successfully, returns an array of update counts.
     * The <code>int</code> elements of the array that is returned are ordered
     * to correspond to the commands in the batch, which are ordered
     * according to the order in which they were added to the batch.
     * The elements in the array returned by the method <code>executeBatch</code>
     * may be one of the following:
     * <OL>
     * <LI>A number greater than or equal to zero -- indicates that the
     * command was processed successfully and is an update count giving the
     * number of rows in the database that were affected by the command's
     * execution
     * <LI>A value of <code>SUCCESS_NO_INFO</code> -- indicates that the command was
     * processed successfully but that the number of rows affected is
     * unknown
     * <P>
     * If one of the commands in a batch update fails to execute properly,
     * this method throws a <code>BatchUpdateException</code>, and a JDBC
     * driver may or may not continue to process the remaining commands in
     * the batch.  However, the driver's behavior must be consistent with a
     * particular DBMS, either always continuing to process commands or never
     * continuing to process commands.  If the driver continues processing
     * after a failure, the array returned by the method
     * <code>BatchUpdateException.getUpdateCounts</code>
     * will contain as many elements as there are commands in the batch, and
     * at least one of the elements will be the following:
     * <P>
     * <LI>A value of <code>EXECUTE_FAILED</code> -- indicates that the command failed
     * to execute successfully and occurs only if a driver continues to
     * process commands after a command fails
     * </OL>
     * <P>
     * (JDBC4 clarification:) <p>
     * <B>NOTE:</B>  Support of an ability to batch updates is optional.
     * <p>
     * The possible implementations and return values have been modified in
     * the Java 2 SDK, Standard Edition, version 1.3 to
     * accommodate the option of continuing to proccess commands in a batch
     * update after a <code>BatchUpdateException</code> obejct has been thrown.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Starting with HSQLDB 1.7.2, this feature is supported. <p>
     *
     * HSQLDB stops execution of commands in a batch when one of the commands
     * results in an exception. The size of the returned array equals the
     * number of commands that were executed successfully.<p>
     *
     * When the product is built under the JAVA1 target, an exception
     * is never thrown and it is the responsibility of the client software to
     * check the size of the  returned update count array to determine if any
     * batch items failed.  To build and run under the JAVA2 target, JDK/JRE
     * 1.3 or higher must be used.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return an array of update counts containing one element for each
     * command in the batch.  The elements of the array are ordered according
     * to the order in which commands were added to the batch.
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code> or the
     * driver does not support batch statements. Throws {@link BatchUpdateException}
     * (a subclass of <code>SQLException</code>) if one of the commands sent to the
     * database fails to execute properly or attempts to return a result set.
     *
     *
     * @see #addBatch
     * @see DatabaseMetaData#supportsBatchUpdates
     * @since JDK 1.3 (JDK 1.1.x developers: read the overview for
     * jdbcStatement)
     */
    public int[] executeBatch() throws SQLException {

        checkClosed();
        connection.clearWarningsNoCheck();

        generatedResult = null;

        if (batchResultOut == null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestScripts.java|(7318,174,<212,0>,<218,5>)","                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            print(""TestSelf init error: "" + e.getMessage());
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(3723,341,<127,0>,<141,41>)","        }

        public Object get(Object key) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/JdbcTestCase.java|(16182,165,<376,0>,<383,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(3588,599,<127,0>,<153,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public Object get(Object key) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(4475,506,<166,0>,<188,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Library.java|(38556,204,<1088,0>,<1095,9>)","        int endindex = s.length();

        if (trailing) {
            for (--endindex; endindex >= 0 && s.charAt(endindex) == trim;
                    endindex--) {}

            endindex++;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(13240,146,<421,0>,<428,9>)","        }
    }

    public Object convertToTypeLimits(Object a) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(43205,287,<1372,0>,<1382,31>)","            case Types.SQL_INTEGER :
                return SQL_INTEGER;

            case Types.SQL_SMALLINT :
                return SQL_SMALLINT;

            case Types.SQL_BIGINT :
                return SQL_BIGINT;

            case Types.TINYINT :
                return TINYINT;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/SQLFunction.java|(61718,211,<1719,0>,<1726,5>)","            sb.append(""["").append(argList[i].describe(session)).append(""]"");
        }

        sb.append("") returns "").append(dataType.getName());
        sb.append(""]\n"");

        return sb.toString();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(31006,260,<1086,0>,<1098,51>)","            }

            gResult.addRow(g);
            System.out.println(l + "" ms : "" + sql);
        }

        g[0] = """" + total;
        g[1] = ""total"";
        g[2] = """";

        gResult.addRow(g);

        lTime = System.currentTimeMillis() - lTime;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(23418,117,<622,0>,<629,5>)","                t.insertSys(row);
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(12340,223,<420,0>,<431,23>)","        } else {
            throw Trace.error(Trace.INVALID_CONVERSION);
        }
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobData.java|(3076,210,<84,0>,<95,1>)","    public long getId();

    public void setId(long id);

    public void free();

    public boolean isClosed();

    public void setSession(SessionInterface session);

    public int getStreamBlockSize();
}
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcBlobTest.java|(1630,178,<31,0>,<37,29>)","package org.hsqldb.jdbc;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Blob;
import java.sql.SQLException;"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(70557,160,<2372,0>,<2379,13>)","                default :
                    end = true;
                    break;
            }

            if (end) {
                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcClobTest.java|(9270,233,<299,0>,<307,1>)","            assertTrue(""truncate operation allowed after free"", false);
        } catch (Exception e){ }
    }

    public static void main(java.lang.String[] argList) {

        junit.textui.TestRunner.run(suite());
    }
}"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputText.java|(9681,195,<378,0>,<385,39>)","            return null;
        }

        return HsqlDateTime.timestampValue(s);
    }

    protected IntervalMonthData readYearMonthInterval(Type type)
    throws IOException, HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcCallableStatementTest.java|(2295,165,<57,0>,<64,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(20472,171,<627,0>,<635,23>)","    }

    public Object add(Object a, Object b) throws HsqlException {

        if (a == null || b == null) {
            return null;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Transfer.java|(13627,422,<397,0>,<407,9>)","        Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension size = fMain.getSize();

        // (ulrivo): full size on screen with less than 640 width
        if (d.width >= 640) {
            fMain.setLocation((d.width - size.width) / 2,
                              (d.height - size.height) / 2);
        } else {
            fMain.setLocation(0, 0);
            fMain.setSize(d);
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(25104,464,<797,0>,<823,46>)","        txtCommand.requestFocus();
        txtCommand.setCaretPosition(help[0].length());
    }

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowActivated(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowDeactivated(WindowEvent e) {}

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void windowClosed(WindowEvent e) {}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(2587,169,<72,0>,<79,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            return intValueTable[lookup];
        }

        throw new NoSuchElementException();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/HsqldbTransferHelper.java|(2722,261,<77,0>,<84,69>)","        }

        return (columnType);
    }

    String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,
                               String columnType, ResultSet columnDesc,
                               int columnIndex) throws SQLException {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcSQLXMLTest.java|(2673,165,<66,0>,<73,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(4005,341,<146,0>,<160,41>)","        }

        public Object get(Object key) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/navigator/ClientRowSetNavigator.java|(3932,289,<122,0>,<139,9>)","            position += size;
        }

        if (position < 0) {
            beforeFirst();

            return false;
        }

        if (position > size) {
            afterLast();

            return false;
        }

        if (size == 0) {
            return false;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetMetaDataTest.java|(10428,285,<281,0>,<287,57>)","               ""real_column"",
               ""smallint_column"",                   // 15
               ""time_column"",
               ""timestamp_column"",
               ""tinyint_column"",
               ""varbinary_column"",
               ""varchar_column"",                    // 20"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetTest.java|(2712,1297,<74,0>,<98,23>)","    }

    private final String select =
    ""select id as           id_column, "" +                            // 1
           ""c_bigint        as bigint_column, "" +
           ""c_binary        as binary_column, "" +
           ""c_boolean       as boolean_column, "" +
           ""c_char          as char_column, "" +                       // 5
           ""c_date          as date_column, "" +
           ""c_decimal       as decimal_column, "" +
           ""c_double        as double_column, "" +
           ""c_float         as float_column, "" +
           ""c_integer       as integer_column, "" +                    // 10
           ""c_longvarbinary as longvarbinary_column, "" +
           ""c_longvarchar   as longvarchar_column, "" +
           ""c_object        as object_column, "" +
           ""c_real          as real_column, "" +
           ""c_smallint      as smallint_column, "" +                   // 15
           ""c_time          as time_column, "" +
           ""c_timestamp     as timestamp_column, "" +
           ""c_tinyint       as tinyint_column, "" +
           ""c_varbinary     as varbinary_column, "" +
           ""c_varchar       as varchar_column, "" +                    // 20
           ""c_varchar_ignorecase as varchar_ignorecase_column "" +
      ""from all_types"";"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSet.java|(286764,1518,<6643,0>,<6671,5>)","    public <T> T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {
        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Parser.java|(35472,139,<1121,0>,<1128,9>)","            if (tokenType == Token.COMMA) {
                read();

                continue;
            }

            break;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java|(37263,1518,<910,0>,<938,5>)","    public <T> T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {
        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataRemoteClient.java|(3034,120,<89,0>,<97,5>)","    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(27869,198,<855,0>,<864,9>)","        } else {
            throw Trace.error(Trace.INVALID_CONVERSION);
        }
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMultiInsert.java|(2198,963,<55,0>,<87,5>)","        super(name);
    }

    protected void setUp() {

        super.setUp();

        try {
            connection = super.newConnection();
            stmnt      = connection.createStatement();
        } catch (Exception e) {}
    }

    private void printTable(String table, String cols, int expected) throws SQLException {
        int rows = 0;
        ResultSet rs = stmnt.executeQuery(""SELECT "" + cols + "" FROM "" + table);

        ResultSetMetaData rsmd = rs.getMetaData();
        String result = ""Table "" + table + "", expecting ""
            + expected + "" rows total:\n"";

        while (rs.next()) {
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                result += rsmd.getColumnLabel(i + 1) + "":""
                           + rs.getString(i + 1) + "":"";
            }
            result += ""\n"";
            rows++;
        }
        rs.close();
        System.out.println(result);
        assertEquals(expected, rows);
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Tree.java|(3435,229,<71,0>,<79,28>)","import java.awt.Dimension;
import java.awt.Event;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Panel;
import java.awt.Scrollbar;
import java.awt.SystemColor;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(26123,746,<676,0>,<687,5>)","            + ""where options include:\n""
            + ""    --driver <classname>  jdbc driver class\n""
            + ""    --url <name>          jdbc url\n""
            + ""    --user <name>         username used for connection\n""
            + ""    --password <password> password for this user\n""
            + ""    --urlid <urlid>       use url/user/password/driver in rc file\n""
            + ""    --rcfile <file>       (defaults to 'dbmanager.rc' in home dir)\n""
            + ""    --dir <path>          default directory\n""
            + ""    --script <file>       reads from script file\n""
            + ""    --noexit              do not call system.exit()\n""
            + ""(Single-hypen switches like '-driver' are also supported)"");
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(33938,502,<1208,0>,<1233,9>)","        txtResult.setText(b.toString());
    }

    /**
     * Method declaration
     *
     *
     * @param s
     */
    private void addToRecent(String s) {

        for (int i = 0; i < iMaxRecent; i++) {
            if (s.equals(sRecent[i])) {
                return;
            }
        }

        if (sRecent[iRecent] != null) {
            mRecent.remove(iRecent);
        }

        sRecent[iRecent] = s;

        if (s.length() > 43) {
            s = s.substring(0, 40) + ""..."";
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/GroupedResult.java|(6346,268,<189,0>,<200,5>)","                    return false;
                }
            }

            return true;
        }

        private boolean equals(Object o1, Object o2) {
            return (o1 == null) ? o2 == null
                                : o1.equals(o2);
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(3085,352,<99,0>,<121,36>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDriverTest.java|(5756,170,<173,0>,<181,1>)","        assertEquals(expResult, result);
    }

    public static void main(java.lang.String[] argList) {

        junit.textui.TestRunner.run(suite());
    }

}"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(3094,139,<99,0>,<108,5>)","    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/Type.java|(16759,287,<498,0>,<508,31>)","            case Types.SQL_INTEGER :
                return SQL_INTEGER;

            case Types.SQL_SMALLINT :
                return SQL_SMALLINT;

            case Types.SQL_BIGINT :
                return SQL_BIGINT;

            case Types.TINYINT :
                return TINYINT;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobInputStream.java|(2436,650,<64,0>,<89,5>)","        this.availableLength = offset + length;
        this.currentPosition = offset;
    }

    public int read() throws IOException {

        if (currentPosition >= availableLength) {
            return -1;
        }

        if (buffer == null
                || currentPosition >= bufferOffset + buffer.length) {
            try {
                checkClosed();
                readIntoBuffer();
            } catch (HsqlException e) {
                throw new IOException(e.getMessage());
            }
        }

        int val = buffer[(int) (currentPosition - bufferOffset)] & 0xff;

        currentPosition++;

        return val;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(5529,181,<172,0>,<180,1>)","            + count);

        failures = result.failures();

        while (failures.hasMoreElements()) {
            System.out.println(failures.nextElement());
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSql.java|(2240,238,<57,0>,<68,5>)","        super(name);
    }

    protected void setUp() {

        super.setUp();

        try {
            connection = super.newConnection();
            stmnt      = connection.createStatement();
        } catch (Exception e) {}
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(44591,700,<1309,0>,<1332,9>)","                } else {
                    if (currentValue >= limits[currentPart]) {
                        throw Trace.error(Trace.NUMERIC_VALUE_OUT_OF_RANGE);
                    }

                    if (currentDigits != 2) {
                        throw Trace.error(Trace.UNEXPECTED_TOKEN);
                    }

                    totalValue += currentValue * factors[currentPart];
                }

                currentPart++;

                currentValue  = 0;
                currentDigits = 0;
            }
        }

        for (; i < s.length(); i++) {
            if (s.charAt(i) != ' ') {
                throw Trace.error(Trace.UNEXPECTED_TOKEN);
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/scriptio/ScriptWriterBase.java|(12842,303,<385,0>,<395,9>)","            }

            // todo: try to do Cache.cleanUp() here, too
        } catch (Exception e) {

            // ignore exceptions
            // may be InterruptedException or IOException
            if (Trace.TRACE) {
                Trace.printSystemOut(e.toString());
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(3645,201,<124,0>,<133,9>)","        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public Object convertToDefaultType(Object a) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/HsqldbTestCase.java|(1646,172,<34,0>,<39,26>)","import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rights/Right.java|(5439,101,<185,0>,<192,5>)","                }

                return false;
            }
        }

        return true;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ClosableCharArrayWriter.java|(6993,265,<185,0>,<194,9>)","            throw new IndexOutOfBoundsException();
        } else if (len == 0) {
            return;
        }

        int newcount = count + len;

        if (newcount > buf.length) {
            buf = copyOf(buf, Math.max(buf.length << 1, newcount));
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(20460,504,<621,0>,<638,43>)","        pResult = new Panel();

        pQuery.setLayout(new BorderLayout());
        pCommand.setLayout(new BorderLayout());
        pResult.setLayout(new BorderLayout());

        Font fFont = new Font(""Dialog"", Font.PLAIN, 12);

        txtCommand = new TextArea(5, 40);

        txtCommand.addKeyListener(this);

        txtResult = new TextArea(20, 40);

        txtCommand.setFont(fFont);
        txtResult.setFont(new Font(""Courier"", Font.PLAIN, 12));

        butExecute = new Button(""Execute"");
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataRemoteClient.java|(4729,217,<157,0>,<163,26>)","        } catch (IOException e) {
            throw Trace.error(Trace.TRANSFER_CORRUPTED);
        }
    }

    public void write(RowOutputInterface out) throws IOException, HsqlException {
        out.writeLong(id);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobInputStream.java|(3362,522,<102,0>,<127,53>)","    }

    public long skip(long n) throws IOException {

        if (n <= 0) {
            return 0;
        }

        if (currentPosition + n > availableLength) {
            n = availableLength - currentPosition;
        }

        currentPosition += n;

        return n;
    }

    public int available() {
        return (int) (bufferOffset + buffer.length - currentPosition);
    }

    public void close() throws IOException {
        isClosed = true;
    }

    private void checkClosed() throws HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(21738,300,<699,0>,<706,39>)","        } else if (s.equals(""AutoCommit on"")) {
            try {
                cConn.setAutoCommit(true);
            } catch (SQLException e) {}
        } else if (s.equals(""AutoCommit off"")) {
            try {
                cConn.setAutoCommit(false);
            } catch (SQLException e) {}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ConnectionDialog.java|(1950,269,<46,0>,<54,35>)","import java.awt.Label;
import java.awt.Panel;
import java.awt.SystemColor;
import java.awt.TextField;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputTextLog.java|(8653,195,<334,0>,<341,39>)","            return null;
        }

        return HsqlDateTime.timestampValue(s);
    }

    protected IntervalMonthData readYearMonthInterval(Type type)
    throws IOException, HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBug808460.java|(2438,312,<66,0>,<76,34>)","    }

    /* Runs TestBug808460 test from the command line*/
    public static void main(String[] args) throws Exception {

        TestResult            result;
        TestCase              test;
        java.util.Enumeration failures;
        int                   count;

        result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyHashMap.java|(3599,599,<127,0>,<153,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public Object get(Object key) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(2531,180,<68,0>,<78,29>)","    }

    public int getSQLGenericTypeNumber() {
        return type;
    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }

    public String getName() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputText.java|(6706,259,<218,0>,<230,61>)","    }

    public int readType() throws IOException {
        return 0;
    }

    protected boolean checkNull() {

        // Return null on each column read instead.
        return false;
    }

    protected String readChar(Type type) throws IOException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobDataMemory.java|(5184,120,<174,0>,<182,5>)","    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBug778213.java|(2208,258,<55,0>,<65,13>)","        super(name);
    }

    /* Implements the TestBug778213_Part3 test */
    public void test() throws Exception {

        Connection        conn = newConnection();
        PreparedStatement pstmt;
        int               updateCount;

        try {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Library.java|(38813,193,<1099,0>,<1107,9>)","        }

        int startindex = 0;

        if (leading) {
            while (startindex < endindex && s.charAt(startindex) == trim) {
                startindex++;
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/QueryTool.java|(8779,258,<266,0>,<273,39>)","                int r = sStatement.getUpdateCount();

                if (r == -1) {
                    formatResultSet(sStatement.getResultSet());
                } else {
                    g[0] = ""update count"";

                    gResult.setHead(g);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSqlPersistent.java|(15318,253,<437,0>,<445,45>)","        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(""TestSql.tearDown() error: "" + e.getMessage());
        }
    }

    public static void main(String[] argv) {

        TestResult result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(19620,600,<635,0>,<651,13>)","        } else if (s.equals(""Save Script..."")) {
            FileDialog f = new FileDialog(fMain, ""Save Script"",
                                          FileDialog.SAVE);

            // (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
                DatabaseManagerCommon.writeFile(f.getDirectory() + file,
                                                txtCommand.getText());
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputText.java|(1700,168,<35,0>,<41,38>)","import java.sql.Date;
import java.sql.Timestamp;

import org.hsqldb.CachedRow;
import org.hsqldb.Trace;
import org.hsqldb.Types;
import org.hsqldb.lib.StringConverter;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestAllTypes.java|(15669,171,<423,0>,<432,44>)","    }

    int nextIntRandom(Random r, int range) {

        int b = Math.abs(r.nextInt());

        return b % range;
    }

    public static void main(String[] argv) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(13447,171,<458,0>,<466,23>)","    }

    public Object add(Object a, Object b) throws HsqlException {

        if (a == null || b == null) {
            return null;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Grid.java|(5063,185,<138,0>,<147,5>)","        setLayout(null);

        sbHoriz = new Scrollbar(Scrollbar.HORIZONTAL);

        add(sbHoriz);

        sbVert = new Scrollbar(Scrollbar.VERTICAL);

        add(sbVert);
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(2779,224,<87,0>,<101,9>)","    }

    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSelf.java|(6610,352,<180,0>,<194,5>)","    static void delete(String file) {

        try {
            new File(file).delete();
        } catch (Exception e) {}
    }

    static void deleteDatabase(String path) {

        delete(path + "".backup"");
        delete(path + "".properties"");
        delete(path + "".script"");
        delete(path + "".data"");
        delete(path + "".log"");
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(126508,101,<3060,0>,<3067,1>)","            t.insertSys(row);
        }

        t.setDataReadOnly(true);

        return t;
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(77325,132,<2624,0>,<2630,5>)","                break;
            }
            default : {
                throw unexpectedToken();
            }
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/pool/ManagedPoolDataSource.java|(19429,1402,<469,0>,<495,5>)","            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(17638,388,<548,0>,<555,55>)","        } else if (s.equals(""SELECT"")) {
            showHelp(DatabaseManagerCommon.selectHelp);
        } else if (s.equals(""INSERT"")) {
            showHelp(DatabaseManagerCommon.insertHelp);
        } else if (s.equals(""UPDATE"")) {
            showHelp(DatabaseManagerCommon.updateHelp);
        } else if (s.equals(""DELETE"")) {
            showHelp(DatabaseManagerCommon.deleteHelp);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/PostgresTransferHelper.java|(3899,261,<110,0>,<117,69>)","        }

        return (columnType);
    }

    String fixupColumnDefWrite(TransferTable t, ResultSetMetaData meta,
                               String columnType, ResultSet columnDesc,
                               int columnIndex) throws SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestAllTypes.java|(6207,261,<165,0>,<173,37>)","            sw.zero();

            sStatement = cConnection.createStatement();

            java.util.Random randomgen = new java.util.Random();

            sStatement.execute(ddl1);
            sStatement.execute(ddl2);
            sStatement.execute(ddl3);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMappedList.java|(5847,150,<222,0>,<230,1>)","    }

    private void checkRange(int i) {

        if (i < 0 || i >= size()) {
            throw new IndexOutOfBoundsException();
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(75144,1825,<1815,0>,<1859,24>)","        }

        t.setDataReadOnly(true);

        return t;
    }

    /**
     * Retrieves a <code>Table</code> object describing the accessible
     * routines defined within this database.
     *
     * Each row is a procedure description with the following
     * columns: <p>
     *
     * <pre class=""SqlCodeExample"">
     * PROCEDURE_CAT     VARCHAR   catalog in which routine is defined
     * PROCEDURE_SCHEM   VARCHAR   schema in which routine is defined
     * PROCEDURE_NAME    VARCHAR   simple routine identifier
     * NUM_INPUT_PARAMS  INTEGER   number of input parameters
     * NUM_OUTPUT_PARAMS INTEGER   number of output parameters
     * NUM_RESULT_SETS   INTEGER   number of result sets returned
     * REMARKS           VARCHAR   explanatory comment on the routine
     * PROCEDURE_TYPE    SMALLINT  { Unknown | No Result | Returns Result }
     * // JDBC 4.0
     * SPECIFIC_NAME     VARCHAR   The name which uniquely identifies this
     *                             procedure within its schema.
     *                             typically (but not restricted to) a
     *                             fully qualified Java Method name
     *                             and signature.
     * // HSQLDB extension
     * ORIGIN            VARCHAR   {ALIAS |
     *                             [BUILTIN | USER DEFINED] ROUTINE |
     *                             [BUILTIN | USER DEFINED] TRIGGER |
     *                              ...}
     * </pre> <p>
     *
     * @return a <code>Table</code> object describing the accessible
     *        routines defined within the this database
     * @throws HsqlException if an error occurs while producing the table
     */
    Table SYSTEM_PROCEDURES() throws HsqlException {

        Table t = sysTables[SYSTEM_PROCEDURES];

        if (t == null) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcClobTest.java|(3513,473,<102,0>,<117,46>)","        assertReaderEquals(expResult, result);
    }

    /**
     * Test of getAsciiStream method, of class org.hsqldb.jdbc.jdbcClob.
     */
    public void testGetAsciiStream() throws Exception {
        System.out.println(""getAsciiStream"");

        StringBuffer sb = new StringBuffer();

        for (int i = Character.MAX_VALUE; i <= Character.MAX_VALUE; i++) {
            sb.append((char)i);
        }

        String      testVal   = sb.toString();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(4979,506,<188,0>,<210,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HsqlDeque.java|(6702,336,<268,0>,<279,41>)","        for (int i = 0; i < list.length; i++) {
            newList[i] = list[i];
        }

        list    = newList;
        newList = null;

        if (endindex <= firstindex) {
            int tail = firstindex + elementCount - endindex;

            for (int i = 0; i < endindex; i++) {
                list[tail + i] = list[i];
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ClosableCharArrayWriter.java|(9455,1607,<266,0>,<313,5>)","    }

    /**
     * Returns the current capacity of this writer's data buffer.
     *
     * @return  the current capacity (the length of the internal
     *          data array)
     * @throws java.io.IOException if an I/O error occurs.
     *      In particular, an <tt>IOException</tt> may be thrown
     *      if this writer has been {@link #free() freed}.
     */
    public synchronized int capacity() throws IOException {
        checkFreed();

	return buf.length;
    }

    /**
     * Resets the <tt>count</tt> field of this writer to zero, so that all
     * currently accumulated output is effectively discarded. Further write
     * operations will reuse the allocated buffer space.
     *
     * @see #count
     * @throws java.io.IOException if an I/O error occurs.
     *      In particular, an <tt>IOException</tt> may be thrown
     *      if this output stream has been {@link #close() closed}.
     */
    public synchronized void reset() throws IOException {
        checkClosed();

        count = 0;
    }

    /**
     * Attempts to reduce this writer's buffer capacity to its current size. <p>
     *
     * If the buffer is larger than necessary to hold its current sequence of
     * characters, then it may be resized to become more space efficient.
     * Calling this method may, but is not required to, affect the value
     * returned by a subsequent call to the {@link #capacity()} method.
     */
    public synchronized void trimToSize() throws IOException {
        checkFreed();

        if (buf.length > count) {
            buf = copyOf(buf, count);
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcDataSourceFactoryTest.java|(2104,165,<49,0>,<56,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSet.java|(286845,1356,<6644,0>,<6669,88>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/scriptio/ScriptWriterZipped.java|(2716,220,<71,0>,<77,5>)","        } catch (IOException e) {
            throw Trace.error(Trace.FILE_IO_ERROR, Trace.Message_Pair,
                              new Object[] {
                e.toString(), outFile
            });
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(56685,117,<1387,0>,<1394,5>)","                t.insertSys(row);
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcCallableStatementTest.java|(46306,209,<1576,0>,<1586,1>)","        } catch (Exception ex) {
            fail(ex.getMessage());
        }
    }

    public static void main(java.lang.String[] argList) {

        junit.textui.TestRunner.run(suite());
    }

}"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(3152,233,<105,0>,<112,70>)","    }

    public Object convertToTypeLimits(Object a) throws HsqlException {
        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(135900,4889,<3227,0>,<3360,5>)","    }

    /**
     * <!-- start generic documentation -->
     * (JDBC4 clarification:)
     * Gives the JDBC driver a hint as to the number of rows that should
     * be fetched from the database when more rows are needed for
     * <code>ResultSet</code> objects genrated by this <code>Statement</code>.
     * If the value specified is zero, then the hint is ignored.
     * The default value is zero.
     * <!-- start generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB uses the specified value as a hint, but may process more or fewer
     * rows than specified.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param rows the number of rows to fetch
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code> or the
     *        (JDBC4 modified:)
     *        condition  <code>rows >= 0</code> is not satisfied.
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *   for jdbcStatement)
     * @see #getFetchSize
     */
    public void setFetchSize(int rows) throws SQLException {

        checkClosed();

        if (rows < 0) {
            throw Util.outOfRangeArgument();
        }

        fetchSize = rows;
    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the number of result set rows that is the default
     * fetch size for <code>ResultSet</code> objects
     * generated from this <code>Statement</code> object.
     * If this <code>Statement</code> object has not set
     * a fetch size by calling the method <code>setFetchSize</code>,
     * the return value is implementation-specific.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <b>HSQLDB-Specific Information</b> <p>
     *
     * HSQLDB returns 0 by default, or the fetch size specified by setFetchSize
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return the default fetch size for result sets generated
     *          from this <code>Statement</code> object
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *  for jdbcStatement)
     * @see #setFetchSize
     */
    public int getFetchSize() throws SQLException {

        checkClosed();

        return fetchSize;
    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the result set concurrency for <code>ResultSet</code> objects
     * generated by this <code>Statement</code> object.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, HSQLDB supports only
     * <code>CONCUR_READ_ONLY</code> concurrency.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return either <code>ResultSet.CONCUR_READ_ONLY</code> or
     * <code>ResultSet.CONCUR_UPDATABLE</code>
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *  for jdbcStatement)
     */
    public int getResultSetConcurrency() throws SQLException {

        checkClosed();

        return rsConcurrency;
    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the result set type for <code>ResultSet</code> objects
     * generated by this <code>Statement</code> object.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB 1.7.0 and later versions support <code>TYPE_FORWARD_ONLY</code>
     * and <code>TYPE_SCROLL_INSENSITIVE</code>.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return one of <code>ResultSet.TYPE_FORWARD_ONLY</code>,
     * <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
     * <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *   for jdbcStatement)
     */
    public int getResultSetType() throws SQLException {

// fredt - omit checkClosed() in order to be able to handle the result of a
// SHUTDOWN query
        checkClosed();

        return rsScrollability;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HsqlDeque.java|(4817,219,<180,0>,<190,9>)","        resetCapacity();

        firstindex--;

        if (firstindex < 0) {
            firstindex = list.length - 1;

            if (endindex == 0) {
                endindex = list.length;
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(85803,101,<2088,0>,<2095,5>)","                }
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ScriptTool.java|(1683,207,<35,0>,<41,28>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(3004,200,<86,0>,<97,23>)","        }
    }

    public int getJDBCTypeNumber() {

        // JDBC numbers happen to be the same as SQL
        return type;
    }

    public String getJDBCClassName() {

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(35179,306,<1137,0>,<1147,22>)","            case Token.INSERT :
                cs = compileInsertStatement();
                break;

            case Token.UPDATE :
                cs = compileUpdateStatement();
                break;

            case Token.MERGE :
                cs = compileMergeStatement();
                break;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntValueHashMap.java|(3248,139,<104,0>,<111,5>)","        if (lookup != -1) {
            value[0] = intValueTable[lookup];

            return true;
        }

        return false;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(19194,223,<584,0>,<595,23>)","        } else {
            throw Trace.error(Trace.INVALID_CONVERSION);
        }
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/preprocessor/Token.java|(3442,133,<99,0>,<105,5>)","                return true;
            }
            default : {
                return false;
            }
        }
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputTextQuoted.java|(2684,84,<66,0>,<72,1>)","                return true;
            }
        }

        return false;
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(1715,162,<37,0>,<42,24>)","import org.hsqldb.HsqlException;
import org.hsqldb.Library;
import org.hsqldb.Session;
import org.hsqldb.Token;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Grid.java|(7710,1167,<286,0>,<335,35>)","        int v = iY / iRowHeight,
            h = iHeight / iRowHeight;

        sbVert.setValues(v, h, 0, iRowCount + 1);

        iX = sbHoriz.getValue();
        iY = iRowHeight * sbVert.getValue();
    }

    /**
     * Method declaration
     *
     *
     * @param e
     *
     * @return
     */

    // fredt@users 20020130 - comment by fredt
    // to remove this deprecated method we need to rewrite the Grid class as a
    // ScrollPane component
    // sqlbob:  I believe that changing to the JDK1.1 event handler
    // would require browsers to use the Java plugin.
    public boolean handleEvent(Event e) {

        switch (e.id) {

            case Event.SCROLL_LINE_UP :
            case Event.SCROLL_LINE_DOWN :
            case Event.SCROLL_PAGE_UP :
            case Event.SCROLL_PAGE_DOWN :
            case Event.SCROLL_ABSOLUTE :
                iX = sbHoriz.getValue();
                iY = iRowHeight * sbVert.getValue();

                repaint();

                return true;
        }

        return super.handleEvent(e);
    }

    /**
     * Method declaration
     *
     *
     * @param g
     */
    public void paint(Graphics g) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Tree.java|(10952,192,<405,0>,<418,5>)","        }

        g.drawImage(iImage, 0, 0, this);
    }

    /**
     * Method declaration
     *
     *
     * @param g
     */
    public void update(Graphics g) {
        paint(g);
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(4916,248,<185,0>,<195,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java|(37344,1437,<911,0>,<938,5>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/sample/FindFile.java|(3409,178,<69,0>,<74,26>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyHashMap.java|(3736,451,<134,0>,<153,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyIntValueHashMap.java|(2455,169,<65,0>,<72,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            return intValueTable[lookup];
        }

        throw new NoSuchElementException();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(4125,178,<143,0>,<152,9>)","        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(3152,259,<105,0>,<114,24>)","    }

    public Object convertToTypeLimits(Object a) throws HsqlException {
        return a;
    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataID.java|(1599,200,<31,0>,<39,35>)","package org.hsqldb.types;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;

import org.hsqldb.HsqlException;
import org.hsqldb.SessionInterface;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(13534,116,<438,0>,<444,9>)","        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/navigator/RowSetNavigator.java|(4768,289,<205,0>,<222,9>)","            position += size;
        }

        if (position < 0) {
            beforeFirst();

            return false;
        }

        if (position > size) {
            afterLast();

            return false;
        }

        if (size == 0) {
            return false;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(18943,196,<613,0>,<621,31>)","            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(2139,211,<54,0>,<61,36>)","    }

    public int displaySize() {
        return precision > Integer.MAX_VALUE ? Integer.MAX_VALUE
                                             : (int) precision;
    }

    public int getJDBCTypeNumber() {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcBlobTest.java|(2050,198,<49,0>,<58,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(5057,248,<192,0>,<202,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(20870,868,<673,0>,<698,31>)","            }
        } else if (s.equals(""Save Result..."")) {
            FileDialog f = new FileDialog(fMain, ""Save Result"",
                                          FileDialog.SAVE);

            // (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
                showResultInText();
                DatabaseManagerCommon.writeFile(f.getDirectory() + file,
                                                txtResult.getText());
            }
        } else if (s.equals(""Results in Text"")) {
            iResult = 1;

            pResult.removeAll();
            pResult.add(""Center"", txtResult);
            pResult.doLayout();
            showResultInText();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSet.java|(1599,172,<31,0>,<37,28>)","package org.hsqldb.jdbc;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(3023,178,<94,0>,<103,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            value[0] = longValueTable[lookup];

            return true;
        }

        return false;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/ScaledRAFileInJar.java|(3953,228,<120,0>,<126,29>)","        if (seekPosition >= fileLength) {
            return -1;
        }

        if (bufferDirty || seekPosition < bufferOffset
                || seekPosition >= bufferOffset + buffer.length) {
            readIntoBuffer();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DITypeInfo.java|(13851,229,<409,0>,<416,30>)","        switch (type) {

            case Types.SQL_BINARY :
            case Types.SQL_BLOB :
            case Types.SQL_CHAR :
            case Types.SQL_NCHAR :
            case Types.SQL_CLOB :
            case Types.NCLOB :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMultiInsert.java|(1599,307,<31,0>,<42,34>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Enumeration;

import junit.framework.TestCase;
import junit.framework.TestResult;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(6706,196,<220,0>,<228,1>)","                           + count);

        failures = result.failures();

        while (failures.hasMoreElements()) {
            System.out.println(failures.nextElement());
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(78522,1825,<1966,0>,<2010,24>)","        }

        t.setDataReadOnly(true);

        return t;
    }

    /**
     * Retrieves a <code>Table</code> object describing the accessible
     * routines defined within this database.
     *
     * Each row is a procedure description with the following
     * columns: <p>
     *
     * <pre class=""SqlCodeExample"">
     * PROCEDURE_CAT     VARCHAR   catalog in which routine is defined
     * PROCEDURE_SCHEM   VARCHAR   schema in which routine is defined
     * PROCEDURE_NAME    VARCHAR   simple routine identifier
     * NUM_INPUT_PARAMS  INTEGER   number of input parameters
     * NUM_OUTPUT_PARAMS INTEGER   number of output parameters
     * NUM_RESULT_SETS   INTEGER   number of result sets returned
     * REMARKS           VARCHAR   explanatory comment on the routine
     * PROCEDURE_TYPE    SMALLINT  { Unknown | No Result | Returns Result }
     * // JDBC 4.0
     * SPECIFIC_NAME     VARCHAR   The name which uniquely identifies this
     *                             procedure within its schema.
     *                             typically (but not restricted to) a
     *                             fully qualified Java Method name
     *                             and signature.
     * // HSQLDB extension
     * ORIGIN            VARCHAR   {ALIAS |
     *                             [BUILTIN | USER DEFINED] ROUTINE |
     *                             [BUILTIN | USER DEFINED] TRIGGER |
     *                              ...}
     * </pre> <p>
     *
     * @return a <code>Table</code> object describing the accessible
     *        routines defined within the this database
     * @throws HsqlException if an error occurs while producing the table
     */
    Table SYSTEM_PROCEDURES() throws HsqlException {

        Table t = sysTables[SYSTEM_PROCEDURES];

        if (t == null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ConnectionDialogSwing.java|(9383,219,<257,0>,<263,9>)","        if (d.width >= 640) {
            setLocation((d.width - size.width) / 2,
                        (d.height - size.height) / 2);
        } else {
            setLocation(0, 0);
            setSize(d);
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(21105,204,<688,0>,<695,9>)","        int endindex = s.length();

        if (trailing) {
            for (--endindex; endindex >= 0 && s.charAt(endindex) == trim;
                    endindex--) {}

            endindex++;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcNClobTest.java|(5396,735,<164,0>,<191,49>)","        try {
            clob.setString(1L, ""T"");

            assertEquals(1L, clob.length());

            OutputStream result = clob.setAsciiStream(2);

            result.write(""ask"".getBytes(""US-ASCII""));
            result.flush();

            assertEquals(1L, clob.length());

            result.close();

            assertEquals(4L, clob.length());

            assertEquals(""Task"", clob.getSubString(1, 4));
        } catch (Exception e) {
            fail(e.getMessage());
        }

    }

    /**
     * Test of setCharacterStream method, of class org.hsqldb.jdbc.jdbcNClob.
     */
    public void testSetCharacterStream() throws Exception {
        System.out.println(""setCharacterStream"");"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(66205,657,<1673,0>,<1682,84>)","            addColumn(t, ""BUFFER_LENGTH"", Types.SQL_INTEGER);
            addColumn(t, ""DECIMAL_DIGITS"", Types.SQL_SMALLINT);
            addColumn(t, ""PSEUDO_COLUMN"", Types.SQL_SMALLINT, false);    // not null

            // -----------------------------------------------------------------
            // required by DatabaseMetaData.getVersionColumns filter parameters
            // -----------------------------------------------------------------
            addColumn(t, ""TABLE_CAT"", Types.SQL_VARCHAR);
            addColumn(t, ""TABLE_SCHEM"", Types.SQL_VARCHAR);
            addColumn(t, ""TABLE_NAME"", Types.SQL_VARCHAR, false);        // not null
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(71599,1437,<1747,0>,<1774,5>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(8247,1142,<247,0>,<278,9>)","            if (lowerArg.equals(""-driver"")) {
                defDriver   = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals(""-url"")) {
                defURL      = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals(""-user"")) {
                defUser     = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals(""-password"")) {
                defPassword = arg[i];
                autoConnect = true;
            } else if (lowerArg.equals(""-urlid"")) {
                urlid        = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals(""-rcfile"")) {
                rcFile       = arg[i];
                urlidConnect = true;
            } else if (lowerArg.equals(""-dir"")) {
                defDirectory = arg[i];
            } else if (lowerArg.equals(""-script"")) {
                defScript = arg[i];
            } else if (lowerArg.equals(""-noexit"")) {
                bMustExit = false;

                i--;
            } else {
                showUsage();

                return;
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcNClobTest.java|(2042,198,<49,0>,<58,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(58214,109,<1948,0>,<1953,5>)","            }
            default : {
                throw unexpectedToken();
            }
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcRowIdTest.java|(2025,165,<48,0>,<55,25>)","    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(12486,490,<405,0>,<414,44>)","            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(22397,308,<563,0>,<570,35>)","                        defUser, defPassword);
            } else if (urlidConnect) {
                if (urlid == null) {
                    throw new IllegalArgumentException(
                        ""You must specify an 'urlid' to use an RC file"");
                }

                autoConnect = true;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputBinary.java|(1684,168,<35,0>,<41,38>)","import java.sql.Date;
import java.sql.Timestamp;

import org.hsqldb.CachedRow;
import org.hsqldb.Trace;
import org.hsqldb.Types;
import org.hsqldb.lib.StringConverter;
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcResultSetTest.java|(4552,295,<123,0>,<133,29>)","        ""bigint_column"",
        ""binary_column"",
        ""boolean_column"",
        ""char_column"",
        ""date_column"",
        ""decimal_column"",
        ""double_column"",
        ""float_column"",
        ""integer_column"",
        ""longvarbinary_column"",
        ""longvarchar_column"","
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcPreparedStatement.java|(140783,1095,<3360,0>,<3393,5>)","    }

    /**
     * <!-- start generic documentation -->
     * Empties this <code>Statement</code> object's current list of
     * SQL commands.
     * <P>
     * (JDBC4 clarification:) <p>
     * <B>NOTE:</B>  Support of an ability to batch updates is optional.
     * <!-- start generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Starting with HSQLDB 1.7.2, this feature is supported.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @exception SQLException if a database access error occurs,
     *  this method is called on a closed <code>Statement</code> or the
     * driver does not support batch updates
     * @see #addBatch
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *   for jdbcStatement)
     */
    public void clearBatch() throws SQLException {

        checkClosed();

        if (batchResultOut != null) {
            batchResultOut.getNavigator().clear();
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMerge.java|(11118,339,<325,0>,<339,45>)","    }

    protected void tearDown() {

        try {
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(""TestSql.tearDown() error: "" + e.getMessage());
        }
    }

    public static void main(String[] argv) {

        TestResult result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestAllTypes.java|(1625,203,<33,0>,<39,24>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/JdbcSuite.java|(1986,217,<47,0>,<57,25>)","    }

    // inherit javadocs
    protected void setUp() throws Exception {
        super.setUp();
    }


    // inherit javadocs
    protected void tearDown() throws Exception {
        super.tearDown();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(2057,211,<50,0>,<57,36>)","    }

    public int displaySize() {
        return precision > Integer.MAX_VALUE ? Integer.MAX_VALUE
                                             : (int) precision;
    }

    public int getJDBCTypeNumber() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBug808460.java|(2932,158,<85,0>,<91,1>)","        failures = result.failures();

        while (failures.hasMoreElements()) {
            System.out.println(failures.nextElement());
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMerge.java|(2172,238,<55,0>,<66,5>)","        super(name);
    }

    protected void setUp() {

        super.setUp();

        try {
            connection = super.newConnection();
            stmnt      = connection.createStatement();
        } catch (Exception e) {}
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/BaseList.java|(3986,287,<156,0>,<169,30>)","            }

            throw new NoSuchElementException();
        }

        public int nextInt() {
            throw new NoSuchElementException();
        }

        public long nextLong() {
            throw new NoSuchElementException();
        }

        public void remove() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(6185,316,<202,0>,<212,34>)","    }

    /* Runs TestLikePredicate test from the command line*/
    public static void main(String[] args) throws Exception {

        TestResult            result;
        TestCase              test;
        java.util.Enumeration failures;
        int                   count;

        result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java|(1599,212,<31,0>,<39,34>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import junit.framework.TestCase;
import junit.framework.TestResult;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCacheSize.java|(30898,171,<924,0>,<933,44>)","    }

    int nextIntRandom(Random r, int range) {

        int b = Math.abs(r.nextInt());

        return b % range;
    }

    public static void main(String[] argv) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(2786,217,<89,0>,<101,9>)","    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(42544,134,<1392,0>,<1398,13>)","                    end = true;
                    break;
            }

            if (end) {
                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(35704,159,<1122,0>,<1129,9>)","        }
    }

    public Object divide(Object a, Object b) throws HsqlException {

        if (a == null || b == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusConnectionDialog.java|(1834,269,<42,0>,<50,35>)","import java.awt.Label;
import java.awt.Panel;
import java.awt.SystemColor;
import java.awt.TextField;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ArrayUtil.java|(12200,104,<428,0>,<434,5>)","                    return true;
                }
            }
        }

        return false;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/TableWorks.java|(32057,286,<906,0>,<913,36>)","            case Types.TINYINT :
            case Types.SQL_SMALLINT :
            case Types.SQL_INTEGER :
            case Types.SQL_BIGINT :
            case Types.SQL_REAL :
            case Types.SQL_FLOAT :
            case Types.SQL_DOUBLE :
            case Types.SQL_NUMERIC :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSubQueriesInPreparedStatements.java|(1714,172,<38,0>,<43,26>)","import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(3236,641,<107,0>,<143,36>)","        int oldSize = size();

        super.addOrRemove(key, value, null, null, false);

        return oldSize != size();
    }

    public boolean remove(long key) {

        int oldSize = size();

        super.addOrRemove(key, 0, null, null, true);

        return oldSize != size();
    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSetMetaData.java|(46084,177,<1122,0>,<1132,1>)","                sb.append(',');
                sb.append(' ');
            }
        }

        sb.append('\n');
        sb.append(']');

        return sb.toString();
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcConnection.java|(129516,1357,<3167,0>,<3193,88>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4

    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(85765,139,<2087,0>,<2095,5>)","                    t.insertSys(row);
                }
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestDatabaseMetaData.java|(8944,158,<231,0>,<237,1>)","        failures = result.failures();

        while (failures.hasMoreElements()) {
            System.out.println(failures.nextElement());
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(19194,198,<584,0>,<593,9>)","        } else {
            throw Trace.error(Trace.INVALID_CONVERSION);
        }
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcCallableStatementTest.java|(2269,198,<56,0>,<65,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(41266,258,<1101,0>,<1107,44>)","        } else if (s.equals(""Refresh Tree"")) {
            refreshTree();
        } else if (s.startsWith(""#"")) {
            int i = Integer.parseInt(s.substring(1));

            txtCommand.setText(sRecent[i]);
        } else if (s.equals(""Connect..."")) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/ScaledRAFileHybrid.java|(4062,213,<135,0>,<147,5>)","    }

    public boolean canAccess(int length) {
        return true;
    }

    public boolean canSeek(long position) {
        return true;
    }

    public Database getDatabase() {
        return null;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(12991,117,<362,0>,<369,5>)","                t.insertSys(row);
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ScriptTool.java|(1683,178,<35,0>,<40,26>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(3009,464,<90,0>,<117,36>)","        while (it.hasNext()) {
            Object key = it.next();

            put(key, t.get(key));
        }
    }

    public Set keySet() {

        if (keySet == null) {
            keySet = new KeySet();
        }

        return keySet;
    }

    public Collection values() {

        if (values == null) {
            values = new Values();
        }

        return values;
    }

    class KeySet implements Set {

        public Iterator iterator() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BinaryType.java|(12248,592,<413,0>,<439,30>)","        if (hasLength) {
            end = offset + length;
        } else {
            end = dataLength > offset ? dataLength
                                      : offset;
        }

        if (end < offset) {
            throw Trace.error(Trace.SQL_DATA_SUBSTRING_ERROR);
        }

        if (offset > end || end < 0) {

            // return zero length data
            offset = 0;
            end    = 0;
        }

        if (offset < 0) {
            offset = 0;
        }

        if (end > dataLength) {
            end = dataLength;
        }

        length = end - offset;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Types.java|(30438,490,<870,0>,<879,44>)","            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(26960,159,<785,0>,<792,9>)","        }
    }

    public Object divide(Object a, Object b) throws HsqlException {

        if (a == null || b == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/CachedRow.java|(11322,221,<378,0>,<391,1>)","        }

        return false;
    }

    /**
     * Hash code is valid only until a modification to the cache
     *
     * @return file position of row
     */
    public int hashCode() {
        return iPos;
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(14518,422,<446,0>,<456,9>)","        Dimension d    = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension size = fMain.getSize();

        // (ulrivo): full size on screen with less than 640 width
        if (d.width >= 640) {
            fMain.setLocation((d.width - size.width) / 2,
                              (d.height - size.height) / 2);
        } else {
            fMain.setLocation(0, 0);
            fMain.setSize(d);
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataMemory.java|(1652,201,<34,0>,<41,35>)","import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;

import org.hsqldb.HsqlException;
import org.hsqldb.SessionInterface;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/OrderedIntHashSet.java|(3413,150,<121,0>,<129,1>)","    }

    private void checkRange(int i) {

        if (i < 0 || i >= size()) {
            throw new IndexOutOfBoundsException();
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/pool/ManagedPoolDataSource.java|(19394,1356,<468,0>,<493,88>)","        if (isWrapperFor(iface)) {
            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4

    /**
     * Returns true if this either implements the interface argument or is directly or indirectly a wrapper
     * for an object that does. Returns false otherwise. If this implements the interface then return true,
     * else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
     * object. If this does not implement the interface and is not a wrapper, return false.
     * This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
     * callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
     * returns true then calling <code>unwrap</code> with the same argument should succeed.
     *
     * @param iface a Class defining an interface.
     * @return true if this implements the interface or directly or indirectly wraps an object that does.
     * @throws java.sql.SQLException  if an error occurs while determining whether this is a wrapper
     * for an object with the given interface.
     * @since JDK 1.6, HSQLDB 1.8.x
     */
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(66025,176,<1936,0>,<1942,39>)","        for (int i = 0; i < iMaxRecent; i++) {
            if (s.equals(sRecent[i])) {
                return;
            }
        }

        if (sRecent[iRecent] != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(19866,196,<640,0>,<648,31>)","            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestDatabaseMetaData.java|(8491,257,<213,0>,<222,34>)","    }

    public static void main(String[] args) throws Exception {

        TestResult            result;
        TestCase              test;
        java.util.Enumeration failures;
        int                   count;

        result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(11775,173,<404,0>,<412,34>)","    }

    public Object convertToDefaultType(Object a) throws HsqlException {

        if (a == null) {
            return a;
        }

        if (a instanceof String) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(63528,260,<1840,0>,<1852,51>)","            }

            gResult.addRow(g);
            System.out.println(l + "" ms : "" + sql);
        }

        g[0] = """" + total;
        g[1] = ""total"";
        g[2] = """";

        gResult.addRow(g);

        lTime = System.currentTimeMillis() - lTime;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(70437,4507,<1779,0>,<1866,24>)","        }

        t.setDataReadOnly(true);

        return t;
    }

    /**
     * Retrieves a <code>Table</code> object describing the
     * return, parameter and result columns of the accessible
     * routines defined within this database.<p>
     *
     * Each row is a procedure column description with the following
     * columns: <p>
     *
     * <pre class=""SqlCodeExample"">
     * PROCEDURE_CAT   VARCHAR   routine catalog
     * PROCEDURE_SCHEM VARCHAR   routine schema
     * PROCEDURE_NAME  VARCHAR   routine name
     * COLUMN_NAME     VARCHAR   column/parameter name
     * COLUMN_TYPE     SMALLINT  kind of column/parameter
     * DATA_TYPE       SMALLINT  SQL type from DITypes
     * TYPE_NAME       VARCHAR   SQL type name
     * PRECISION       INTEGER   precision (length) of type
     * LENGTH          INTEGER   transfer size, in bytes, if definitely known
     *                           (roughly equivalent to BUFFER_SIZE for table
     *                           columns)
     * SCALE           SMALLINT  scale
     * RADIX           SMALLINT  radix
     * NULLABLE        SMALLINT  can column contain NULL?
     * REMARKS         VARCHAR   explanatory comment on column
     * // JDBC 4.0
     * COLUMN_DEF        VARCHAR The default column value.
     *                           The string NULL (not enclosed in quotes)
     *                           - If NULL was specified as the default value
     *                           TRUNCATE (not enclosed in quotes)
     *                           - If the specified default value cannot be
     *                           represented without truncation
     *                           NULL
     *                           - If a default value was not specified
     * SQL_DATA_TYPE     INTEGER CLI type list from SQL 2003 Table 37,
     *                           tables 6-9 Annex A1, and/or addendums in other
     *                           documents, such as:
     *                           SQL 2003 Part 9: Management of External Data (SQL/MED) : DATALINK
     *                           SQL 2003 Part 14: XML-Related Specifications (SQL/XML) : XML
     * SQL_DATETIME_SUB  INTEGER SQL 2003 CLI datetime/interval subcode.
     * CHAR_OCTET_LENGTH INTEGER The maximum length of binary and character
     *                           based columns.  For any other datatype the
     *                           returned value is a NULL
     * ORDINAL_POSITION  INTEGER The ordinal position, starting from 1, for the
     *                           input and output parameters for a procedure.
     *                           A value of 0 is returned if this row describes
     *                           the procedure's return value.
     * IS_NULLABLE       VARCHAR ISO rules are used to determinte the nulliblity
     *                           for a column.
     *
     *                           YES (enclosed in quotes)  --- if the column can include NULLs
     *                           NO  (enclosed in quotes)  --- if the column cannot include NULLs
     *                           empty string              --- if the nullability for the column is unknown
     *
     * SPECIFIC_NAME     VARCHAR The name which uniquely identifies this
     *                           procedure within its schema.
     *                           Typically (but not restricted to) a
     *                           fully qualified Java Method name and
     *                           signature
     * // HSQLDB extension
     * JDBC_SEQ          INTEGER The JDBC-specified order within
     *                           runs of PROCEDURE_SCHEM, PROCEDURE_NAME,
     *                           SPECIFIC_NAME, which is:
     *
     *                           return value (0), if any, first, followed
     *                           by the parameter descriptions in call order
     *                           (1..n1), followed by the result column
     *                           descriptions in column number order
     *                           (n1 + 1..n1 + n2)
     * </pre> <p>
     *
     * @return a <code>Table</code> object describing the
     *        return, parameter and result columns
     *        of the accessible routines defined
     *        within this database.
     * @throws HsqlException if an error occurs while producing the table
     */
    Table SYSTEM_PROCEDURECOLUMNS() throws HsqlException {

        Table t = sysTables[SYSTEM_PROCEDURECOLUMNS];

        if (t == null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Parser.java|(35472,145,<1121,0>,<1129,5>)","            if (tokenType == Token.COMMA) {
                read();

                continue;
            }

            break;
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(1599,212,<31,0>,<39,34>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import junit.framework.TestCase;
import junit.framework.TestResult;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestLobs.java|(2037,178,<52,0>,<60,54>)","    }

    protected void setUp() {

        super.setUp();

        try {
            connection = super.newConnection();
            statement  = connection.createStatement();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(4236,248,<157,0>,<167,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyLongValueHashMap.java|(5034,451,<191,0>,<210,29>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(3089,211,<80,0>,<87,36>)","    }

    public int displaySize() {
        return precision > Integer.MAX_VALUE ? Integer.MAX_VALUE
                                             : (int) precision;
    }

    public int getJDBCTypeNumber() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DITypeInfo.java|(32483,454,<1020,0>,<1036,5>)","        switch (type) {

            case Types.SQL_BIGINT :
            case Types.SQL_DECIMAL :
            case Types.SQL_DOUBLE :
            case Types.SQL_FLOAT :
            case Types.SQL_INTEGER :
            case Types.SQL_NUMERIC :
            case Types.SQL_REAL :
            case Types.SQL_SMALLINT :
            case Types.TINYINT :
                return Boolean.FALSE;

            default :
                return null;
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongDeque.java|(4199,219,<157,0>,<167,9>)","        resetCapacity();

        firstindex--;

        if (firstindex < 0) {
            firstindex = list.length - 1;

            if (endindex == 0) {
                endindex = list.length;
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobDataID.java|(2432,141,<69,0>,<78,5>)","        return null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManagerSwing.java|(22078,241,<555,0>,<561,30>)","        try {
            if (autoConnect && urlidConnect) {
                throw new IllegalArgumentException(
                    ""You may not specify both (urlid) AND (url/user/password)."");
            }

            if (autoConnect) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestSqlPersistent.java|(1718,178,<36,0>,<41,26>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(87342,192,<3007,0>,<3017,9>)","                }

                if (tokenType == Token.COMMA) {
                    read();

                    continue;
                }

                break;
            }
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationMain.java|(67823,4507,<1683,0>,<1770,24>)","        }

        t.setDataReadOnly(true);

        return t;
    }

    /**
     * Retrieves a <code>Table</code> object describing the
     * return, parameter and result columns of the accessible
     * routines defined within this database.<p>
     *
     * Each row is a procedure column description with the following
     * columns: <p>
     *
     * <pre class=""SqlCodeExample"">
     * PROCEDURE_CAT   VARCHAR   routine catalog
     * PROCEDURE_SCHEM VARCHAR   routine schema
     * PROCEDURE_NAME  VARCHAR   routine name
     * COLUMN_NAME     VARCHAR   column/parameter name
     * COLUMN_TYPE     SMALLINT  kind of column/parameter
     * DATA_TYPE       SMALLINT  SQL type from DITypes
     * TYPE_NAME       VARCHAR   SQL type name
     * PRECISION       INTEGER   precision (length) of type
     * LENGTH          INTEGER   transfer size, in bytes, if definitely known
     *                           (roughly equivalent to BUFFER_SIZE for table
     *                           columns)
     * SCALE           SMALLINT  scale
     * RADIX           SMALLINT  radix
     * NULLABLE        SMALLINT  can column contain NULL?
     * REMARKS         VARCHAR   explanatory comment on column
     * // JDBC 4.0
     * COLUMN_DEF        VARCHAR The default column value.
     *                           The string NULL (not enclosed in quotes)
     *                           - If NULL was specified as the default value
     *                           TRUNCATE (not enclosed in quotes)
     *                           - If the specified default value cannot be
     *                           represented without truncation
     *                           NULL
     *                           - If a default value was not specified
     * SQL_DATA_TYPE     INTEGER CLI type list from SQL 2003 Table 37,
     *                           tables 6-9 Annex A1, and/or addendums in other
     *                           documents, such as:
     *                           SQL 2003 Part 9: Management of External Data (SQL/MED) : DATALINK
     *                           SQL 2003 Part 14: XML-Related Specifications (SQL/XML) : XML
     * SQL_DATETIME_SUB  INTEGER SQL 2003 CLI datetime/interval subcode.
     * CHAR_OCTET_LENGTH INTEGER The maximum length of binary and character
     *                           based columns.  For any other datatype the
     *                           returned value is a NULL
     * ORDINAL_POSITION  INTEGER The ordinal position, starting from 1, for the
     *                           input and output parameters for a procedure.
     *                           A value of 0 is returned if this row describes
     *                           the procedure's return value.
     * IS_NULLABLE       VARCHAR ISO rules are used to determinte the nulliblity
     *                           for a column.
     *
     *                           YES (enclosed in quotes)  --- if the column can include NULLs
     *                           NO  (enclosed in quotes)  --- if the column cannot include NULLs
     *                           empty string              --- if the nullability for the column is unknown
     *
     * SPECIFIC_NAME     VARCHAR The name which uniquely identifies this
     *                           procedure within its schema.
     *                           Typically (but not restricted to) a
     *                           fully qualified Java Method name and
     *                           signature
     * // HSQLDB extension
     * JDBC_SEQ          INTEGER The JDBC-specified order within
     *                           runs of PROCEDURE_SCHEM, PROCEDURE_NAME,
     *                           SPECIFIC_NAME, which is:
     *
     *                           return value (0), if any, first, followed
     *                           by the parameter descriptions in call order
     *                           (1..n1), followed by the result column
     *                           descriptions in column number order
     *                           (n1 + 1..n1 + n2)
     * </pre> <p>
     *
     * @return a <code>Table</code> object describing the
     *        return, parameter and result columns
     *        of the accessible routines defined
     *        within this database.
     * @throws HsqlException if an error occurs while producing the table
     */
    Table SYSTEM_PROCEDURECOLUMNS() throws HsqlException {

        Table t = sysTables[SYSTEM_PROCEDURECOLUMNS];

        if (t == null) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/ScaledRAFile.java|(8341,220,<232,0>,<238,13>)","            if (readLength <= 0) {
                throw new IOException(""read beyond end of file"");
            }

            if (readLength > buffer.length) {
                readLength = buffer.length;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/Type.java|(18068,629,<540,0>,<552,44>)","            case Types.SQL_INTERVAL_YEAR :
            case Types.SQL_INTERVAL_YEAR_TO_MONTH :
            case Types.SQL_INTERVAL_MONTH :
            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcClobTest.java|(4807,547,<145,0>,<161,45>)","        try {
            clob.setString(1, ""T"");

            assertEquals(1L, clob.length());
            assertEquals(3, clob.setString(2L, ""ask""));
            assertEquals(4L, clob.length());
            assertEquals(""Task"", clob.getSubString(1L, 4));
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }

    /**
     * Test of setAsciiStream method, of class org.hsqldb.jdbc.jdbcClob.
     */
    public void testSetAsciiStream() throws Exception {
        System.out.println(""setAsciiStream"");"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestQuotes.java|(1599,204,<31,0>,<38,26>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(8695,217,<266,0>,<278,9>)","    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcPreparedStatementTest.java|(1630,178,<31,0>,<37,28>)","package org.hsqldb.jdbc;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BlobType.java|(3765,302,<129,0>,<141,34>)","        }

        throw Trace.error(Trace.INVALID_CONVERSION);
    }

    public Object convertToDefaultType(Object a) throws HsqlException {

        if (a == null) {
            return a;
        }

        // conversion to Blob via PreparedStatement.setObject();
        if (a instanceof byte[]) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ConnectionDialog.java|(11199,407,<384,0>,<404,1>)","        }
    }

    /**
     * Method declaration
     *
     *
     * @param e
     */
    public void itemStateChanged(ItemEvent e) {

        String s = (String) e.getItem();

        for (int i = 0; i < connTypes.length; i++) {
            if (s.equals(connTypes[i][0])) {
                mDriver.setText(connTypes[i][1]);
                mURL.setText(connTypes[i][2]);
            }
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcClob.java|(26693,222,<645,0>,<652,5>)","                } catch (SQLException se) {
                    throw new java.io.IOException(se.toString());
                } finally {
                    super.close();
                }
            }
        };
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobDataRemoteClient.java|(1626,201,<33,0>,<40,35>)","import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;

import org.hsqldb.HsqlException;
import org.hsqldb.SessionInterface;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestCacheSize.java|(16041,229,<481,0>,<488,30>)","    protected void checkResults() {

        try {
            StopWatch sw = new StopWatch();
            ResultSet rs;

            cConnection = DriverManager.getConnection(url + filepath, user,
                    password);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSet.java|(1989,254,<46,0>,<59,23>)","import java.util.Calendar;

//#ifdef JAVA2
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Ref;
import java.util.Map;

//#endif JAVA2
//#ifdef JDBC4
import java.sql.NClob;
import java.sql.RowId;
import java.sql.SQLXML;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ClosableCharArrayWriter.java|(13903,1252,<398,0>,<444,21>)","    }

    /**
     * Closes this object for further writing. <p>
     *
     * Other operations may continue to succeed until after the first invocation
     * of {@link #free() free()}. <p>
     *
     * @throws java.io.IOException if an I/O error occurs (default: never)
     */
    public synchronized void close() throws IOException {
        closed = true;
    }

    /**
     * @return <tt>true</tt> if this writer is closed, else <tt>false</tt>
     */
    public synchronized boolean isClosed() {
        return closed;
    }

    /**
     * Closes this object and releases the underlying buffer for
     * garbage collection. <p>
     *
     * @throws java.io.IOException if an I/O error occurs while closing
     *      this writer (default: never).
     */
    public synchronized void free() throws IOException {
        closed = true;
        freed  = true;
        buf    = null;
        count  = 0;
    }

    /**
     * @return <tt>true</tt> if this writer is freed; else <tt>false</tt>.
     */
    public synchronized boolean isFreed() {
        return freed;
    }

    /**
     * @throws java.io.IOException if this writer is closed.
     */
    protected synchronized void checkClosed() throws IOException {
        if (closed) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Parser.java|(16455,160,<456,0>,<463,13>)","                default :
                    end = true;
                    break;
            }

            if (end) {
                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/pool/BaseConnectionWrapper.java|(11896,302,<414,0>,<424,5>)","            return (T) this;
        }

        throw Util.invalidArgument(""iface: "" + iface);
    }

//#endif JDBC4
//#ifdef JDBC4
    public boolean isWrapperFor(java.lang.Class<?> iface) throws java.sql.SQLException {
        return (iface != null && iface.isAssignableFrom(this.getClass()));
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/SqlFile.java|(1694,176,<35,0>,<40,33>)","import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestStoredProcedure.java|(3950,158,<124,0>,<130,1>)","        failures = result.failures();

        while (failures.hasMoreElements()) {
            System.out.println(failures.nextElement());
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcBlobTest.java|(8544,235,<296,0>,<305,1>)","            assertTrue(""truncate operation allowed after free"", false);
        } catch (Exception e){ }
    }

    public static void main(java.lang.String[] argList) {

        junit.textui.TestRunner.run(suite());
    }

}"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(14324,147,<452,0>,<459,9>)","        }
    }

    public Object convertToDefaultType(Object a) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/server/Server.java|(13672,447,<347,0>,<355,57>)","        HsqlProperties fileProps =
            ServerConfiguration.getPropertiesFromFile(propsPath);
        HsqlProperties props = fileProps == null ? new HsqlProperties()
                                                 : fileProps;
        HsqlProperties stringProps = HsqlProperties.argArrayToProps(args,
            ServerConstants.SC_KEY_PREFIX);

        if (stringProps != null) {
            if (stringProps.getErrorKeys().length != 0) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusChoice.java|(3119,252,<94,0>,<105,38>)","    }

    public void requestFocus() {
        super.requestFocus();
    }

    public void setChanged() {
        countChanges++;
    }

    // set the choice to the element in choice of the corresponding value
    public void setContent(String s) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntValueHashMap.java|(4740,248,<175,0>,<185,41>)","        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/ClosableByteArrayOutputStream.java|(8570,1789,<238,0>,<289,5>)","    }

    /**
     * Returns the current capacity of this stream's data buffer.
     *
     * @return  the length of the internal data array
     * @throws java.io.IOException if an I/O error occurs.
     *      In particular, an <tt>IOException</tt> may be thrown
     *      if this output stream has been {@link #free() freed}.
     */
    public synchronized int capacity() throws IOException {
        checkFreed();

	return buf.length;
    }

    /**
     * Resets the <tt>count</tt> field of this output stream to zero, so that
     * all currently accumulated data is effectively discarded. <p>
     *
     * Further write operations will reuse the allocated buffer space. <p>
     *
     * @see #count
     * @throws java.io.IOException if an I/O error occurs.
     *      In particular, an <tt>IOException</tt> may be thrown
     *      if this output stream has been {@link #close() closed}.
     */
    public synchronized void reset() throws IOException {
        checkClosed();

        count = 0;
    }

    /**
     * Attempts to reduce this stream's capacity to its current size. <p>
     *
     * If the data buffer is larger than necessary to hold its current sequence
     * of bytes, then it may be resized to become more space efficient.
     * Calling this method may, but is not required to, affect the value
     * returned by a subsequent call to the {@link #capacity()} method. <p>
     *
     * @throws java.io.IOException if an I/O error occurs.
     *      In particular, an <tt>IOException</tt> may be thrown
     *      if this output stream has been {@link #free() freed}.
     */
    public synchronized void trimToSize() throws IOException {
        checkFreed();

        if (buf.length > count) {
            buf = copyOf(buf, count);
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/ZaurusDatabaseManager.java|(15140,600,<478,0>,<494,13>)","        } else if (s.equals(""Save Script..."")) {
            FileDialog f = new FileDialog(fMain, ""Save Script"",
                                          FileDialog.SAVE);

            // (ulrivo): set default directory if set from command line
            if (defDirectory != null) {
                f.setDirectory(defDirectory);
            }

            f.show();

            String file = f.getFile();

            if (file != null) {
                DatabaseManagerCommon.writeFile(f.getDirectory() + file,
                                                txtCommand.getText());
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Parser.java|(24159,134,<759,0>,<765,13>)","                    end = true;
                    break;
            }

            if (end) {
                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/IntKeyLongValueHashMap.java|(2826,178,<84,0>,<93,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            value[0] = longValueTable[lookup];

            return true;
        }

        return false;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(20307,129,<617,0>,<624,9>)","        }
    }

    public String convertToSQLString(Object a) {

        if (a == null) {
            return ""NULL"";
        }
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcRowIdTest.java|(4077,170,<122,0>,<130,1>)","        assertEquals(expResult, result);
    }

    public static void main(java.lang.String[] argList) {

        junit.textui.TestRunner.run(suite());
    }

}"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(2944,164,<91,0>,<98,5>)","        Iterator it = t.keySet().iterator();

        while (it.hasNext()) {
            Object key = it.next();

            put(key, t.get(key));
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Grid.java|(5493,797,<167,0>,<205,5>)","    }

    /**
     * Method declaration
     *
     *
     * @param d
     */
    public void setMinimumSize(Dimension d) {
        dMinimum = d;
    }

    /**
     * Method declaration
     *
     *
     * @param x
     * @param y
     * @param w
     * @param h
     */
    public void setBounds(int x, int y, int w, int h) {

        // fredt@users 20011210 - patch 450412 by elise@users
        super.setBounds(x, y, w, h);

        iSbHeight = sbHoriz.getPreferredSize().height;
        iSbWidth  = sbVert.getPreferredSize().width;
        iHeight   = h - iSbHeight;
        iWidth    = w - iSbWidth;

        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);
        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);
        adjustScroll();

        iImage = null;

        repaint();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(16133,190,<512,0>,<517,5>)","            }
            default :
                throw Trace.runtimeError(Trace.UNSUPPORTED_INTERNAL_OPERATION,
                                         ""CharacterType"");
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(32397,4795,<802,0>,<933,5>)","    }

    /**
     * <!-- start generic documentation -->
     * (JDBC4 clarification:)
     * Gives the JDBC driver a hint as to the number of rows that should
     * be fetched from the database when more rows are needed for
     * <code>ResultSet</code> objects genrated by this <code>Statement</code>.
     * If the value specified is zero, then the hint is ignored.
     * The default value is zero.
     * <!-- start generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB uses the specified value as a hint, but may process more or fewer
     * rows than specified.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param rows the number of rows to fetch
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code> or the
     *        (JDBC4 modified:)
     *        condition  <code>rows >= 0</code> is not satisfied.
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *   for jdbcStatement)
     * @see #getFetchSize
     */
    public void setFetchSize(int rows) throws SQLException {

        checkClosed();

        if (rows < 0) {
            throw Util.outOfRangeArgument();
        }

        fetchSize = rows;
    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the number of result set rows that is the default
     * fetch size for <code>ResultSet</code> objects
     * generated from this <code>Statement</code> object.
     * If this <code>Statement</code> object has not set
     * a fetch size by calling the method <code>setFetchSize</code>,
     * the return value is implementation-specific.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <b>HSQLDB-Specific Information</b> <p>
     *
     * HSQLDB returns 0 by default, or the fetch size specified by setFetchSize
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return the default fetch size for result sets generated
     *          from this <code>Statement</code> object
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *  for jdbcStatement)
     * @see #setFetchSize
     */
    public int getFetchSize() throws SQLException {

        checkClosed();

        return fetchSize;
    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the result set concurrency for <code>ResultSet</code> objects
     * generated by this <code>Statement</code> object.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, HSQLDB supports only
     * <code>CONCUR_READ_ONLY</code> concurrency.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return either <code>ResultSet.CONCUR_READ_ONLY</code> or
     * <code>ResultSet.CONCUR_UPDATABLE</code>
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *  for jdbcStatement)
     */
    public int getResultSetConcurrency() throws SQLException {

        checkClosed();

        return rsConcurrency;
    }

    /**
     * <!-- start generic documentation -->
     * Retrieves the result set type for <code>ResultSet</code> objects
     * generated by this <code>Statement</code> object.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * HSQLDB 1.7.0 and later versions support <code>TYPE_FORWARD_ONLY</code>
     * and <code>TYPE_SCROLL_INSENSITIVE</code>.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return one of <code>ResultSet.TYPE_FORWARD_ONLY</code>,
     * <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
     * <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *   for jdbcStatement)
     */
    public int getResultSetType() throws SQLException {

        checkClosed();

        return rsScrollability;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/server/Server.java|(14714,682,<375,0>,<396,5>)","        try {
            server.setProperties(props);
        } catch (Exception e) {
            server.printError(""Failed to set properties"");
            server.printStackTrace(e);

            return;
        }

        // now messages go to the channel specified in properties
        server.print(""Startup sequence initiated from main() method"");

        if (fileProps != null) {
            server.print(""Loaded properties from ["" + propsPath
                         + "".properties]"");
        } else {
            server.print(""Could not load properties from file"");
            server.print(""Using cli/default properties only"");
        }

        server.start();
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/IntervalType.java|(4525,490,<134,0>,<143,44>)","            case Types.SQL_INTERVAL_DAY :
            case Types.SQL_INTERVAL_DAY_TO_HOUR :
            case Types.SQL_INTERVAL_DAY_TO_MINUTE :
            case Types.SQL_INTERVAL_DAY_TO_SECOND :
            case Types.SQL_INTERVAL_HOUR :
            case Types.SQL_INTERVAL_HOUR_TO_MINUTE :
            case Types.SQL_INTERVAL_HOUR_TO_SECOND :
            case Types.SQL_INTERVAL_MINUTE :
            case Types.SQL_INTERVAL_MINUTE_TO_SECOND :
            case Types.SQL_INTERVAL_SECOND :
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/BooleanType.java|(3527,230,<125,0>,<134,33>)","    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return a;
        }

        switch (otherType.type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(2725,217,<85,0>,<97,9>)","    public int compare(Object a, Object b) {

        if (a == b) {
            return 0;
        }

        if (a == null) {
            return -1;
        }

        if (b == null) {
            return 1;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(50029,160,<1636,0>,<1643,13>)","                default :
                    end = true;
                    break;
            }

            if (end) {
                break;
            }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/NumberSequence.java|(3929,212,<129,0>,<141,5>)","    }

    public HsqlName getName() {
        return name;
    }

    public HsqlName getSchemaName() {
        return name.schema;
    }

    public Grantee getOwner() {
        return name.schema.owner;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/JDBCBench.java|(507,178,<14,0>,<19,26>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/dbinfo/DatabaseInformationFull.java|(56542,139,<1466,0>,<1474,5>)","                    t.insertSys(row);
                }
            }
        }

        t.setDataReadOnly(true);

        return t;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(31273,171,<982,0>,<990,23>)","    }

    public Object add(Object a, Object b) throws HsqlException {

        if (a == null || b == null) {
            return null;
        }

        switch (type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(2807,154,<83,0>,<90,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            return intValueTable[lookup];
        }

        return defaultValue;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(3011,177,<94,0>,<103,5>)","        int lookup = getLookup(key);

        if (lookup != -1) {
            value[0] = intValueTable[lookup];

            return true;
        }

        return false;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/CharacterType.java|(11534,190,<362,0>,<367,5>)","            }
            default :
                throw Trace.runtimeError(Trace.UNSUPPORTED_INTERNAL_OPERATION,
                                         ""CharacterType"");
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(4708,506,<177,0>,<199,29>)","        }

        public boolean contains(Object o) {
            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
            throw new RuntimeException();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void clear() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestHarness.java|(1735,169,<37,0>,<43,26>)","package org.hsqldb.test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/LongKeyIntValueHashMap.java|(3049,139,<96,0>,<103,5>)","        if (lookup != -1) {
            value[0] = intValueTable[lookup];

            return true;
        }

        return false;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Types.java|(40271,454,<1196,0>,<1212,5>)","        switch (type) {

            case Types.SQL_BIGINT :
            case Types.SQL_DECIMAL :
            case Types.SQL_DOUBLE :
            case Types.SQL_FLOAT :
            case Types.SQL_INTEGER :
            case Types.SQL_NUMERIC :
            case Types.SQL_REAL :
            case Types.SQL_SMALLINT :
            case Types.TINYINT :
                return Boolean.FALSE;

            default :
                return null;
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestBug778213.java|(5278,318,<173,0>,<183,34>)","    }

    /* Runs TestBug778213_Part3 test from the command line*/
    public static void main(String[] args) throws Exception {

        TestResult            result;
        TestCase              test;
        java.util.Enumeration failures;
        int                   count;

        result = new TestResult();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/pool/JDBCXADataSource.java|(4523,678,<127,0>,<141,78>)","        try {
            Class.forName(driver).newInstance();
        } catch (ClassNotFoundException e) {
            throw new SQLException(""Error opening connection: ""
                                   + e.getMessage());
        } catch (IllegalAccessException e) {
            throw new SQLException(""Error opening connection: ""
                                   + e.getMessage());
        } catch (InstantiationException e) {
            throw new SQLException(""Error opening connection: ""
                                   + e.getMessage());
        }

        jdbcConnection connection =
            (jdbcConnection) DriverManager.getConnection(url, connProperties);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HsqlDeque.java|(5614,249,<219,0>,<226,52>)","            firstindex++;

            if (firstindex == list.length) {
                firstindex = 0;
            }
        } else {
            System.arraycopy(list, target + 1, list, target,
                             endindex - target - 1);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/Tree.java|(6880,208,<242,0>,<257,25>)","    }

    /**
     * Method declaration
     *
     */
    public void update() {
        adjustScroll();
        repaint();
    }

    /**
     * Method declaration
     *
     */
    void adjustScroll() {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/preprocessor/Token.java|(2840,133,<72,0>,<78,5>)","                return true;
            }
            default : {
                return false;
            }
        }
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestGroupByHaving.java|(2936,439,<74,0>,<85,45>)","        super(s);
    }

    //------------------------------------------------------------
    // Class methods
    //------------------------------------------------------------
    protected static Connection getJDBCConnection() throws SQLException {
        return DriverManager.getConnection(databaseURL, databaseUser,
                                           databasePassword);
    }

    protected void setUp() throws Exception {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcResultSet.java|(2173,201,<57,0>,<65,24>)","import java.sql.NClob;
import java.sql.RowId;
import java.sql.SQLXML;

//#endif JDBC4
import org.hsqldb.HsqlDateTime;
import org.hsqldb.HsqlException;
import org.hsqldb.Trace;
import org.hsqldb.Types;
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcParameterMetaDataTest.java|(1948,198,<45,0>,<54,5>)","        super(testName);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcParameterMetaData.java|(16063,177,<451,0>,<461,1>)","                sb.append(',');
                sb.append(' ');
            }
        }

        sb.append('\n');
        sb.append(']');

        return sb.toString();
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestLibSpeed.java|(2284,186,<58,0>,<64,12>)","        }, {
            ""COS"", ""java.lang.Math.cos""
        }, {
            ""COT"", ""org.hsqldb.Library.cot""
        }, {
            ""DEGREES"", ""java.lang.Math.toDegrees""
        }, {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/jdbc/jdbcStatement.java|(26223,4801,<643,0>,<764,22>)","    }

    /**
     * <!-- start generic documentation -->
     *  Retrieves the current result as a <code>ResultSet</code> object.
     *  This method should be called only once per result.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Without an interceding call to executeXXX, each invocation of this
     * method will produce a new, initialized ResultSet instance referring to
     * the current result, if any.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @return the current result as a <code>ResultSet</code> object or
     * <code>null</code> if the result is an update count or there are no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     */
    public ResultSet getResultSet() throws SQLException {

        checkClosed();

        return currentResultSet;
    }

    /**
     * <!-- start generic documentation -->
     *  Retrieves the current result as an update count;
     *  if the result is a <code>ResultSet</code> object or there are no more results, -1
     *  is returned. This method should be called only once per result.
     * <!-- end generic documentation -->
     *
     * @return the current result as an update count; -1 if the current result is a
     * <code>ResultSet</code> object or there are no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     */
    public int getUpdateCount() throws SQLException {

        checkClosed();

        return (resultIn == null || resultIn.isData()) ? -1
                                                       : resultIn
                                                       .getUpdateCount();
    }

    /**
     * <!-- start generic documentation -->
     * Moves to this <code>Statement</code> object's next result, returns
     * <code>true</code> if it is a <code>ResultSet</code> object, and
     * implicitly closes any current <code>ResultSet</code>
     * object(s) obtained with the method <code>getResultSet</code>.
     *
     * <P>There are no more results when the following is true:
     * <PRE>
     *     // stmt is a Statement object
     *     ((stmt.getMoreResults() == false) && (stmt.getUpdateCount() == -1))
     * </PRE>
     * <!-- end generic documentation -->
     *
     * @return <code>true</code> if the next result is a <code>ResultSet</code>
     *         object; <code>false</code> if it is an update count or there are
     *         no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     */
    public boolean getMoreResults() throws SQLException {

        checkClosed();

        resultIn = null;

        return false;
    }

    //--------------------------JDBC 2.0-----------------------------

    /**
     * <!-- start generic documentation -->
     * Gives the driver a hint as to the direction in which
     * rows will be processed in <code>ResultSet</code>
     * objects created using this <code>Statement</code> object.  The
     * default value is <code>ResultSet.FETCH_FORWARD</code>.
     * <P>
     * Note that this method sets the default fetch direction for
     * result sets generated by this <code>Statement</code> object.
     * Each result set has its own methods for getting and setting
     * its own fetch direction.
     * <!-- end generic documentation -->
     *
     * <!-- start release-specific documentation -->
     * <div class=""ReleaseSpecificDocumentation"">
     * <h3>HSQLDB-Specific Information:</h3> <p>
     *
     * Including 1.8.0.x, HSQLDB supports only <code>FETCH_FORWARD</code>. <p>
     *
     * Setting any other value will throw an <code>SQLException</code>
     * stating that the operation is not supported.
     * </div>
     * <!-- end release-specific documentation -->
     *
     * @param direction the initial direction for processing rows
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     * or the given direction
     * is not one of <code>ResultSet.FETCH_FORWARD</code>,
     * <code>ResultSet.FETCH_REVERSE</code>, or <code>ResultSet.FETCH_UNKNOWN</code>
     * @since JDK 1.2 (JDK 1.1.x developers: read the overview
     *    for jdbcStatement)
     * @see #getFetchDirection
     */
    public void setFetchDirection(int direction) throws SQLException {

        checkClosed();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestLikePredicateOptimizations.java|(6744,158,<222,0>,<228,1>)","        failures = result.failures();

        while (failures.hasMoreElements()) {
            System.out.println(failures.nextElement());
        }
    }
}
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowInputBinary.java|(2114,229,<49,0>,<54,29>)","import org.hsqldb.types.IntervalMonthData;
import org.hsqldb.types.IntervalSecondData;
import org.hsqldb.types.IntervalType;
import org.hsqldb.types.JavaObjectData;
import org.hsqldb.types.TimeData;
import org.hsqldb.types.Type;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/DatabaseManager.java|(33254,319,<1177,0>,<1193,42>)","                b.append(' ');
            }
        }

        b.append(NL);

        for (int i = 0; i < width; i++) {
            for (int l = 0; l < size[i]; l++) {
                b.append('-');
            }

            b.append(' ');
        }

        b.append(NL);

        for (int i = 0; i < height; i++) {
"
2007,"|java+compilationUnit:///base/trunk/test/org/hsqldb/jdbc/jdbcNClobTest.java|(3468,474,<101,0>,<116,46>)","        assertReaderEquals(expResult, result);
    }

    /**
     * Test of getAsciiStream method, of class org.hsqldb.jdbc.jdbcNClob.
     */
    public void testGetAsciiStream() throws Exception {
        System.out.println(""getAsciiStream"");

        StringBuffer sb = new StringBuffer();

        for (int i = Character.MAX_VALUE; i <= Character.MAX_VALUE; i++) {
            sb.append((char)i);
        }

        String      testVal   = sb.toString();"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(12340,198,<420,0>,<429,9>)","        } else {
            throw Trace.error(Trace.INVALID_CONVERSION);
        }
    }

    public String convertToString(Object a) {

        if (a == null) {
            return null;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/MultiValueHashMap.java|(4659,290,<170,0>,<181,41>)","            throw new RuntimeException();
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/NumberType.java|(16331,195,<526,0>,<533,9>)","    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return a;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(77348,109,<2625,0>,<2630,5>)","            }
            default : {
                throw unexpectedToken();
            }
        }
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/persist/ScaledRAFileInJar.java|(3150,185,<87,0>,<94,54>)","        seekPosition = position;
    }

    public long getFilePointer() throws IOException {
        return seekPosition;
    }

    private void readIntoBuffer() throws IOException {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/util/QueryTool.java|(3499,207,<72,0>,<78,28>)","import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/lib/HashMap.java|(3946,297,<140,0>,<153,33>)","            }
        }

        public boolean add(Object value) {
            throw new RuntimeException();
        }

        public boolean addAll(Collection c) {
            throw new RuntimeException();
        }

        public boolean remove(Object o) {

            int oldSize = size();
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/DateTimeType.java|(8366,230,<300,0>,<309,33>)","    }

    public Object convertToType(Session session, Object a,
                                Type otherType) throws HsqlException {

        if (a == null) {
            return a;
        }

        switch (otherType.type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestAllTypes.java|(10020,229,<270,0>,<277,30>)","    protected void checkResults() {

        try {
            StopWatch sw = new StopWatch();
            ResultSet rs;

            cConnection = DriverManager.getConnection(url + filepath, user,
                    password);
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/types/ClobType.java|(2376,149,<63,0>,<71,5>)","    }

    public int getSQLGenericTypeNumber() {
        return type;
    }

    public int getSQLSpecificTypeNumber() {
        return type;
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/TableWorks.java|(27348,492,<764,0>,<779,17>)","                    Table      t = c.getMain();

                    if (t != table) {
                        tableSet.add(t);
                    }

                    t = c.getRef();

                    if (t != table) {
                        tableSet.add(t);
                    }

                    constraintNameSet.add(c.getMainName());
                    constraintNameSet.add(c.getRefName());
                    indexNameSet.add(c.getRefIndex().getName());
                }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/Function.java|(19171,124,<534,0>,<541,9>)","        }
    }

    public boolean equals(Object other) {

        if (other == this) {
            return true;
        }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/test/TestMultiInsert.java|(2198,238,<55,0>,<66,5>)","        super(name);
    }

    protected void setUp() {

        super.setUp();

        try {
            connection = super.newConnection();
            stmnt      = connection.createStatement();
        } catch (Exception e) {}
    }
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/rowio/RowOutputBinary.java|(6427,261,<223,0>,<234,53>)","    }

    protected void writeBinary(BinaryData o) {
        writeByteArray(o.getBytes());
    }

    protected void writeClob(ClobData o, Type type) {
        writeString(type.convertToString(o));

    }

    protected void writeBlob(BlobData o, Type type) {
"
2007,"|java+compilationUnit:///base/trunk/src/org/hsqldb/DDLParser.java|(87361,173,<3009,0>,<3017,9>)","                if (tokenType == Token.COMMA) {
                    read();

                    continue;
                }

                break;
            }
        }
"
